"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const fs_1 = require("fs");
const path_1 = require("path");
const rimraf_1 = require("rimraf");
const utils_1 = require("./utils");
async function runModifications(sourceBaseUrl, id, requestConfig, modifyContent) {
    let content = (await (0, axios_1.default)({
        baseURL: sourceBaseUrl,
        url: id,
        ...requestConfig
    })).data;
    let newIdent = id;
    const called = modifyContent?.(newIdent, content);
    let cont = called?.content;
    if (cont && typeof cont === "string") {
        content = cont;
    }
    let fn;
    if ((fn = called?.filename) && typeof fn === "string") {
        newIdent = fn;
    }
    return { content, newIdent };
}
// noinspection JSUnusedGlobalSymbols
async function pluginRemoteContent(context, options) {
    let { name, sourceBaseUrl, outDir, documents, noRuntimeDownloads = false, performCleanup = true, requestConfig = {}, modifyContent = () => undefined } = options;
    if (!name) {
        throw new Error("I need a name to work with! Please make sure it is path-safe.");
    }
    if (!outDir) {
        throw new Error("No output directory specified! Please specify one in your docusaurus-plugin-remote-content config (e.g. to download to the 'docs' folder, set outDir to docs.)");
    }
    if (!documents) {
        throw new Error("The documents field is undefined, so I don't know what to fetch! It should be a string array, function that returns a string array, or promise that resolves with a string array.");
    }
    if (!sourceBaseUrl) {
        throw new Error("The sourceBaseUrl field is undefined, so I don't know where to fetch from!");
    }
    async function findRemoteItems() {
        const a = [];
        const resolvedDocs = typeof documents === "function"
            ? documents()
            : (await documents);
        for (const id of resolvedDocs) {
            a.push({ id });
        }
        return a;
    }
    async function getTargetDirectory() {
        const returnValue = (0, path_1.join)(context.siteDir, outDir);
        if (!(0, fs_1.existsSync)(returnValue)) {
            (0, fs_1.mkdirSync)(returnValue, { recursive: true });
        }
        return returnValue;
    }
    async function fetchContent() {
        const c = await findRemoteItems();
        for (const { id } of c) {
            let { content, newIdent } = await runModifications(sourceBaseUrl, id, requestConfig, modifyContent);
            const checkIdent = newIdent.split("/").filter((seg) => seg !== "");
            checkIdent.pop();
            // if we are outputting to a subdirectory, make sure it exists
            if (checkIdent.length > 0) {
                (0, fs_1.mkdirSync)((0, path_1.join)(await getTargetDirectory(), checkIdent.join("/")), { recursive: true });
            }
            (0, fs_1.writeFileSync)((0, path_1.join)(await getTargetDirectory(), newIdent), content);
        }
    }
    async function cleanContent() {
        const c = await findRemoteItems();
        for (const { id } of c) {
            (0, rimraf_1.sync)((0, path_1.join)(await getTargetDirectory(), id));
        }
    }
    if (!noRuntimeDownloads) {
        await fetchContent();
    }
    // noinspection JSUnusedGlobalSymbols
    return {
        name: `docusaurus-plugin-remote-content-${name}`,
        async postBuild() {
            if (performCleanup) {
                return await cleanContent();
            }
        },
        extendCli(cli) {
            cli.command(`download-remote-${name}`)
                .description(`Downloads the remote ${name} data.`)
                .action(async () => await (0, utils_1.timeIt)(`fetch ${name}`, fetchContent));
            cli.command(`clear-remote-${name}`)
                .description(`Removes the local copy of the remote ${name} data.`)
                .action(async () => await (0, utils_1.timeIt)(`clear ${name}`, cleanContent));
        }
    };
}
exports.default = pluginRemoteContent;
__exportStar(require("./types"), exports);
//# sourceMappingURL=index.js.map
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.3
// source: path/protocol/morse.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MorseRequestErrorType enumerates possible relay request errors.
type MorseRequestErrorType int32

const (
	MorseRequestErrorType_MORSE_REQUEST_ERROR_UNSPECIFIED MorseRequestErrorType = 0
	// Internal error: e.g. no endpoint selected for serving the request.
	MorseRequestErrorType_MORSE_REQUEST_ERROR_INTERNAL MorseRequestErrorType = 1
)

// Enum value maps for MorseRequestErrorType.
var (
	MorseRequestErrorType_name = map[int32]string{
		0: "MORSE_REQUEST_ERROR_UNSPECIFIED",
		1: "MORSE_REQUEST_ERROR_INTERNAL",
	}
	MorseRequestErrorType_value = map[string]int32{
		"MORSE_REQUEST_ERROR_UNSPECIFIED": 0,
		"MORSE_REQUEST_ERROR_INTERNAL":    1,
	}
)

func (x MorseRequestErrorType) Enum() *MorseRequestErrorType {
	p := new(MorseRequestErrorType)
	*p = x
	return p
}

func (x MorseRequestErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MorseRequestErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_path_protocol_morse_proto_enumTypes[0].Descriptor()
}

func (MorseRequestErrorType) Type() protoreflect.EnumType {
	return &file_path_protocol_morse_proto_enumTypes[0]
}

func (x MorseRequestErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MorseRequestErrorType.Descriptor instead.
func (MorseRequestErrorType) EnumDescriptor() ([]byte, []int) {
	return file_path_protocol_morse_proto_rawDescGZIP(), []int{0}
}

// MorseEndpointErrorType enumerates possible relay errors when interacting with Morse endpoints
type MorseEndpointErrorType int32

const (
	MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_UNSPECIFIED       MorseEndpointErrorType = 0
	MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_CONNECTION_FAILED MorseEndpointErrorType = 1
	MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_TIMEOUT           MorseEndpointErrorType = 2
	MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_MAXED_OUT         MorseEndpointErrorType = 3
	// This error indicates the endpoint returned an SDK/pocket-core error as its response.
	MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_POCKET_CORE                         MorseEndpointErrorType = 4
	MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_TLS_CERTIFICATE_VERIFICATION_FAILED MorseEndpointErrorType = 5
	MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_INVALID_RESPONSE                    MorseEndpointErrorType = 6
	// This error indicates that the endpoint returned invalid data in its response and was rejected by the SDK.
	// This is important because the `protocol` package should not attempt to parse the response contents.
	MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_NON_JSON_RESPONSE MorseEndpointErrorType = 7
	// This error indicates the endpoint returned a 4xx HTTP status code.
	MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_HTTP_4XX_RESPONSE MorseEndpointErrorType = 8
	// This error indicates the endpoint returned a 5xx HTTP status code.
	MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_HTTP_5XX_RESPONSE MorseEndpointErrorType = 9
	// This error indicates the endpoint returned an HTTP response with a mismatch between ContentLength header and actual body length.
	// Mostly encountered as ContentLength > 0 with an actual body length of 0.
	MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_HTTP_LENGTH_HEADER_MISMATCH MorseEndpointErrorType = 10
	// Internal gateway errors
	MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_INTERNAL MorseEndpointErrorType = 11
	// This error indicates the endpoint returned an error on executing the HTTP request.
	// The SDK does not catch this, so the error string contains `error executing the http request: blockchain request`.
	// NOT the same as 4xx or 5xx, which are captured and returned by the SDK:
	// Reference:
	// https://github.com/pokt-foundation/pocket-go/blob/0cb5a3a2ab762e7af18b3482f864d2d9d211a71f/provider/provider.go#L24-26
	MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_EXECUTING_HTTP_REQUEST MorseEndpointErrorType = 12
)

// Enum value maps for MorseEndpointErrorType.
var (
	MorseEndpointErrorType_name = map[int32]string{
		0:  "MORSE_ENDPOINT_ERROR_UNSPECIFIED",
		1:  "MORSE_ENDPOINT_ERROR_CONNECTION_FAILED",
		2:  "MORSE_ENDPOINT_ERROR_TIMEOUT",
		3:  "MORSE_ENDPOINT_ERROR_MAXED_OUT",
		4:  "MORSE_ENDPOINT_ERROR_POCKET_CORE",
		5:  "MORSE_ENDPOINT_ERROR_TLS_CERTIFICATE_VERIFICATION_FAILED",
		6:  "MORSE_ENDPOINT_ERROR_INVALID_RESPONSE",
		7:  "MORSE_ENDPOINT_ERROR_NON_JSON_RESPONSE",
		8:  "MORSE_ENDPOINT_ERROR_HTTP_4XX_RESPONSE",
		9:  "MORSE_ENDPOINT_ERROR_HTTP_5XX_RESPONSE",
		10: "MORSE_ENDPOINT_ERROR_HTTP_LENGTH_HEADER_MISMATCH",
		11: "MORSE_ENDPOINT_ERROR_INTERNAL",
		12: "MORSE_ENDPOINT_ERROR_EXECUTING_HTTP_REQUEST",
	}
	MorseEndpointErrorType_value = map[string]int32{
		"MORSE_ENDPOINT_ERROR_UNSPECIFIED":                         0,
		"MORSE_ENDPOINT_ERROR_CONNECTION_FAILED":                   1,
		"MORSE_ENDPOINT_ERROR_TIMEOUT":                             2,
		"MORSE_ENDPOINT_ERROR_MAXED_OUT":                           3,
		"MORSE_ENDPOINT_ERROR_POCKET_CORE":                         4,
		"MORSE_ENDPOINT_ERROR_TLS_CERTIFICATE_VERIFICATION_FAILED": 5,
		"MORSE_ENDPOINT_ERROR_INVALID_RESPONSE":                    6,
		"MORSE_ENDPOINT_ERROR_NON_JSON_RESPONSE":                   7,
		"MORSE_ENDPOINT_ERROR_HTTP_4XX_RESPONSE":                   8,
		"MORSE_ENDPOINT_ERROR_HTTP_5XX_RESPONSE":                   9,
		"MORSE_ENDPOINT_ERROR_HTTP_LENGTH_HEADER_MISMATCH":         10,
		"MORSE_ENDPOINT_ERROR_INTERNAL":                            11,
		"MORSE_ENDPOINT_ERROR_EXECUTING_HTTP_REQUEST":              12,
	}
)

func (x MorseEndpointErrorType) Enum() *MorseEndpointErrorType {
	p := new(MorseEndpointErrorType)
	*p = x
	return p
}

func (x MorseEndpointErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MorseEndpointErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_path_protocol_morse_proto_enumTypes[1].Descriptor()
}

func (MorseEndpointErrorType) Type() protoreflect.EnumType {
	return &file_path_protocol_morse_proto_enumTypes[1]
}

func (x MorseEndpointErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MorseEndpointErrorType.Descriptor instead.
func (MorseEndpointErrorType) EnumDescriptor() ([]byte, []int) {
	return file_path_protocol_morse_proto_rawDescGZIP(), []int{1}
}

// TODO_DOCUMENT(@adshmh): Document the sanction system in the Morse protocol implementation:
// - Enumerate all sanction types with their specific triggers
// - Detail error conditions that activate each sanction category
// - Explain the rationale behind each sanction's severity level
// - Specify sanction durations and how they're calculated
// - Document potential escalation path for repeated violations
// - Include examples of boundary cases where sanctions apply/don't apply
//
// MorseSanctionType specifies the duration type for endpoint sanctions
type MorseSanctionType int32

const (
	MorseSanctionType_MORSE_SANCTION_UNSPECIFIED MorseSanctionType = 0
	// Valid only for current session
	MorseSanctionType_MORSE_SANCTION_SESSION MorseSanctionType = 1
	// Sanction persists indefinitely; can only be cleared by Gateway restart (e.g., redeploying the K8s pod or restarting the binary)
	MorseSanctionType_MORSE_SANCTION_PERMANENT MorseSanctionType = 2
)

// Enum value maps for MorseSanctionType.
var (
	MorseSanctionType_name = map[int32]string{
		0: "MORSE_SANCTION_UNSPECIFIED",
		1: "MORSE_SANCTION_SESSION",
		2: "MORSE_SANCTION_PERMANENT",
	}
	MorseSanctionType_value = map[string]int32{
		"MORSE_SANCTION_UNSPECIFIED": 0,
		"MORSE_SANCTION_SESSION":     1,
		"MORSE_SANCTION_PERMANENT":   2,
	}
)

func (x MorseSanctionType) Enum() *MorseSanctionType {
	p := new(MorseSanctionType)
	*p = x
	return p
}

func (x MorseSanctionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MorseSanctionType) Descriptor() protoreflect.EnumDescriptor {
	return file_path_protocol_morse_proto_enumTypes[2].Descriptor()
}

func (MorseSanctionType) Type() protoreflect.EnumType {
	return &file_path_protocol_morse_proto_enumTypes[2]
}

func (x MorseSanctionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MorseSanctionType.Descriptor instead.
func (MorseSanctionType) EnumDescriptor() ([]byte, []int) {
	return file_path_protocol_morse_proto_rawDescGZIP(), []int{2}
}

// MorseRequestObservations contains Morse-specific observations collected from relays
// handling a single service request.
type MorseRequestObservations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Service ID (i.e. chain ID) for which the observation was made
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Error encountered processing the request, if any.
	RequestError *MorseRequestError `protobuf:"bytes,2,opt,name=request_error,json=requestError,proto3,oneof" json:"request_error,omitempty"`
	// Tracks endpoint observation(s).
	// Only set if the request did not encounter any errors, e.g. an internal error.
	// Multiple observations possible if:
	// - Original endpoint returns invalid response
	// - Retry mechanism activates
	EndpointObservations []*MorseEndpointObservation `protobuf:"bytes,3,rep,name=endpoint_observations,json=endpointObservations,proto3" json:"endpoint_observations,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MorseRequestObservations) Reset() {
	*x = MorseRequestObservations{}
	mi := &file_path_protocol_morse_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MorseRequestObservations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MorseRequestObservations) ProtoMessage() {}

func (x *MorseRequestObservations) ProtoReflect() protoreflect.Message {
	mi := &file_path_protocol_morse_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MorseRequestObservations.ProtoReflect.Descriptor instead.
func (*MorseRequestObservations) Descriptor() ([]byte, []int) {
	return file_path_protocol_morse_proto_rawDescGZIP(), []int{0}
}

func (x *MorseRequestObservations) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *MorseRequestObservations) GetRequestError() *MorseRequestError {
	if x != nil {
		return x.RequestError
	}
	return nil
}

func (x *MorseRequestObservations) GetEndpointObservations() []*MorseEndpointObservation {
	if x != nil {
		return x.EndpointObservations
	}
	return nil
}

// MorseRequestError stores details of any errors encountered processing the request.
type MorseRequestError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of request error, e.g. internal
	ErrorType MorseRequestErrorType `protobuf:"varint,1,opt,name=error_type,json=errorType,proto3,enum=path.protocol.MorseRequestErrorType" json:"error_type,omitempty"`
	// Details of the request error.
	ErrorDetails  string `protobuf:"bytes,2,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MorseRequestError) Reset() {
	*x = MorseRequestError{}
	mi := &file_path_protocol_morse_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MorseRequestError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MorseRequestError) ProtoMessage() {}

func (x *MorseRequestError) ProtoReflect() protoreflect.Message {
	mi := &file_path_protocol_morse_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MorseRequestError.ProtoReflect.Descriptor instead.
func (*MorseRequestError) Descriptor() ([]byte, []int) {
	return file_path_protocol_morse_proto_rawDescGZIP(), []int{1}
}

func (x *MorseRequestError) GetErrorType() MorseRequestErrorType {
	if x != nil {
		return x.ErrorType
	}
	return MorseRequestErrorType_MORSE_REQUEST_ERROR_UNSPECIFIED
}

func (x *MorseRequestError) GetErrorDetails() string {
	if x != nil {
		return x.ErrorDetails
	}
	return ""
}

// MorseEndpointObservation stores a single observation from an endpoint
type MorseEndpointObservation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address of the endpoint handling the request
	EndpointAddr string `protobuf:"bytes,1,opt,name=endpoint_addr,json=endpointAddr,proto3" json:"endpoint_addr,omitempty"`
	// URL of the endpoint handling the request
	EndpointUrl string `protobuf:"bytes,2,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"`
	// Application address that signed the associated relay
	AppAddress string `protobuf:"bytes,3,opt,name=app_address,json=appAddress,proto3" json:"app_address,omitempty"`
	// Public key of the application that signed the associated relay
	AppPublicKey string `protobuf:"bytes,4,opt,name=app_public_key,json=appPublicKey,proto3" json:"app_public_key,omitempty"`
	// Session information when available
	SessionKey       string `protobuf:"bytes,5,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
	SessionServiceId string `protobuf:"bytes,6,opt,name=session_service_id,json=sessionServiceId,proto3" json:"session_service_id,omitempty"`
	// Session height
	SessionHeight int32 `protobuf:"varint,7,opt,name=session_height,json=sessionHeight,proto3" json:"session_height,omitempty"`
	// Timestamp marking the sending of the request to the endpoint.
	EndpointQueryTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=endpoint_query_timestamp,json=endpointQueryTimestamp,proto3" json:"endpoint_query_timestamp,omitempty"`
	// Timestamp marking the reception of the endpoint's response.
	// Only set if the endpoint did not timeout.
	EndpointResponseTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=endpoint_response_timestamp,json=endpointResponseTimestamp,proto3,oneof" json:"endpoint_response_timestamp,omitempty"`
	// Error type if relay to this endpoint failed
	ErrorType *MorseEndpointErrorType `protobuf:"varint,10,opt,name=error_type,json=errorType,proto3,enum=path.protocol.MorseEndpointErrorType,oneof" json:"error_type,omitempty"`
	// Additional error details when available
	ErrorDetails *string `protobuf:"bytes,11,opt,name=error_details,json=errorDetails,proto3,oneof" json:"error_details,omitempty"`
	// Recommended sanction type based on the error
	RecommendedSanction *MorseSanctionType `protobuf:"varint,12,opt,name=recommended_sanction,json=recommendedSanction,proto3,enum=path.protocol.MorseSanctionType,oneof" json:"recommended_sanction,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MorseEndpointObservation) Reset() {
	*x = MorseEndpointObservation{}
	mi := &file_path_protocol_morse_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MorseEndpointObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MorseEndpointObservation) ProtoMessage() {}

func (x *MorseEndpointObservation) ProtoReflect() protoreflect.Message {
	mi := &file_path_protocol_morse_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MorseEndpointObservation.ProtoReflect.Descriptor instead.
func (*MorseEndpointObservation) Descriptor() ([]byte, []int) {
	return file_path_protocol_morse_proto_rawDescGZIP(), []int{2}
}

func (x *MorseEndpointObservation) GetEndpointAddr() string {
	if x != nil {
		return x.EndpointAddr
	}
	return ""
}

func (x *MorseEndpointObservation) GetEndpointUrl() string {
	if x != nil {
		return x.EndpointUrl
	}
	return ""
}

func (x *MorseEndpointObservation) GetAppAddress() string {
	if x != nil {
		return x.AppAddress
	}
	return ""
}

func (x *MorseEndpointObservation) GetAppPublicKey() string {
	if x != nil {
		return x.AppPublicKey
	}
	return ""
}

func (x *MorseEndpointObservation) GetSessionKey() string {
	if x != nil {
		return x.SessionKey
	}
	return ""
}

func (x *MorseEndpointObservation) GetSessionServiceId() string {
	if x != nil {
		return x.SessionServiceId
	}
	return ""
}

func (x *MorseEndpointObservation) GetSessionHeight() int32 {
	if x != nil {
		return x.SessionHeight
	}
	return 0
}

func (x *MorseEndpointObservation) GetEndpointQueryTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndpointQueryTimestamp
	}
	return nil
}

func (x *MorseEndpointObservation) GetEndpointResponseTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndpointResponseTimestamp
	}
	return nil
}

func (x *MorseEndpointObservation) GetErrorType() MorseEndpointErrorType {
	if x != nil && x.ErrorType != nil {
		return *x.ErrorType
	}
	return MorseEndpointErrorType_MORSE_ENDPOINT_ERROR_UNSPECIFIED
}

func (x *MorseEndpointObservation) GetErrorDetails() string {
	if x != nil && x.ErrorDetails != nil {
		return *x.ErrorDetails
	}
	return ""
}

func (x *MorseEndpointObservation) GetRecommendedSanction() MorseSanctionType {
	if x != nil && x.RecommendedSanction != nil {
		return *x.RecommendedSanction
	}
	return MorseSanctionType_MORSE_SANCTION_UNSPECIFIED
}

// TODO_MVP(@adshmh): Assess if a list of observations (vs. just a list of endpoint observarions) is needed per service request.
// Drop the MorseObservationsList if it is not yet required.
//
// MorseObservationsList is a wrapper message that enables embedding lists of
// Morse observations in other protocol buffers.
type MorseObservationsList struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Observations  []*MorseRequestObservations `protobuf:"bytes,1,rep,name=observations,proto3" json:"observations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MorseObservationsList) Reset() {
	*x = MorseObservationsList{}
	mi := &file_path_protocol_morse_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MorseObservationsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MorseObservationsList) ProtoMessage() {}

func (x *MorseObservationsList) ProtoReflect() protoreflect.Message {
	mi := &file_path_protocol_morse_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MorseObservationsList.ProtoReflect.Descriptor instead.
func (*MorseObservationsList) Descriptor() ([]byte, []int) {
	return file_path_protocol_morse_proto_rawDescGZIP(), []int{3}
}

func (x *MorseObservationsList) GetObservations() []*MorseRequestObservations {
	if x != nil {
		return x.Observations
	}
	return nil
}

var File_path_protocol_morse_proto protoreflect.FileDescriptor

const file_path_protocol_morse_proto_rawDesc = "" +
	"\n" +
	"\x19path/protocol/morse.proto\x12\rpath.protocol\x1a\x1fgoogle/protobuf/timestamp.proto\"\xf5\x01\n" +
	"\x18MorseRequestObservations\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\x12J\n" +
	"\rrequest_error\x18\x02 \x01(\v2 .path.protocol.MorseRequestErrorH\x00R\frequestError\x88\x01\x01\x12\\\n" +
	"\x15endpoint_observations\x18\x03 \x03(\v2'.path.protocol.MorseEndpointObservationR\x14endpointObservationsB\x10\n" +
	"\x0e_request_error\"}\n" +
	"\x11MorseRequestError\x12C\n" +
	"\n" +
	"error_type\x18\x01 \x01(\x0e2$.path.protocol.MorseRequestErrorTypeR\terrorType\x12#\n" +
	"\rerror_details\x18\x02 \x01(\tR\ferrorDetails\"\xff\x05\n" +
	"\x18MorseEndpointObservation\x12#\n" +
	"\rendpoint_addr\x18\x01 \x01(\tR\fendpointAddr\x12!\n" +
	"\fendpoint_url\x18\x02 \x01(\tR\vendpointUrl\x12\x1f\n" +
	"\vapp_address\x18\x03 \x01(\tR\n" +
	"appAddress\x12$\n" +
	"\x0eapp_public_key\x18\x04 \x01(\tR\fappPublicKey\x12\x1f\n" +
	"\vsession_key\x18\x05 \x01(\tR\n" +
	"sessionKey\x12,\n" +
	"\x12session_service_id\x18\x06 \x01(\tR\x10sessionServiceId\x12%\n" +
	"\x0esession_height\x18\a \x01(\x05R\rsessionHeight\x12T\n" +
	"\x18endpoint_query_timestamp\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x16endpointQueryTimestamp\x12_\n" +
	"\x1bendpoint_response_timestamp\x18\t \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x19endpointResponseTimestamp\x88\x01\x01\x12I\n" +
	"\n" +
	"error_type\x18\n" +
	" \x01(\x0e2%.path.protocol.MorseEndpointErrorTypeH\x01R\terrorType\x88\x01\x01\x12(\n" +
	"\rerror_details\x18\v \x01(\tH\x02R\ferrorDetails\x88\x01\x01\x12X\n" +
	"\x14recommended_sanction\x18\f \x01(\x0e2 .path.protocol.MorseSanctionTypeH\x03R\x13recommendedSanction\x88\x01\x01B\x1e\n" +
	"\x1c_endpoint_response_timestampB\r\n" +
	"\v_error_typeB\x10\n" +
	"\x0e_error_detailsB\x17\n" +
	"\x15_recommended_sanction\"d\n" +
	"\x15MorseObservationsList\x12K\n" +
	"\fobservations\x18\x01 \x03(\v2'.path.protocol.MorseRequestObservationsR\fobservations*^\n" +
	"\x15MorseRequestErrorType\x12#\n" +
	"\x1fMORSE_REQUEST_ERROR_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cMORSE_REQUEST_ERROR_INTERNAL\x10\x01*\xcd\x04\n" +
	"\x16MorseEndpointErrorType\x12$\n" +
	" MORSE_ENDPOINT_ERROR_UNSPECIFIED\x10\x00\x12*\n" +
	"&MORSE_ENDPOINT_ERROR_CONNECTION_FAILED\x10\x01\x12 \n" +
	"\x1cMORSE_ENDPOINT_ERROR_TIMEOUT\x10\x02\x12\"\n" +
	"\x1eMORSE_ENDPOINT_ERROR_MAXED_OUT\x10\x03\x12$\n" +
	" MORSE_ENDPOINT_ERROR_POCKET_CORE\x10\x04\x12<\n" +
	"8MORSE_ENDPOINT_ERROR_TLS_CERTIFICATE_VERIFICATION_FAILED\x10\x05\x12)\n" +
	"%MORSE_ENDPOINT_ERROR_INVALID_RESPONSE\x10\x06\x12*\n" +
	"&MORSE_ENDPOINT_ERROR_NON_JSON_RESPONSE\x10\a\x12*\n" +
	"&MORSE_ENDPOINT_ERROR_HTTP_4XX_RESPONSE\x10\b\x12*\n" +
	"&MORSE_ENDPOINT_ERROR_HTTP_5XX_RESPONSE\x10\t\x124\n" +
	"0MORSE_ENDPOINT_ERROR_HTTP_LENGTH_HEADER_MISMATCH\x10\n" +
	"\x12!\n" +
	"\x1dMORSE_ENDPOINT_ERROR_INTERNAL\x10\v\x12/\n" +
	"+MORSE_ENDPOINT_ERROR_EXECUTING_HTTP_REQUEST\x10\f*m\n" +
	"\x11MorseSanctionType\x12\x1e\n" +
	"\x1aMORSE_SANCTION_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16MORSE_SANCTION_SESSION\x10\x01\x12\x1c\n" +
	"\x18MORSE_SANCTION_PERMANENT\x10\x02B5Z3github.com/buildwithgrove/path/observation/protocolb\x06proto3"

var (
	file_path_protocol_morse_proto_rawDescOnce sync.Once
	file_path_protocol_morse_proto_rawDescData []byte
)

func file_path_protocol_morse_proto_rawDescGZIP() []byte {
	file_path_protocol_morse_proto_rawDescOnce.Do(func() {
		file_path_protocol_morse_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_path_protocol_morse_proto_rawDesc), len(file_path_protocol_morse_proto_rawDesc)))
	})
	return file_path_protocol_morse_proto_rawDescData
}

var file_path_protocol_morse_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_path_protocol_morse_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_path_protocol_morse_proto_goTypes = []any{
	(MorseRequestErrorType)(0),       // 0: path.protocol.MorseRequestErrorType
	(MorseEndpointErrorType)(0),      // 1: path.protocol.MorseEndpointErrorType
	(MorseSanctionType)(0),           // 2: path.protocol.MorseSanctionType
	(*MorseRequestObservations)(nil), // 3: path.protocol.MorseRequestObservations
	(*MorseRequestError)(nil),        // 4: path.protocol.MorseRequestError
	(*MorseEndpointObservation)(nil), // 5: path.protocol.MorseEndpointObservation
	(*MorseObservationsList)(nil),    // 6: path.protocol.MorseObservationsList
	(*timestamppb.Timestamp)(nil),    // 7: google.protobuf.Timestamp
}
var file_path_protocol_morse_proto_depIdxs = []int32{
	4, // 0: path.protocol.MorseRequestObservations.request_error:type_name -> path.protocol.MorseRequestError
	5, // 1: path.protocol.MorseRequestObservations.endpoint_observations:type_name -> path.protocol.MorseEndpointObservation
	0, // 2: path.protocol.MorseRequestError.error_type:type_name -> path.protocol.MorseRequestErrorType
	7, // 3: path.protocol.MorseEndpointObservation.endpoint_query_timestamp:type_name -> google.protobuf.Timestamp
	7, // 4: path.protocol.MorseEndpointObservation.endpoint_response_timestamp:type_name -> google.protobuf.Timestamp
	1, // 5: path.protocol.MorseEndpointObservation.error_type:type_name -> path.protocol.MorseEndpointErrorType
	2, // 6: path.protocol.MorseEndpointObservation.recommended_sanction:type_name -> path.protocol.MorseSanctionType
	3, // 7: path.protocol.MorseObservationsList.observations:type_name -> path.protocol.MorseRequestObservations
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_path_protocol_morse_proto_init() }
func file_path_protocol_morse_proto_init() {
	if File_path_protocol_morse_proto != nil {
		return
	}
	file_path_protocol_morse_proto_msgTypes[0].OneofWrappers = []any{}
	file_path_protocol_morse_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_path_protocol_morse_proto_rawDesc), len(file_path_protocol_morse_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_path_protocol_morse_proto_goTypes,
		DependencyIndexes: file_path_protocol_morse_proto_depIdxs,
		EnumInfos:         file_path_protocol_morse_proto_enumTypes,
		MessageInfos:      file_path_protocol_morse_proto_msgTypes,
	}.Build()
	File_path_protocol_morse_proto = out.File
	file_path_protocol_morse_proto_goTypes = nil
	file_path_protocol_morse_proto_depIdxs = nil
}

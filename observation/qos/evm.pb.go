// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.3
// source: path/qos/evm.proto

// TODO_MVP(@adshmh): Address linter warning on all the .proto files:
// Package name "path.qos" should be suffixed with a correctly formed version, such as "path.qos.v1"
//
// Buf used as linter for proto files:
// https://buf.build/docs/lint/overview/

package qos

import (
	_ "github.com/buildwithgrove/path/observation/metadata"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EVMRequestValidationError enumerates possible causes for EVM request rejection:
// Invalid request types (as of PR #186):
//  1. Internal server error while reading the HTTP request body
//  2. Unmarshal error when parsing request into the expected format
type EVMRequestValidationError int32

const (
	EVMRequestValidationError_EVM_REQUEST_VALIDATION_ERROR_UNSPECIFIED                  EVMRequestValidationError = 0
	EVMRequestValidationError_EVM_REQUEST_VALIDATION_ERROR_HTTP_BODY_READ_FAILURE       EVMRequestValidationError = 1
	EVMRequestValidationError_EVM_REQUEST_VALIDATION_ERROR_REQUEST_UNMARSHALING_FAILURE EVMRequestValidationError = 2
)

// Enum value maps for EVMRequestValidationError.
var (
	EVMRequestValidationError_name = map[int32]string{
		0: "EVM_REQUEST_VALIDATION_ERROR_UNSPECIFIED",
		1: "EVM_REQUEST_VALIDATION_ERROR_HTTP_BODY_READ_FAILURE",
		2: "EVM_REQUEST_VALIDATION_ERROR_REQUEST_UNMARSHALING_FAILURE",
	}
	EVMRequestValidationError_value = map[string]int32{
		"EVM_REQUEST_VALIDATION_ERROR_UNSPECIFIED":                  0,
		"EVM_REQUEST_VALIDATION_ERROR_HTTP_BODY_READ_FAILURE":       1,
		"EVM_REQUEST_VALIDATION_ERROR_REQUEST_UNMARSHALING_FAILURE": 2,
	}
)

func (x EVMRequestValidationError) Enum() *EVMRequestValidationError {
	p := new(EVMRequestValidationError)
	*p = x
	return p
}

func (x EVMRequestValidationError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVMRequestValidationError) Descriptor() protoreflect.EnumDescriptor {
	return file_path_qos_evm_proto_enumTypes[0].Descriptor()
}

func (EVMRequestValidationError) Type() protoreflect.EnumType {
	return &file_path_qos_evm_proto_enumTypes[0]
}

func (x EVMRequestValidationError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVMRequestValidationError.Descriptor instead.
func (EVMRequestValidationError) EnumDescriptor() ([]byte, []int) {
	return file_path_qos_evm_proto_rawDescGZIP(), []int{0}
}

// TODO_DOCUMENT(@adshmh): Create a design document for the feature described below.
// TODO_MVP(@adshmh): Add EVMUserErrorType enum
//
// Purpose: Distinguish between endpoint technical failures and user input errors
//
// Background:
// - Currently we only track endpoint/technical failures
// - Need to identify when request seems valid but fails due to user input issues (e.g., non-existent hash)
//
// Implementation:
// 1. Create new EVMUserErrorType enum with categories like RESOURCE_NOT_FOUND, INVALID_PARAMETER
// 2. Add user_error field to appropriate response types
// 3. Update HTTP status code selection logic to consider user errors
//
// Benefits:
// - More accurate error reporting to clients
// - Appropriate HTTP status codes (e.g., 404 vs 500)
// - Better client debugging experience
//
// EVMResponseValidationError defines why an endpoint response was rejected.
// Current invalid response types (as of PR #186):
//  1. EmptyResponse - endpoint returned no data
//  2. UnmarshalErr - response failed to parse into expected format
//  3. NoResponse - no responses recorded by the QoS service: probably caused by protocol-level errors
type EVMResponseValidationError int32

const (
	EVMResponseValidationError_EVM_RESPONSE_VALIDATION_ERROR_UNSPECIFIED EVMResponseValidationError = 0
	EVMResponseValidationError_EVM_RESPONSE_VALIDATION_ERROR_EMPTY       EVMResponseValidationError = 1 // Response with no data.
	EVMResponseValidationError_EVM_RESPONSE_VALIDATION_ERROR_UNMARSHAL   EVMResponseValidationError = 2 // Response parsing failed
	EVMResponseValidationError_EVM_RESPONSE_VALIDATION_ERROR_NO_RESPONSE EVMResponseValidationError = 3 // No response received from any endpoint
)

// Enum value maps for EVMResponseValidationError.
var (
	EVMResponseValidationError_name = map[int32]string{
		0: "EVM_RESPONSE_VALIDATION_ERROR_UNSPECIFIED",
		1: "EVM_RESPONSE_VALIDATION_ERROR_EMPTY",
		2: "EVM_RESPONSE_VALIDATION_ERROR_UNMARSHAL",
		3: "EVM_RESPONSE_VALIDATION_ERROR_NO_RESPONSE",
	}
	EVMResponseValidationError_value = map[string]int32{
		"EVM_RESPONSE_VALIDATION_ERROR_UNSPECIFIED": 0,
		"EVM_RESPONSE_VALIDATION_ERROR_EMPTY":       1,
		"EVM_RESPONSE_VALIDATION_ERROR_UNMARSHAL":   2,
		"EVM_RESPONSE_VALIDATION_ERROR_NO_RESPONSE": 3,
	}
)

func (x EVMResponseValidationError) Enum() *EVMResponseValidationError {
	p := new(EVMResponseValidationError)
	*p = x
	return p
}

func (x EVMResponseValidationError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVMResponseValidationError) Descriptor() protoreflect.EnumDescriptor {
	return file_path_qos_evm_proto_enumTypes[1].Descriptor()
}

func (EVMResponseValidationError) Type() protoreflect.EnumType {
	return &file_path_qos_evm_proto_enumTypes[1]
}

func (x EVMResponseValidationError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVMResponseValidationError.Descriptor instead.
func (EVMResponseValidationError) EnumDescriptor() ([]byte, []int) {
	return file_path_qos_evm_proto_rawDescGZIP(), []int{1}
}

// EVMRequestObservations captures all observations made while serving a single EVM blockchain service request.
type EVMRequestObservations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// chain_id is the blockchain identifier is the blockchain identifier for the evm QoS implementation.
	// This is preset by the processor and not determined by the request.
	// Expected as the `Result` field in eth_chainId responses.
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// If set with one of the validation failure types:
	//   - Indicates the request failed validation
	//   - Contains details about the specific failure type
	//   - The HTTP status code in the selected failure type overrides any status codes from
	//     endpoint observations and should be returned to the client
	//
	// If this oneof is NOT set:
	//   - The request passed validation
	//   - The HTTP status code from the most recent endpoint observation should be used instead
	//
	// Note: If there is an error reading the HTTP request, there will be no jsonrpc_request.
	//
	// Types that are assignable to RequestValidationFailure:
	//
	//	*EVMRequestObservations_EvmHttpBodyReadFailure
	//	*EVMRequestObservations_EvmRequestUnmarshalingFailure
	RequestValidationFailure isEVMRequestObservations_RequestValidationFailure `protobuf_oneof:"request_validation_failure"`
	// The EVM blockchain service's JSON-RPC request.
	// This field will be populated only if request validation succeeds.
	// TODO_TECHDEBT: Assumes EVM chains only support JSON-RPC. May need refactoring to support other protocols.
	JsonrpcRequest *JsonRpcRequest `protobuf:"bytes,4,opt,name=jsonrpc_request,json=jsonrpcRequest,proto3" json:"jsonrpc_request,omitempty"`
	// EVM-specific observations from endpoint(s) that responded to the service request.
	// Multiple observations may occur when:
	// * Original endpoint fails
	// * Request is sent to additional endpoints for data collection
	// This field will only be populated if request validation succeeds.
	EndpointObservations []*EVMEndpointObservation `protobuf:"bytes,5,rep,name=endpoint_observations,json=endpointObservations,proto3" json:"endpoint_observations,omitempty"`
}

func (x *EVMRequestObservations) Reset() {
	*x = EVMRequestObservations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_path_qos_evm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMRequestObservations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMRequestObservations) ProtoMessage() {}

func (x *EVMRequestObservations) ProtoReflect() protoreflect.Message {
	mi := &file_path_qos_evm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMRequestObservations.ProtoReflect.Descriptor instead.
func (*EVMRequestObservations) Descriptor() ([]byte, []int) {
	return file_path_qos_evm_proto_rawDescGZIP(), []int{0}
}

func (x *EVMRequestObservations) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (m *EVMRequestObservations) GetRequestValidationFailure() isEVMRequestObservations_RequestValidationFailure {
	if m != nil {
		return m.RequestValidationFailure
	}
	return nil
}

func (x *EVMRequestObservations) GetEvmHttpBodyReadFailure() *EVMHTTPBodyReadFailure {
	if x, ok := x.GetRequestValidationFailure().(*EVMRequestObservations_EvmHttpBodyReadFailure); ok {
		return x.EvmHttpBodyReadFailure
	}
	return nil
}

func (x *EVMRequestObservations) GetEvmRequestUnmarshalingFailure() *EVMRequestUnmarshalingFailure {
	if x, ok := x.GetRequestValidationFailure().(*EVMRequestObservations_EvmRequestUnmarshalingFailure); ok {
		return x.EvmRequestUnmarshalingFailure
	}
	return nil
}

func (x *EVMRequestObservations) GetJsonrpcRequest() *JsonRpcRequest {
	if x != nil {
		return x.JsonrpcRequest
	}
	return nil
}

func (x *EVMRequestObservations) GetEndpointObservations() []*EVMEndpointObservation {
	if x != nil {
		return x.EndpointObservations
	}
	return nil
}

type isEVMRequestObservations_RequestValidationFailure interface {
	isEVMRequestObservations_RequestValidationFailure()
}

type EVMRequestObservations_EvmHttpBodyReadFailure struct {
	// Indicates a failure to read the HTTP request body
	EvmHttpBodyReadFailure *EVMHTTPBodyReadFailure `protobuf:"bytes,2,opt,name=evm_http_body_read_failure,json=evmHttpBodyReadFailure,proto3,oneof"`
}

type EVMRequestObservations_EvmRequestUnmarshalingFailure struct {
	// Indicates a failure to unmarshal/parse the request
	EvmRequestUnmarshalingFailure *EVMRequestUnmarshalingFailure `protobuf:"bytes,3,opt,name=evm_request_unmarshaling_failure,json=evmRequestUnmarshalingFailure,proto3,oneof"`
}

func (*EVMRequestObservations_EvmHttpBodyReadFailure) isEVMRequestObservations_RequestValidationFailure() {
}

func (*EVMRequestObservations_EvmRequestUnmarshalingFailure) isEVMRequestObservations_RequestValidationFailure() {
}

// TODO_MVP(@adshmh): Remove HTTP body read validation once QoS interface is updated to receive request payload directly rather than reading from the HTTP request body.
//
// EVMHTTPBodyReadFailure represents a validation failure due to internal server error
// while attempting to read the HTTP request body.
type EVMHTTPBodyReadFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP status code to return to the client - typically 500 Internal Server Error
	HttpStatusCode int32 `protobuf:"varint,1,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
	// The specific type of request validation error
	ValidationError EVMRequestValidationError `protobuf:"varint,2,opt,name=validation_error,json=validationError,proto3,enum=path.qos.EVMRequestValidationError" json:"validation_error,omitempty"`
	// Additional error details if available
	ErrorDetails *string `protobuf:"bytes,3,opt,name=error_details,json=errorDetails,proto3,oneof" json:"error_details,omitempty"`
}

func (x *EVMHTTPBodyReadFailure) Reset() {
	*x = EVMHTTPBodyReadFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_path_qos_evm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMHTTPBodyReadFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMHTTPBodyReadFailure) ProtoMessage() {}

func (x *EVMHTTPBodyReadFailure) ProtoReflect() protoreflect.Message {
	mi := &file_path_qos_evm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMHTTPBodyReadFailure.ProtoReflect.Descriptor instead.
func (*EVMHTTPBodyReadFailure) Descriptor() ([]byte, []int) {
	return file_path_qos_evm_proto_rawDescGZIP(), []int{1}
}

func (x *EVMHTTPBodyReadFailure) GetHttpStatusCode() int32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *EVMHTTPBodyReadFailure) GetValidationError() EVMRequestValidationError {
	if x != nil {
		return x.ValidationError
	}
	return EVMRequestValidationError_EVM_REQUEST_VALIDATION_ERROR_UNSPECIFIED
}

func (x *EVMHTTPBodyReadFailure) GetErrorDetails() string {
	if x != nil && x.ErrorDetails != nil {
		return *x.ErrorDetails
	}
	return ""
}

// EVMRequestUnmarshalingFailure represents a validation failure due to being unable
// to parse the incoming request into the expected format.
type EVMRequestUnmarshalingFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP status code to return to the client - typically 400 Bad Request
	HttpStatusCode int32 `protobuf:"varint,1,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
	// The specific type of request validation error
	ValidationError EVMRequestValidationError `protobuf:"varint,2,opt,name=validation_error,json=validationError,proto3,enum=path.qos.EVMRequestValidationError" json:"validation_error,omitempty"`
	// Additional error details if available
	ErrorDetails *string `protobuf:"bytes,3,opt,name=error_details,json=errorDetails,proto3,oneof" json:"error_details,omitempty"`
}

func (x *EVMRequestUnmarshalingFailure) Reset() {
	*x = EVMRequestUnmarshalingFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_path_qos_evm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMRequestUnmarshalingFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMRequestUnmarshalingFailure) ProtoMessage() {}

func (x *EVMRequestUnmarshalingFailure) ProtoReflect() protoreflect.Message {
	mi := &file_path_qos_evm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMRequestUnmarshalingFailure.ProtoReflect.Descriptor instead.
func (*EVMRequestUnmarshalingFailure) Descriptor() ([]byte, []int) {
	return file_path_qos_evm_proto_rawDescGZIP(), []int{2}
}

func (x *EVMRequestUnmarshalingFailure) GetHttpStatusCode() int32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *EVMRequestUnmarshalingFailure) GetValidationError() EVMRequestValidationError {
	if x != nil {
		return x.ValidationError
	}
	return EVMRequestValidationError_EVM_REQUEST_VALIDATION_ERROR_UNSPECIFIED
}

func (x *EVMRequestUnmarshalingFailure) GetErrorDetails() string {
	if x != nil && x.ErrorDetails != nil {
		return *x.ErrorDetails
	}
	return ""
}

// EVMEndpointObservation stores a single observation from an endpoint servicing the protocol response.
// Example: A Pocket node on Shannon backed by an Ethereum data node servicing an `eth_getBlockNumber` request.
type EVMEndpointObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the endpoint handling the request (e.g., onchain address of a Pocket Morse/Shannon node)
	EndpointAddr string `protobuf:"bytes,1,opt,name=endpoint_addr,json=endpointAddr,proto3" json:"endpoint_addr,omitempty"`
	// Details of the response received from the endpoint
	//
	// Types that are assignable to ResponseObservation:
	//
	//	*EVMEndpointObservation_ChainIdResponse
	//	*EVMEndpointObservation_BlockNumberResponse
	//	*EVMEndpointObservation_ArchivalResponse
	//	*EVMEndpointObservation_UnrecognizedResponse
	//	*EVMEndpointObservation_EmptyResponse
	//	*EVMEndpointObservation_NoResponse
	ResponseObservation isEVMEndpointObservation_ResponseObservation `protobuf_oneof:"response_observation"`
}

func (x *EVMEndpointObservation) Reset() {
	*x = EVMEndpointObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_path_qos_evm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMEndpointObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMEndpointObservation) ProtoMessage() {}

func (x *EVMEndpointObservation) ProtoReflect() protoreflect.Message {
	mi := &file_path_qos_evm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMEndpointObservation.ProtoReflect.Descriptor instead.
func (*EVMEndpointObservation) Descriptor() ([]byte, []int) {
	return file_path_qos_evm_proto_rawDescGZIP(), []int{3}
}

func (x *EVMEndpointObservation) GetEndpointAddr() string {
	if x != nil {
		return x.EndpointAddr
	}
	return ""
}

func (m *EVMEndpointObservation) GetResponseObservation() isEVMEndpointObservation_ResponseObservation {
	if m != nil {
		return m.ResponseObservation
	}
	return nil
}

func (x *EVMEndpointObservation) GetChainIdResponse() *EVMChainIDResponse {
	if x, ok := x.GetResponseObservation().(*EVMEndpointObservation_ChainIdResponse); ok {
		return x.ChainIdResponse
	}
	return nil
}

func (x *EVMEndpointObservation) GetBlockNumberResponse() *EVMBlockNumberResponse {
	if x, ok := x.GetResponseObservation().(*EVMEndpointObservation_BlockNumberResponse); ok {
		return x.BlockNumberResponse
	}
	return nil
}

func (x *EVMEndpointObservation) GetArchivalResponse() *EVMArchivalResponse {
	if x, ok := x.GetResponseObservation().(*EVMEndpointObservation_ArchivalResponse); ok {
		return x.ArchivalResponse
	}
	return nil
}

func (x *EVMEndpointObservation) GetUnrecognizedResponse() *EVMUnrecognizedResponse {
	if x, ok := x.GetResponseObservation().(*EVMEndpointObservation_UnrecognizedResponse); ok {
		return x.UnrecognizedResponse
	}
	return nil
}

func (x *EVMEndpointObservation) GetEmptyResponse() *EVMEmptyResponse {
	if x, ok := x.GetResponseObservation().(*EVMEndpointObservation_EmptyResponse); ok {
		return x.EmptyResponse
	}
	return nil
}

func (x *EVMEndpointObservation) GetNoResponse() *EVMNoResponse {
	if x, ok := x.GetResponseObservation().(*EVMEndpointObservation_NoResponse); ok {
		return x.NoResponse
	}
	return nil
}

type isEVMEndpointObservation_ResponseObservation interface {
	isEVMEndpointObservation_ResponseObservation()
}

type EVMEndpointObservation_ChainIdResponse struct {
	// Response to `eth_chainId` request
	// Reference: https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid
	ChainIdResponse *EVMChainIDResponse `protobuf:"bytes,2,opt,name=chain_id_response,json=chainIdResponse,proto3,oneof"`
}

type EVMEndpointObservation_BlockNumberResponse struct {
	// Response to `eth_blockNumber` request
	// References:
	// * https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber
	// * Chain IDs: https://chainlist.org
	BlockNumberResponse *EVMBlockNumberResponse `protobuf:"bytes,3,opt,name=block_number_response,json=blockNumberResponse,proto3,oneof"`
}

type EVMEndpointObservation_ArchivalResponse struct {
	// Response to `eth_getBlockByNumber` request
	// References:
	// * https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber
	ArchivalResponse *EVMArchivalResponse `protobuf:"bytes,4,opt,name=archival_response,json=archivalResponse,proto3,oneof"`
}

type EVMEndpointObservation_UnrecognizedResponse struct {
	// Responses not used in endpoint validation (e.g., JSONRPC ID field from `eth_call`)
	UnrecognizedResponse *EVMUnrecognizedResponse `protobuf:"bytes,5,opt,name=unrecognized_response,json=unrecognizedResponse,proto3,oneof"`
}

type EVMEndpointObservation_EmptyResponse struct {
	// EVMEmptyResponse indicates an endpoint returned no data.
	// Used to:
	//   - Disqualify endpoints that return empty responses
	//   - Track metrics for empty response patterns
	EmptyResponse *EVMEmptyResponse `protobuf:"bytes,6,opt,name=empty_response,json=emptyResponse,proto3,oneof"`
}

type EVMEndpointObservation_NoResponse struct {
	// EVMNoResponse indicates no response was received from any endpoint.
	// This differs from EVMEmptyResponse as no response was reported by the protocol.
	NoResponse *EVMNoResponse `protobuf:"bytes,7,opt,name=no_response,json=noResponse,proto3,oneof"`
}

func (*EVMEndpointObservation_ChainIdResponse) isEVMEndpointObservation_ResponseObservation() {}

func (*EVMEndpointObservation_BlockNumberResponse) isEVMEndpointObservation_ResponseObservation() {}

func (*EVMEndpointObservation_ArchivalResponse) isEVMEndpointObservation_ResponseObservation() {}

func (*EVMEndpointObservation_UnrecognizedResponse) isEVMEndpointObservation_ResponseObservation() {}

func (*EVMEndpointObservation_EmptyResponse) isEVMEndpointObservation_ResponseObservation() {}

func (*EVMEndpointObservation_NoResponse) isEVMEndpointObservation_ResponseObservation() {}

// TODO_MVP(@adshmh): Implement a consolidated SanctionObservation message structure that:
//  1. Contains both SanctionType enum and RecommendedSanction field
//  2. Can be embedded as a single field within all qos/Response.proto messages
//  3. Ensures sanction policies are explicitly documented within message definitions
//  4. Maintains alignment with the Morse protocol sanction specifications
//  5. Search for all instances of RecommendedSanction in the codebase and use this new structure instead
//
// EVMChainIDResponse stores the response to an `eth_chainId` request
// https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid
type EVMChainIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP status code received from the endpoint
	HttpStatusCode int32 `protobuf:"varint,1,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
	// The chain ID value returned in the response
	ChainIdResponse string `protobuf:"bytes,2,opt,name=chain_id_response,json=chainIdResponse,proto3" json:"chain_id_response,omitempty"`
	// Why the response failed QoS validation
	// If not set, the response is considered valid
	ResponseValidationError *EVMResponseValidationError `protobuf:"varint,3,opt,name=response_validation_error,json=responseValidationError,proto3,enum=path.qos.EVMResponseValidationError,oneof" json:"response_validation_error,omitempty"`
}

func (x *EVMChainIDResponse) Reset() {
	*x = EVMChainIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_path_qos_evm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMChainIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMChainIDResponse) ProtoMessage() {}

func (x *EVMChainIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_path_qos_evm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMChainIDResponse.ProtoReflect.Descriptor instead.
func (*EVMChainIDResponse) Descriptor() ([]byte, []int) {
	return file_path_qos_evm_proto_rawDescGZIP(), []int{4}
}

func (x *EVMChainIDResponse) GetHttpStatusCode() int32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *EVMChainIDResponse) GetChainIdResponse() string {
	if x != nil {
		return x.ChainIdResponse
	}
	return ""
}

func (x *EVMChainIDResponse) GetResponseValidationError() EVMResponseValidationError {
	if x != nil && x.ResponseValidationError != nil {
		return *x.ResponseValidationError
	}
	return EVMResponseValidationError_EVM_RESPONSE_VALIDATION_ERROR_UNSPECIFIED
}

// EVMBlockNumberResponse stores the response to an `eth_getBlockNumber` request
// https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber
type EVMBlockNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP status code received from the endpoint
	HttpStatusCode int32 `protobuf:"varint,1,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
	// The block number value returned in the response
	BlockNumberResponse string `protobuf:"bytes,2,opt,name=block_number_response,json=blockNumberResponse,proto3" json:"block_number_response,omitempty"`
	// Why the response failed QoS validation
	// If not set, the response is considered valid
	ResponseValidationError *EVMResponseValidationError `protobuf:"varint,3,opt,name=response_validation_error,json=responseValidationError,proto3,enum=path.qos.EVMResponseValidationError,oneof" json:"response_validation_error,omitempty"`
}

func (x *EVMBlockNumberResponse) Reset() {
	*x = EVMBlockNumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_path_qos_evm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMBlockNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMBlockNumberResponse) ProtoMessage() {}

func (x *EVMBlockNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_path_qos_evm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMBlockNumberResponse.ProtoReflect.Descriptor instead.
func (*EVMBlockNumberResponse) Descriptor() ([]byte, []int) {
	return file_path_qos_evm_proto_rawDescGZIP(), []int{5}
}

func (x *EVMBlockNumberResponse) GetHttpStatusCode() int32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *EVMBlockNumberResponse) GetBlockNumberResponse() string {
	if x != nil {
		return x.BlockNumberResponse
	}
	return ""
}

func (x *EVMBlockNumberResponse) GetResponseValidationError() EVMResponseValidationError {
	if x != nil && x.ResponseValidationError != nil {
		return *x.ResponseValidationError
	}
	return EVMResponseValidationError_EVM_RESPONSE_VALIDATION_ERROR_UNSPECIFIED
}

// EVMArchivalResponse stores the response to an `eth_getBlockByNumber` request
// https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber
type EVMArchivalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP status code received from the endpoint
	HttpStatusCode int32 `protobuf:"varint,1,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
	// Whether the response is from a valid archival node
	ValidArchivalNodeResponse bool `protobuf:"varint,2,opt,name=valid_archival_node_response,json=validArchivalNodeResponse,proto3" json:"valid_archival_node_response,omitempty"`
	// Why the response failed QoS validation
	// If not set, the response is considered valid
	ResponseValidationError *EVMResponseValidationError `protobuf:"varint,3,opt,name=response_validation_error,json=responseValidationError,proto3,enum=path.qos.EVMResponseValidationError,oneof" json:"response_validation_error,omitempty"`
}

func (x *EVMArchivalResponse) Reset() {
	*x = EVMArchivalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_path_qos_evm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMArchivalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMArchivalResponse) ProtoMessage() {}

func (x *EVMArchivalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_path_qos_evm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMArchivalResponse.ProtoReflect.Descriptor instead.
func (*EVMArchivalResponse) Descriptor() ([]byte, []int) {
	return file_path_qos_evm_proto_rawDescGZIP(), []int{6}
}

func (x *EVMArchivalResponse) GetHttpStatusCode() int32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *EVMArchivalResponse) GetValidArchivalNodeResponse() bool {
	if x != nil {
		return x.ValidArchivalNodeResponse
	}
	return false
}

func (x *EVMArchivalResponse) GetResponseValidationError() EVMResponseValidationError {
	if x != nil && x.ResponseValidationError != nil {
		return *x.ResponseValidationError
	}
	return EVMResponseValidationError_EVM_RESPONSE_VALIDATION_ERROR_UNSPECIFIED
}

// EVMUnrecognizedResponse handles requests with methods ignored by state update and endpoint validation
// Example: As of PR #72, `eth_call` requests are not used for endpoint validation
type EVMUnrecognizedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP status code received from the endpoint
	HttpStatusCode int32 `protobuf:"varint,1,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
	// The JSON-RPC response received
	JsonrpcResponse *JsonRpcResponse `protobuf:"bytes,2,opt,name=jsonrpc_response,json=jsonrpcResponse,proto3" json:"jsonrpc_response,omitempty"`
	// Why the response failed QoS validation
	// If not set, the response is considered valid
	ResponseValidationError *EVMResponseValidationError `protobuf:"varint,3,opt,name=response_validation_error,json=responseValidationError,proto3,enum=path.qos.EVMResponseValidationError,oneof" json:"response_validation_error,omitempty"`
}

func (x *EVMUnrecognizedResponse) Reset() {
	*x = EVMUnrecognizedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_path_qos_evm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMUnrecognizedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMUnrecognizedResponse) ProtoMessage() {}

func (x *EVMUnrecognizedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_path_qos_evm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMUnrecognizedResponse.ProtoReflect.Descriptor instead.
func (*EVMUnrecognizedResponse) Descriptor() ([]byte, []int) {
	return file_path_qos_evm_proto_rawDescGZIP(), []int{7}
}

func (x *EVMUnrecognizedResponse) GetHttpStatusCode() int32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *EVMUnrecognizedResponse) GetJsonrpcResponse() *JsonRpcResponse {
	if x != nil {
		return x.JsonrpcResponse
	}
	return nil
}

func (x *EVMUnrecognizedResponse) GetResponseValidationError() EVMResponseValidationError {
	if x != nil && x.ResponseValidationError != nil {
		return *x.ResponseValidationError
	}
	return EVMResponseValidationError_EVM_RESPONSE_VALIDATION_ERROR_UNSPECIFIED
}

// EVMEmptyResponse represents an endpoint's empty response, which triggers
// automatic endpoint disqualification by EVM QoS processors.
type EVMEmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP status code represents the status code sent to the client when the chosen endpoint returns an empty response.
	HttpStatusCode int32 `protobuf:"varint,1,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
	// Always set to EMPTY for empty responses
	ResponseValidationError EVMResponseValidationError `protobuf:"varint,2,opt,name=response_validation_error,json=responseValidationError,proto3,enum=path.qos.EVMResponseValidationError" json:"response_validation_error,omitempty"`
}

func (x *EVMEmptyResponse) Reset() {
	*x = EVMEmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_path_qos_evm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMEmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMEmptyResponse) ProtoMessage() {}

func (x *EVMEmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_path_qos_evm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMEmptyResponse.ProtoReflect.Descriptor instead.
func (*EVMEmptyResponse) Descriptor() ([]byte, []int) {
	return file_path_qos_evm_proto_rawDescGZIP(), []int{8}
}

func (x *EVMEmptyResponse) GetHttpStatusCode() int32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *EVMEmptyResponse) GetResponseValidationError() EVMResponseValidationError {
	if x != nil {
		return x.ResponseValidationError
	}
	return EVMResponseValidationError_EVM_RESPONSE_VALIDATION_ERROR_UNSPECIFIED
}

// EVMNoResponse represents a situation where no responses were reported to QoS by the protocol.
// This is due to protocol failures, e.g. if the selected endpoint was maxed out.
type EVMNoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP status code to return, typically 503 Service Unavailable
	HttpStatusCode int32 `protobuf:"varint,1,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
	// Always set to NO_RESPONSE for this scenario
	ResponseValidationError EVMResponseValidationError `protobuf:"varint,2,opt,name=response_validation_error,json=responseValidationError,proto3,enum=path.qos.EVMResponseValidationError" json:"response_validation_error,omitempty"`
}

func (x *EVMNoResponse) Reset() {
	*x = EVMNoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_path_qos_evm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMNoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMNoResponse) ProtoMessage() {}

func (x *EVMNoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_path_qos_evm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMNoResponse.ProtoReflect.Descriptor instead.
func (*EVMNoResponse) Descriptor() ([]byte, []int) {
	return file_path_qos_evm_proto_rawDescGZIP(), []int{9}
}

func (x *EVMNoResponse) GetHttpStatusCode() int32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *EVMNoResponse) GetResponseValidationError() EVMResponseValidationError {
	if x != nil {
		return x.ResponseValidationError
	}
	return EVMResponseValidationError_EVM_RESPONSE_VALIDATION_ERROR_UNSPECIFIED
}

var File_path_qos_evm_proto protoreflect.FileDescriptor

var file_path_qos_evm_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x65, 0x76, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73, 0x1a, 0x16,
	0x70, 0x61, 0x74, 0x68, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x03, 0x0a, 0x16, 0x45, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x1a, 0x65, 0x76,
	0x6d, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x45, 0x56, 0x4d, 0x48, 0x54, 0x54,
	0x50, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x16, 0x65, 0x76, 0x6d, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x65, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x72, 0x0a, 0x20, 0x65, 0x76,
	0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x6d, 0x61, 0x72, 0x73,
	0x68, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e,
	0x45, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73,
	0x68, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52,
	0x1d, 0x65, 0x76, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x6d, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x41,
	0x0a, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71,
	0x6f, 0x73, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x55, 0x0a, 0x15, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x45, 0x56, 0x4d, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x16, 0x45, 0x56, 0x4d, 0x48, 0x54,
	0x54, 0x50, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x74, 0x74,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73,
	0x2e, 0x45, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x1d, 0x45, 0x56, 0x4d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x45, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0xa2, 0x04, 0x0a, 0x16, 0x45, 0x56, 0x4d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x4a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x74,
	0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x45, 0x56, 0x4d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x74,
	0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x45, 0x56, 0x4d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x45, 0x56, 0x4d, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x10, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x15, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x45, 0x56, 0x4d, 0x55,
	0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x45,
	0x56, 0x4d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x0b, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73,
	0x2e, 0x45, 0x56, 0x4d, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x6e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x02, 0x0a, 0x12, 0x45, 0x56, 0x4d, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73,
	0x2e, 0x45, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x1b, 0x8a, 0xb5, 0x18,
	0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x97, 0x02, 0x0a, 0x16, 0x45, 0x56, 0x4d, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01,
	0x0a, 0x19, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x45, 0x56, 0x4d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x19, 0x8a, 0xb5, 0x18, 0x15, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x74, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa1,
	0x02, 0x0a, 0x13, 0x45, 0x56, 0x4d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3f, 0x0a, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73,
	0x2e, 0x45, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x19, 0x8a, 0xb5, 0x18,
	0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xaa, 0x02, 0x0a, 0x17, 0x45, 0x56, 0x4d, 0x55, 0x6e, 0x72, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x6a, 0x73, 0x6f, 0x6e,
	0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x6a,
	0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x45, 0x56,
	0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x19, 0x8a, 0xb5, 0x18, 0x15, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xb9, 0x01, 0x0a, 0x10, 0x45, 0x56, 0x4d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x7b,
	0x0a, 0x19, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x45, 0x56, 0x4d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x19, 0x8a, 0xb5, 0x18, 0x15, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb6, 0x01, 0x0a, 0x0d,
	0x45, 0x56, 0x4d, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x7b, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x74,
	0x68, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x45, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x42, 0x19, 0x8a, 0xb5, 0x18, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x20, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x17, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x2a, 0xc1, 0x01, 0x0a, 0x19, 0x45, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x56, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x37, 0x0a, 0x33, 0x45, 0x56, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x3d, 0x0a, 0x39, 0x45, 0x56, 0x4d,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x2a, 0xd0, 0x01, 0x0a, 0x1a, 0x45, 0x56, 0x4d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x56, 0x4d, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x56, 0x4d, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x01, 0x12,
	0x2b, 0x0a, 0x27, 0x45, 0x56, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29,
	0x45, 0x56, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x03, 0x42, 0x30, 0x5a, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x77,
	0x69, 0x74, 0x68, 0x67, 0x72, 0x6f, 0x76, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_path_qos_evm_proto_rawDescOnce sync.Once
	file_path_qos_evm_proto_rawDescData = file_path_qos_evm_proto_rawDesc
)

func file_path_qos_evm_proto_rawDescGZIP() []byte {
	file_path_qos_evm_proto_rawDescOnce.Do(func() {
		file_path_qos_evm_proto_rawDescData = protoimpl.X.CompressGZIP(file_path_qos_evm_proto_rawDescData)
	})
	return file_path_qos_evm_proto_rawDescData
}

var file_path_qos_evm_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_path_qos_evm_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_path_qos_evm_proto_goTypes = []any{
	(EVMRequestValidationError)(0),        // 0: path.qos.EVMRequestValidationError
	(EVMResponseValidationError)(0),       // 1: path.qos.EVMResponseValidationError
	(*EVMRequestObservations)(nil),        // 2: path.qos.EVMRequestObservations
	(*EVMHTTPBodyReadFailure)(nil),        // 3: path.qos.EVMHTTPBodyReadFailure
	(*EVMRequestUnmarshalingFailure)(nil), // 4: path.qos.EVMRequestUnmarshalingFailure
	(*EVMEndpointObservation)(nil),        // 5: path.qos.EVMEndpointObservation
	(*EVMChainIDResponse)(nil),            // 6: path.qos.EVMChainIDResponse
	(*EVMBlockNumberResponse)(nil),        // 7: path.qos.EVMBlockNumberResponse
	(*EVMArchivalResponse)(nil),           // 8: path.qos.EVMArchivalResponse
	(*EVMUnrecognizedResponse)(nil),       // 9: path.qos.EVMUnrecognizedResponse
	(*EVMEmptyResponse)(nil),              // 10: path.qos.EVMEmptyResponse
	(*EVMNoResponse)(nil),                 // 11: path.qos.EVMNoResponse
	(*JsonRpcRequest)(nil),                // 12: path.qos.JsonRpcRequest
	(*JsonRpcResponse)(nil),               // 13: path.qos.JsonRpcResponse
}
var file_path_qos_evm_proto_depIdxs = []int32{
	3,  // 0: path.qos.EVMRequestObservations.evm_http_body_read_failure:type_name -> path.qos.EVMHTTPBodyReadFailure
	4,  // 1: path.qos.EVMRequestObservations.evm_request_unmarshaling_failure:type_name -> path.qos.EVMRequestUnmarshalingFailure
	12, // 2: path.qos.EVMRequestObservations.jsonrpc_request:type_name -> path.qos.JsonRpcRequest
	5,  // 3: path.qos.EVMRequestObservations.endpoint_observations:type_name -> path.qos.EVMEndpointObservation
	0,  // 4: path.qos.EVMHTTPBodyReadFailure.validation_error:type_name -> path.qos.EVMRequestValidationError
	0,  // 5: path.qos.EVMRequestUnmarshalingFailure.validation_error:type_name -> path.qos.EVMRequestValidationError
	6,  // 6: path.qos.EVMEndpointObservation.chain_id_response:type_name -> path.qos.EVMChainIDResponse
	7,  // 7: path.qos.EVMEndpointObservation.block_number_response:type_name -> path.qos.EVMBlockNumberResponse
	8,  // 8: path.qos.EVMEndpointObservation.archival_response:type_name -> path.qos.EVMArchivalResponse
	9,  // 9: path.qos.EVMEndpointObservation.unrecognized_response:type_name -> path.qos.EVMUnrecognizedResponse
	10, // 10: path.qos.EVMEndpointObservation.empty_response:type_name -> path.qos.EVMEmptyResponse
	11, // 11: path.qos.EVMEndpointObservation.no_response:type_name -> path.qos.EVMNoResponse
	1,  // 12: path.qos.EVMChainIDResponse.response_validation_error:type_name -> path.qos.EVMResponseValidationError
	1,  // 13: path.qos.EVMBlockNumberResponse.response_validation_error:type_name -> path.qos.EVMResponseValidationError
	1,  // 14: path.qos.EVMArchivalResponse.response_validation_error:type_name -> path.qos.EVMResponseValidationError
	13, // 15: path.qos.EVMUnrecognizedResponse.jsonrpc_response:type_name -> path.qos.JsonRpcResponse
	1,  // 16: path.qos.EVMUnrecognizedResponse.response_validation_error:type_name -> path.qos.EVMResponseValidationError
	1,  // 17: path.qos.EVMEmptyResponse.response_validation_error:type_name -> path.qos.EVMResponseValidationError
	1,  // 18: path.qos.EVMNoResponse.response_validation_error:type_name -> path.qos.EVMResponseValidationError
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_path_qos_evm_proto_init() }
func file_path_qos_evm_proto_init() {
	if File_path_qos_evm_proto != nil {
		return
	}
	file_path_qos_jsonrpc_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_path_qos_evm_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EVMRequestObservations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_path_qos_evm_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EVMHTTPBodyReadFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_path_qos_evm_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*EVMRequestUnmarshalingFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_path_qos_evm_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*EVMEndpointObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_path_qos_evm_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*EVMChainIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_path_qos_evm_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*EVMBlockNumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_path_qos_evm_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*EVMArchivalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_path_qos_evm_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*EVMUnrecognizedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_path_qos_evm_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*EVMEmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_path_qos_evm_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*EVMNoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_path_qos_evm_proto_msgTypes[0].OneofWrappers = []any{
		(*EVMRequestObservations_EvmHttpBodyReadFailure)(nil),
		(*EVMRequestObservations_EvmRequestUnmarshalingFailure)(nil),
	}
	file_path_qos_evm_proto_msgTypes[1].OneofWrappers = []any{}
	file_path_qos_evm_proto_msgTypes[2].OneofWrappers = []any{}
	file_path_qos_evm_proto_msgTypes[3].OneofWrappers = []any{
		(*EVMEndpointObservation_ChainIdResponse)(nil),
		(*EVMEndpointObservation_BlockNumberResponse)(nil),
		(*EVMEndpointObservation_ArchivalResponse)(nil),
		(*EVMEndpointObservation_UnrecognizedResponse)(nil),
		(*EVMEndpointObservation_EmptyResponse)(nil),
		(*EVMEndpointObservation_NoResponse)(nil),
	}
	file_path_qos_evm_proto_msgTypes[4].OneofWrappers = []any{}
	file_path_qos_evm_proto_msgTypes[5].OneofWrappers = []any{}
	file_path_qos_evm_proto_msgTypes[6].OneofWrappers = []any{}
	file_path_qos_evm_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_path_qos_evm_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_path_qos_evm_proto_goTypes,
		DependencyIndexes: file_path_qos_evm_proto_depIdxs,
		EnumInfos:         file_path_qos_evm_proto_enumTypes,
		MessageInfos:      file_path_qos_evm_proto_msgTypes,
	}.Build()
	File_path_qos_evm_proto = out.File
	file_path_qos_evm_proto_rawDesc = nil
	file_path_qos_evm_proto_goTypes = nil
	file_path_qos_evm_proto_depIdxs = nil
}

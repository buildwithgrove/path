// Package portaldb provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package portaldb

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplications request
	DeleteApplications(ctx context.Context, params *DeleteApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplications request
	GetApplications(ctx context.Context, params *GetApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApplicationsWithBody request with any body
	PatchApplicationsWithBody(ctx context.Context, params *PatchApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApplications(ctx context.Context, params *PatchApplicationsParams, body PatchApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApplicationsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchApplicationsParams, body PatchApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchApplicationsParams, body PatchApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApplicationsWithBody request with any body
	PostApplicationsWithBody(ctx context.Context, params *PostApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApplications(ctx context.Context, params *PostApplicationsParams, body PostApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApplicationsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostApplicationsParams, body PostApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostApplicationsParams, body PostApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGateways request
	DeleteGateways(ctx context.Context, params *DeleteGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGateways request
	GetGateways(ctx context.Context, params *GetGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchGatewaysWithBody request with any body
	PatchGatewaysWithBody(ctx context.Context, params *PatchGatewaysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchGateways(ctx context.Context, params *PatchGatewaysParams, body PatchGatewaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchGatewaysWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchGatewaysParams, body PatchGatewaysApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchGatewaysWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchGatewaysParams, body PatchGatewaysApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaysWithBody request with any body
	PostGatewaysWithBody(ctx context.Context, params *PostGatewaysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGateways(ctx context.Context, params *PostGatewaysParams, body PostGatewaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaysWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostGatewaysParams, body PostGatewaysApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaysWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostGatewaysParams, body PostGatewaysApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNetworks request
	DeleteNetworks(ctx context.Context, params *DeleteNetworksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNetworks request
	GetNetworks(ctx context.Context, params *GetNetworksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchNetworksWithBody request with any body
	PatchNetworksWithBody(ctx context.Context, params *PatchNetworksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchNetworks(ctx context.Context, params *PatchNetworksParams, body PatchNetworksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchNetworksWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchNetworksParams, body PatchNetworksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchNetworksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchNetworksParams, body PatchNetworksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNetworksWithBody request with any body
	PostNetworksWithBody(ctx context.Context, params *PostNetworksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNetworks(ctx context.Context, params *PostNetworksParams, body PostNetworksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNetworksWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostNetworksParams, body PostNetworksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNetworksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostNetworksParams, body PostNetworksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizations request
	DeleteOrganizations(ctx context.Context, params *DeleteOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizations request
	GetOrganizations(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrganizationsWithBody request with any body
	PatchOrganizationsWithBody(ctx context.Context, params *PatchOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrganizations(ctx context.Context, params *PatchOrganizationsParams, body PatchOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrganizationsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchOrganizationsParams, body PatchOrganizationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrganizationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchOrganizationsParams, body PatchOrganizationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsWithBody request with any body
	PostOrganizationsWithBody(ctx context.Context, params *PostOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizations(ctx context.Context, params *PostOrganizationsParams, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostOrganizationsParams, body PostOrganizationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostOrganizationsParams, body PostOrganizationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePortalAccounts request
	DeletePortalAccounts(ctx context.Context, params *DeletePortalAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPortalAccounts request
	GetPortalAccounts(ctx context.Context, params *GetPortalAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPortalAccountsWithBody request with any body
	PatchPortalAccountsWithBody(ctx context.Context, params *PatchPortalAccountsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPortalAccounts(ctx context.Context, params *PatchPortalAccountsParams, body PatchPortalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPortalAccountsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchPortalAccountsParams, body PatchPortalAccountsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPortalAccountsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchPortalAccountsParams, body PatchPortalAccountsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPortalAccountsWithBody request with any body
	PostPortalAccountsWithBody(ctx context.Context, params *PostPortalAccountsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPortalAccounts(ctx context.Context, params *PostPortalAccountsParams, body PostPortalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPortalAccountsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostPortalAccountsParams, body PostPortalAccountsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPortalAccountsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostPortalAccountsParams, body PostPortalAccountsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePortalApplications request
	DeletePortalApplications(ctx context.Context, params *DeletePortalApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPortalApplications request
	GetPortalApplications(ctx context.Context, params *GetPortalApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPortalApplicationsWithBody request with any body
	PatchPortalApplicationsWithBody(ctx context.Context, params *PatchPortalApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPortalApplications(ctx context.Context, params *PatchPortalApplicationsParams, body PatchPortalApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPortalApplicationsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchPortalApplicationsParams, body PatchPortalApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPortalApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchPortalApplicationsParams, body PatchPortalApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPortalApplicationsWithBody request with any body
	PostPortalApplicationsWithBody(ctx context.Context, params *PostPortalApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPortalApplications(ctx context.Context, params *PostPortalApplicationsParams, body PostPortalApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPortalApplicationsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostPortalApplicationsParams, body PostPortalApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPortalApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostPortalApplicationsParams, body PostPortalApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePortalPlans request
	DeletePortalPlans(ctx context.Context, params *DeletePortalPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPortalPlans request
	GetPortalPlans(ctx context.Context, params *GetPortalPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPortalPlansWithBody request with any body
	PatchPortalPlansWithBody(ctx context.Context, params *PatchPortalPlansParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPortalPlans(ctx context.Context, params *PatchPortalPlansParams, body PatchPortalPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPortalPlansWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchPortalPlansParams, body PatchPortalPlansApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPortalPlansWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchPortalPlansParams, body PatchPortalPlansApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPortalPlansWithBody request with any body
	PostPortalPlansWithBody(ctx context.Context, params *PostPortalPlansParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPortalPlans(ctx context.Context, params *PostPortalPlansParams, body PostPortalPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPortalPlansWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostPortalPlansParams, body PostPortalPlansApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPortalPlansWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostPortalPlansParams, body PostPortalPlansApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRpcCreatePortalApplication request
	GetRpcCreatePortalApplication(ctx context.Context, params *GetRpcCreatePortalApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRpcCreatePortalApplicationWithBody request with any body
	PostRpcCreatePortalApplicationWithBody(ctx context.Context, params *PostRpcCreatePortalApplicationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcCreatePortalApplication(ctx context.Context, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcCreatePortalApplicationWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcCreatePortalApplicationWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRpcMe request
	GetRpcMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRpcMeWithBody request with any body
	PostRpcMeWithBody(ctx context.Context, params *PostRpcMeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcMe(ctx context.Context, params *PostRpcMeParams, body PostRpcMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcMeWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcMeParams, body PostRpcMeApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcMeWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcMeParams, body PostRpcMeApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceEndpoints request
	DeleteServiceEndpoints(ctx context.Context, params *DeleteServiceEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceEndpoints request
	GetServiceEndpoints(ctx context.Context, params *GetServiceEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceEndpointsWithBody request with any body
	PatchServiceEndpointsWithBody(ctx context.Context, params *PatchServiceEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceEndpoints(ctx context.Context, params *PatchServiceEndpointsParams, body PatchServiceEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceEndpointsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchServiceEndpointsParams, body PatchServiceEndpointsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceEndpointsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchServiceEndpointsParams, body PatchServiceEndpointsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceEndpointsWithBody request with any body
	PostServiceEndpointsWithBody(ctx context.Context, params *PostServiceEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceEndpoints(ctx context.Context, params *PostServiceEndpointsParams, body PostServiceEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceEndpointsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostServiceEndpointsParams, body PostServiceEndpointsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceEndpointsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostServiceEndpointsParams, body PostServiceEndpointsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceFallbacks request
	DeleteServiceFallbacks(ctx context.Context, params *DeleteServiceFallbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceFallbacks request
	GetServiceFallbacks(ctx context.Context, params *GetServiceFallbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceFallbacksWithBody request with any body
	PatchServiceFallbacksWithBody(ctx context.Context, params *PatchServiceFallbacksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceFallbacks(ctx context.Context, params *PatchServiceFallbacksParams, body PatchServiceFallbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceFallbacksWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchServiceFallbacksParams, body PatchServiceFallbacksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceFallbacksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchServiceFallbacksParams, body PatchServiceFallbacksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceFallbacksWithBody request with any body
	PostServiceFallbacksWithBody(ctx context.Context, params *PostServiceFallbacksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceFallbacks(ctx context.Context, params *PostServiceFallbacksParams, body PostServiceFallbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceFallbacksWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostServiceFallbacksParams, body PostServiceFallbacksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceFallbacksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostServiceFallbacksParams, body PostServiceFallbacksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServices request
	DeleteServices(ctx context.Context, params *DeleteServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServices request
	GetServices(ctx context.Context, params *GetServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServicesWithBody request with any body
	PatchServicesWithBody(ctx context.Context, params *PatchServicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServices(ctx context.Context, params *PatchServicesParams, body PatchServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServicesWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchServicesParams, body PatchServicesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServicesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchServicesParams, body PatchServicesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServicesWithBody request with any body
	PostServicesWithBody(ctx context.Context, params *PostServicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServices(ctx context.Context, params *PostServicesParams, body PostServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServicesWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostServicesParams, body PostServicesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServicesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostServicesParams, body PostServicesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplications(ctx context.Context, params *DeleteApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplications(ctx context.Context, params *GetApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApplicationsWithBody(ctx context.Context, params *PatchApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApplicationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApplications(ctx context.Context, params *PatchApplicationsParams, body PatchApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApplicationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApplicationsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchApplicationsParams, body PatchApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApplicationsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchApplicationsParams, body PatchApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApplicationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicationsWithBody(ctx context.Context, params *PostApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplications(ctx context.Context, params *PostApplicationsParams, body PostApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicationsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostApplicationsParams, body PostApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostApplicationsParams, body PostApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGateways(ctx context.Context, params *DeleteGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGateways(ctx context.Context, params *GetGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchGatewaysWithBody(ctx context.Context, params *PatchGatewaysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchGatewaysRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchGateways(ctx context.Context, params *PatchGatewaysParams, body PatchGatewaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchGatewaysRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchGatewaysWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchGatewaysParams, body PatchGatewaysApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchGatewaysRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchGatewaysWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchGatewaysParams, body PatchGatewaysApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchGatewaysRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaysWithBody(ctx context.Context, params *PostGatewaysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaysRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGateways(ctx context.Context, params *PostGatewaysParams, body PostGatewaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaysRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaysWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostGatewaysParams, body PostGatewaysApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaysRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaysWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostGatewaysParams, body PostGatewaysApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaysRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNetworks(ctx context.Context, params *DeleteNetworksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNetworksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNetworks(ctx context.Context, params *GetNetworksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNetworksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchNetworksWithBody(ctx context.Context, params *PatchNetworksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchNetworksRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchNetworks(ctx context.Context, params *PatchNetworksParams, body PatchNetworksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchNetworksRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchNetworksWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchNetworksParams, body PatchNetworksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchNetworksRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchNetworksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchNetworksParams, body PatchNetworksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchNetworksRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNetworksWithBody(ctx context.Context, params *PostNetworksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNetworksRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNetworks(ctx context.Context, params *PostNetworksParams, body PostNetworksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNetworksRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNetworksWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostNetworksParams, body PostNetworksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNetworksRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNetworksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostNetworksParams, body PostNetworksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNetworksRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizations(ctx context.Context, params *DeleteOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizations(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrganizationsWithBody(ctx context.Context, params *PatchOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrganizationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrganizations(ctx context.Context, params *PatchOrganizationsParams, body PatchOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrganizationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrganizationsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchOrganizationsParams, body PatchOrganizationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrganizationsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrganizationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchOrganizationsParams, body PatchOrganizationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrganizationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsWithBody(ctx context.Context, params *PostOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizations(ctx context.Context, params *PostOrganizationsParams, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostOrganizationsParams, body PostOrganizationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostOrganizationsParams, body PostOrganizationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePortalAccounts(ctx context.Context, params *DeletePortalAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePortalAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPortalAccounts(ctx context.Context, params *GetPortalAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPortalAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPortalAccountsWithBody(ctx context.Context, params *PatchPortalAccountsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPortalAccountsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPortalAccounts(ctx context.Context, params *PatchPortalAccountsParams, body PatchPortalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPortalAccountsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPortalAccountsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchPortalAccountsParams, body PatchPortalAccountsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPortalAccountsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPortalAccountsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchPortalAccountsParams, body PatchPortalAccountsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPortalAccountsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPortalAccountsWithBody(ctx context.Context, params *PostPortalAccountsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPortalAccountsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPortalAccounts(ctx context.Context, params *PostPortalAccountsParams, body PostPortalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPortalAccountsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPortalAccountsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostPortalAccountsParams, body PostPortalAccountsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPortalAccountsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPortalAccountsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostPortalAccountsParams, body PostPortalAccountsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPortalAccountsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePortalApplications(ctx context.Context, params *DeletePortalApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePortalApplicationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPortalApplications(ctx context.Context, params *GetPortalApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPortalApplicationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPortalApplicationsWithBody(ctx context.Context, params *PatchPortalApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPortalApplicationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPortalApplications(ctx context.Context, params *PatchPortalApplicationsParams, body PatchPortalApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPortalApplicationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPortalApplicationsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchPortalApplicationsParams, body PatchPortalApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPortalApplicationsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPortalApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchPortalApplicationsParams, body PatchPortalApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPortalApplicationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPortalApplicationsWithBody(ctx context.Context, params *PostPortalApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPortalApplicationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPortalApplications(ctx context.Context, params *PostPortalApplicationsParams, body PostPortalApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPortalApplicationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPortalApplicationsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostPortalApplicationsParams, body PostPortalApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPortalApplicationsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPortalApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostPortalApplicationsParams, body PostPortalApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPortalApplicationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePortalPlans(ctx context.Context, params *DeletePortalPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePortalPlansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPortalPlans(ctx context.Context, params *GetPortalPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPortalPlansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPortalPlansWithBody(ctx context.Context, params *PatchPortalPlansParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPortalPlansRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPortalPlans(ctx context.Context, params *PatchPortalPlansParams, body PatchPortalPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPortalPlansRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPortalPlansWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchPortalPlansParams, body PatchPortalPlansApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPortalPlansRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPortalPlansWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchPortalPlansParams, body PatchPortalPlansApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPortalPlansRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPortalPlansWithBody(ctx context.Context, params *PostPortalPlansParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPortalPlansRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPortalPlans(ctx context.Context, params *PostPortalPlansParams, body PostPortalPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPortalPlansRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPortalPlansWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostPortalPlansParams, body PostPortalPlansApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPortalPlansRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPortalPlansWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostPortalPlansParams, body PostPortalPlansApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPortalPlansRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRpcCreatePortalApplication(ctx context.Context, params *GetRpcCreatePortalApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRpcCreatePortalApplicationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcCreatePortalApplicationWithBody(ctx context.Context, params *PostRpcCreatePortalApplicationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcCreatePortalApplicationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcCreatePortalApplication(ctx context.Context, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcCreatePortalApplicationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcCreatePortalApplicationWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcCreatePortalApplicationRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcCreatePortalApplicationWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcCreatePortalApplicationRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRpcMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRpcMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcMeWithBody(ctx context.Context, params *PostRpcMeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcMeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcMe(ctx context.Context, params *PostRpcMeParams, body PostRpcMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcMeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcMeWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcMeParams, body PostRpcMeApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcMeRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcMeWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcMeParams, body PostRpcMeApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcMeRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceEndpoints(ctx context.Context, params *DeleteServiceEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceEndpointsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceEndpoints(ctx context.Context, params *GetServiceEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceEndpointsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceEndpointsWithBody(ctx context.Context, params *PatchServiceEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceEndpointsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceEndpoints(ctx context.Context, params *PatchServiceEndpointsParams, body PatchServiceEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceEndpointsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceEndpointsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchServiceEndpointsParams, body PatchServiceEndpointsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceEndpointsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceEndpointsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchServiceEndpointsParams, body PatchServiceEndpointsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceEndpointsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceEndpointsWithBody(ctx context.Context, params *PostServiceEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceEndpointsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceEndpoints(ctx context.Context, params *PostServiceEndpointsParams, body PostServiceEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceEndpointsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceEndpointsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostServiceEndpointsParams, body PostServiceEndpointsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceEndpointsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceEndpointsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostServiceEndpointsParams, body PostServiceEndpointsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceEndpointsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceFallbacks(ctx context.Context, params *DeleteServiceFallbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceFallbacksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceFallbacks(ctx context.Context, params *GetServiceFallbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceFallbacksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceFallbacksWithBody(ctx context.Context, params *PatchServiceFallbacksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceFallbacksRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceFallbacks(ctx context.Context, params *PatchServiceFallbacksParams, body PatchServiceFallbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceFallbacksRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceFallbacksWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchServiceFallbacksParams, body PatchServiceFallbacksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceFallbacksRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceFallbacksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchServiceFallbacksParams, body PatchServiceFallbacksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceFallbacksRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceFallbacksWithBody(ctx context.Context, params *PostServiceFallbacksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceFallbacksRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceFallbacks(ctx context.Context, params *PostServiceFallbacksParams, body PostServiceFallbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceFallbacksRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceFallbacksWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostServiceFallbacksParams, body PostServiceFallbacksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceFallbacksRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceFallbacksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostServiceFallbacksParams, body PostServiceFallbacksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceFallbacksRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServices(ctx context.Context, params *DeleteServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServices(ctx context.Context, params *GetServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServicesWithBody(ctx context.Context, params *PatchServicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServicesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServices(ctx context.Context, params *PatchServicesParams, body PatchServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServicesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServicesWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchServicesParams, body PatchServicesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServicesRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServicesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchServicesParams, body PatchServicesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServicesRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServicesWithBody(ctx context.Context, params *PostServicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServicesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServices(ctx context.Context, params *PostServicesParams, body PostServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServicesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServicesWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostServicesParams, body PostServicesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServicesRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServicesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostServicesParams, body PostServicesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServicesRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApplicationsRequest generates requests for DeleteApplications
func NewDeleteApplicationsRequest(server string, params *DeleteApplicationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApplicationAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application_address", runtime.ParamLocationQuery, *params.ApplicationAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GatewayAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateway_address", runtime.ParamLocationQuery, *params.GatewayAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_id", runtime.ParamLocationQuery, *params.ServiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StakeAmount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stake_amount", runtime.ParamLocationQuery, *params.StakeAmount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StakeDenom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stake_denom", runtime.ParamLocationQuery, *params.StakeDenom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplicationPrivateKeyHex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application_private_key_hex", runtime.ParamLocationQuery, *params.ApplicationPrivateKeyHex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NetworkId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network_id", runtime.ParamLocationQuery, *params.NetworkId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetApplicationsRequest generates requests for GetApplications
func NewGetApplicationsRequest(server string, params *GetApplicationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApplicationAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application_address", runtime.ParamLocationQuery, *params.ApplicationAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GatewayAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateway_address", runtime.ParamLocationQuery, *params.GatewayAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_id", runtime.ParamLocationQuery, *params.ServiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StakeAmount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stake_amount", runtime.ParamLocationQuery, *params.StakeAmount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StakeDenom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stake_denom", runtime.ParamLocationQuery, *params.StakeDenom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplicationPrivateKeyHex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application_private_key_hex", runtime.ParamLocationQuery, *params.ApplicationPrivateKeyHex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NetworkId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network_id", runtime.ParamLocationQuery, *params.NetworkId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchApplicationsRequest calls the generic PatchApplications builder with application/json body
func NewPatchApplicationsRequest(server string, params *PatchApplicationsParams, body PatchApplicationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApplicationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchApplicationsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchApplications builder with application/vnd.pgrst.object+json body
func NewPatchApplicationsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchApplicationsParams, body PatchApplicationsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApplicationsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchApplicationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchApplications builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchApplicationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchApplicationsParams, body PatchApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApplicationsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchApplicationsRequestWithBody generates requests for PatchApplications with any type of body
func NewPatchApplicationsRequestWithBody(server string, params *PatchApplicationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApplicationAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application_address", runtime.ParamLocationQuery, *params.ApplicationAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GatewayAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateway_address", runtime.ParamLocationQuery, *params.GatewayAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_id", runtime.ParamLocationQuery, *params.ServiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StakeAmount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stake_amount", runtime.ParamLocationQuery, *params.StakeAmount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StakeDenom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stake_denom", runtime.ParamLocationQuery, *params.StakeDenom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplicationPrivateKeyHex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application_private_key_hex", runtime.ParamLocationQuery, *params.ApplicationPrivateKeyHex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NetworkId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network_id", runtime.ParamLocationQuery, *params.NetworkId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostApplicationsRequest calls the generic PostApplications builder with application/json body
func NewPostApplicationsRequest(server string, params *PostApplicationsParams, body PostApplicationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApplicationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApplicationsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostApplications builder with application/vnd.pgrst.object+json body
func NewPostApplicationsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostApplicationsParams, body PostApplicationsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApplicationsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostApplicationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostApplications builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostApplicationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostApplicationsParams, body PostApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApplicationsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostApplicationsRequestWithBody generates requests for PostApplications with any type of body
func NewPostApplicationsRequestWithBody(server string, params *PostApplicationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteGatewaysRequest generates requests for DeleteGateways
func NewDeleteGatewaysRequest(server string, params *DeleteGatewaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GatewayAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateway_address", runtime.ParamLocationQuery, *params.GatewayAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StakeAmount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stake_amount", runtime.ParamLocationQuery, *params.StakeAmount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StakeDenom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stake_denom", runtime.ParamLocationQuery, *params.StakeDenom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NetworkId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network_id", runtime.ParamLocationQuery, *params.NetworkId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GatewayPrivateKeyHex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateway_private_key_hex", runtime.ParamLocationQuery, *params.GatewayPrivateKeyHex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetGatewaysRequest generates requests for GetGateways
func NewGetGatewaysRequest(server string, params *GetGatewaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GatewayAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateway_address", runtime.ParamLocationQuery, *params.GatewayAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StakeAmount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stake_amount", runtime.ParamLocationQuery, *params.StakeAmount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StakeDenom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stake_denom", runtime.ParamLocationQuery, *params.StakeDenom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NetworkId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network_id", runtime.ParamLocationQuery, *params.NetworkId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GatewayPrivateKeyHex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateway_private_key_hex", runtime.ParamLocationQuery, *params.GatewayPrivateKeyHex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchGatewaysRequest calls the generic PatchGateways builder with application/json body
func NewPatchGatewaysRequest(server string, params *PatchGatewaysParams, body PatchGatewaysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchGatewaysRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchGatewaysRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchGateways builder with application/vnd.pgrst.object+json body
func NewPatchGatewaysRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchGatewaysParams, body PatchGatewaysApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchGatewaysRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchGatewaysRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchGateways builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchGatewaysRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchGatewaysParams, body PatchGatewaysApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchGatewaysRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchGatewaysRequestWithBody generates requests for PatchGateways with any type of body
func NewPatchGatewaysRequestWithBody(server string, params *PatchGatewaysParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GatewayAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateway_address", runtime.ParamLocationQuery, *params.GatewayAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StakeAmount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stake_amount", runtime.ParamLocationQuery, *params.StakeAmount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StakeDenom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stake_denom", runtime.ParamLocationQuery, *params.StakeDenom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NetworkId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network_id", runtime.ParamLocationQuery, *params.NetworkId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GatewayPrivateKeyHex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateway_private_key_hex", runtime.ParamLocationQuery, *params.GatewayPrivateKeyHex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostGatewaysRequest calls the generic PostGateways builder with application/json body
func NewPostGatewaysRequest(server string, params *PostGatewaysParams, body PostGatewaysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaysRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostGatewaysRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostGateways builder with application/vnd.pgrst.object+json body
func NewPostGatewaysRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostGatewaysParams, body PostGatewaysApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaysRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostGatewaysRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostGateways builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostGatewaysRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostGatewaysParams, body PostGatewaysApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaysRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostGatewaysRequestWithBody generates requests for PostGateways with any type of body
func NewPostGatewaysRequestWithBody(server string, params *PostGatewaysParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteNetworksRequest generates requests for DeleteNetworks
func NewDeleteNetworksRequest(server string, params *DeleteNetworksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NetworkId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network_id", runtime.ParamLocationQuery, *params.NetworkId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetNetworksRequest generates requests for GetNetworks
func NewGetNetworksRequest(server string, params *GetNetworksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NetworkId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network_id", runtime.ParamLocationQuery, *params.NetworkId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchNetworksRequest calls the generic PatchNetworks builder with application/json body
func NewPatchNetworksRequest(server string, params *PatchNetworksParams, body PatchNetworksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchNetworksRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchNetworksRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchNetworks builder with application/vnd.pgrst.object+json body
func NewPatchNetworksRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchNetworksParams, body PatchNetworksApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchNetworksRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchNetworksRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchNetworks builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchNetworksRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchNetworksParams, body PatchNetworksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchNetworksRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchNetworksRequestWithBody generates requests for PatchNetworks with any type of body
func NewPatchNetworksRequestWithBody(server string, params *PatchNetworksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NetworkId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network_id", runtime.ParamLocationQuery, *params.NetworkId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostNetworksRequest calls the generic PostNetworks builder with application/json body
func NewPostNetworksRequest(server string, params *PostNetworksParams, body PostNetworksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNetworksRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostNetworksRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostNetworks builder with application/vnd.pgrst.object+json body
func NewPostNetworksRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostNetworksParams, body PostNetworksApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNetworksRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostNetworksRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostNetworks builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostNetworksRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostNetworksParams, body PostNetworksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNetworksRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostNetworksRequestWithBody generates requests for PostNetworks with any type of body
func NewPostNetworksRequestWithBody(server string, params *PostNetworksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteOrganizationsRequest generates requests for DeleteOrganizations
func NewDeleteOrganizationsRequest(server string, params *DeleteOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_id", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_name", runtime.ParamLocationQuery, *params.OrganizationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at", runtime.ParamLocationQuery, *params.DeletedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetOrganizationsRequest generates requests for GetOrganizations
func NewGetOrganizationsRequest(server string, params *GetOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_id", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_name", runtime.ParamLocationQuery, *params.OrganizationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at", runtime.ParamLocationQuery, *params.DeletedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchOrganizationsRequest calls the generic PatchOrganizations builder with application/json body
func NewPatchOrganizationsRequest(server string, params *PatchOrganizationsParams, body PatchOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrganizationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchOrganizationsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchOrganizations builder with application/vnd.pgrst.object+json body
func NewPatchOrganizationsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchOrganizationsParams, body PatchOrganizationsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrganizationsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchOrganizationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchOrganizations builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchOrganizationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchOrganizationsParams, body PatchOrganizationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrganizationsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchOrganizationsRequestWithBody generates requests for PatchOrganizations with any type of body
func NewPatchOrganizationsRequestWithBody(server string, params *PatchOrganizationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_id", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_name", runtime.ParamLocationQuery, *params.OrganizationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at", runtime.ParamLocationQuery, *params.DeletedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostOrganizationsRequest calls the generic PostOrganizations builder with application/json body
func NewPostOrganizationsRequest(server string, params *PostOrganizationsParams, body PostOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostOrganizationsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostOrganizations builder with application/vnd.pgrst.object+json body
func NewPostOrganizationsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostOrganizationsParams, body PostOrganizationsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostOrganizationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostOrganizations builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostOrganizationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostOrganizationsParams, body PostOrganizationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostOrganizationsRequestWithBody generates requests for PostOrganizations with any type of body
func NewPostOrganizationsRequestWithBody(server string, params *PostOrganizationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeletePortalAccountsRequest generates requests for DeletePortalAccounts
func NewDeletePortalAccountsRequest(server string, params *DeletePortalAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portal_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PortalAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_id", runtime.ParamLocationQuery, *params.PortalAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_id", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalPlanType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_plan_type", runtime.ParamLocationQuery, *params.PortalPlanType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_account_name", runtime.ParamLocationQuery, *params.UserAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InternalAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internal_account_name", runtime.ParamLocationQuery, *params.InternalAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalAccountUserLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_user_limit", runtime.ParamLocationQuery, *params.PortalAccountUserLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalAccountUserLimitInterval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_user_limit_interval", runtime.ParamLocationQuery, *params.PortalAccountUserLimitInterval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalAccountUserLimitRps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_user_limit_rps", runtime.ParamLocationQuery, *params.PortalAccountUserLimitRps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billing_type", runtime.ParamLocationQuery, *params.BillingType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StripeSubscriptionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stripe_subscription_id", runtime.ParamLocationQuery, *params.StripeSubscriptionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GcpAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gcp_account_id", runtime.ParamLocationQuery, *params.GcpAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GcpEntitlementId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gcp_entitlement_id", runtime.ParamLocationQuery, *params.GcpEntitlementId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at", runtime.ParamLocationQuery, *params.DeletedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetPortalAccountsRequest generates requests for GetPortalAccounts
func NewGetPortalAccountsRequest(server string, params *GetPortalAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portal_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PortalAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_id", runtime.ParamLocationQuery, *params.PortalAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_id", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalPlanType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_plan_type", runtime.ParamLocationQuery, *params.PortalPlanType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_account_name", runtime.ParamLocationQuery, *params.UserAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InternalAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internal_account_name", runtime.ParamLocationQuery, *params.InternalAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalAccountUserLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_user_limit", runtime.ParamLocationQuery, *params.PortalAccountUserLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalAccountUserLimitInterval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_user_limit_interval", runtime.ParamLocationQuery, *params.PortalAccountUserLimitInterval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalAccountUserLimitRps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_user_limit_rps", runtime.ParamLocationQuery, *params.PortalAccountUserLimitRps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billing_type", runtime.ParamLocationQuery, *params.BillingType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StripeSubscriptionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stripe_subscription_id", runtime.ParamLocationQuery, *params.StripeSubscriptionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GcpAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gcp_account_id", runtime.ParamLocationQuery, *params.GcpAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GcpEntitlementId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gcp_entitlement_id", runtime.ParamLocationQuery, *params.GcpEntitlementId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at", runtime.ParamLocationQuery, *params.DeletedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchPortalAccountsRequest calls the generic PatchPortalAccounts builder with application/json body
func NewPatchPortalAccountsRequest(server string, params *PatchPortalAccountsParams, body PatchPortalAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPortalAccountsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchPortalAccountsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchPortalAccounts builder with application/vnd.pgrst.object+json body
func NewPatchPortalAccountsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchPortalAccountsParams, body PatchPortalAccountsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPortalAccountsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchPortalAccountsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchPortalAccounts builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchPortalAccountsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchPortalAccountsParams, body PatchPortalAccountsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPortalAccountsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchPortalAccountsRequestWithBody generates requests for PatchPortalAccounts with any type of body
func NewPatchPortalAccountsRequestWithBody(server string, params *PatchPortalAccountsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portal_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PortalAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_id", runtime.ParamLocationQuery, *params.PortalAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_id", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalPlanType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_plan_type", runtime.ParamLocationQuery, *params.PortalPlanType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_account_name", runtime.ParamLocationQuery, *params.UserAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InternalAccountName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internal_account_name", runtime.ParamLocationQuery, *params.InternalAccountName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalAccountUserLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_user_limit", runtime.ParamLocationQuery, *params.PortalAccountUserLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalAccountUserLimitInterval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_user_limit_interval", runtime.ParamLocationQuery, *params.PortalAccountUserLimitInterval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalAccountUserLimitRps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_user_limit_rps", runtime.ParamLocationQuery, *params.PortalAccountUserLimitRps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billing_type", runtime.ParamLocationQuery, *params.BillingType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StripeSubscriptionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stripe_subscription_id", runtime.ParamLocationQuery, *params.StripeSubscriptionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GcpAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gcp_account_id", runtime.ParamLocationQuery, *params.GcpAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GcpEntitlementId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gcp_entitlement_id", runtime.ParamLocationQuery, *params.GcpEntitlementId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at", runtime.ParamLocationQuery, *params.DeletedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostPortalAccountsRequest calls the generic PostPortalAccounts builder with application/json body
func NewPostPortalAccountsRequest(server string, params *PostPortalAccountsParams, body PostPortalAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPortalAccountsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostPortalAccountsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostPortalAccounts builder with application/vnd.pgrst.object+json body
func NewPostPortalAccountsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostPortalAccountsParams, body PostPortalAccountsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPortalAccountsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostPortalAccountsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostPortalAccounts builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostPortalAccountsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostPortalAccountsParams, body PostPortalAccountsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPortalAccountsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostPortalAccountsRequestWithBody generates requests for PostPortalAccounts with any type of body
func NewPostPortalAccountsRequestWithBody(server string, params *PostPortalAccountsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portal_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeletePortalApplicationsRequest generates requests for DeletePortalApplications
func NewDeletePortalApplicationsRequest(server string, params *DeletePortalApplicationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portal_applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PortalApplicationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_id", runtime.ParamLocationQuery, *params.PortalApplicationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_id", runtime.ParamLocationQuery, *params.PortalAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_name", runtime.ParamLocationQuery, *params.PortalApplicationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Emoji != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emoji", runtime.ParamLocationQuery, *params.Emoji); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationUserLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_user_limit", runtime.ParamLocationQuery, *params.PortalApplicationUserLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationUserLimitInterval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_user_limit_interval", runtime.ParamLocationQuery, *params.PortalApplicationUserLimitInterval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationUserLimitRps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_user_limit_rps", runtime.ParamLocationQuery, *params.PortalApplicationUserLimitRps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationDescription != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_description", runtime.ParamLocationQuery, *params.PortalApplicationDescription); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FavoriteServiceIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "favorite_service_ids", runtime.ParamLocationQuery, *params.FavoriteServiceIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SecretKeyHash != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret_key_hash", runtime.ParamLocationQuery, *params.SecretKeyHash); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SecretKeyRequired != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret_key_required", runtime.ParamLocationQuery, *params.SecretKeyRequired); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at", runtime.ParamLocationQuery, *params.DeletedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetPortalApplicationsRequest generates requests for GetPortalApplications
func NewGetPortalApplicationsRequest(server string, params *GetPortalApplicationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portal_applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PortalApplicationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_id", runtime.ParamLocationQuery, *params.PortalApplicationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_id", runtime.ParamLocationQuery, *params.PortalAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_name", runtime.ParamLocationQuery, *params.PortalApplicationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Emoji != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emoji", runtime.ParamLocationQuery, *params.Emoji); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationUserLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_user_limit", runtime.ParamLocationQuery, *params.PortalApplicationUserLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationUserLimitInterval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_user_limit_interval", runtime.ParamLocationQuery, *params.PortalApplicationUserLimitInterval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationUserLimitRps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_user_limit_rps", runtime.ParamLocationQuery, *params.PortalApplicationUserLimitRps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationDescription != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_description", runtime.ParamLocationQuery, *params.PortalApplicationDescription); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FavoriteServiceIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "favorite_service_ids", runtime.ParamLocationQuery, *params.FavoriteServiceIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SecretKeyHash != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret_key_hash", runtime.ParamLocationQuery, *params.SecretKeyHash); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SecretKeyRequired != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret_key_required", runtime.ParamLocationQuery, *params.SecretKeyRequired); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at", runtime.ParamLocationQuery, *params.DeletedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchPortalApplicationsRequest calls the generic PatchPortalApplications builder with application/json body
func NewPatchPortalApplicationsRequest(server string, params *PatchPortalApplicationsParams, body PatchPortalApplicationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPortalApplicationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchPortalApplicationsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchPortalApplications builder with application/vnd.pgrst.object+json body
func NewPatchPortalApplicationsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchPortalApplicationsParams, body PatchPortalApplicationsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPortalApplicationsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchPortalApplicationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchPortalApplications builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchPortalApplicationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchPortalApplicationsParams, body PatchPortalApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPortalApplicationsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchPortalApplicationsRequestWithBody generates requests for PatchPortalApplications with any type of body
func NewPatchPortalApplicationsRequestWithBody(server string, params *PatchPortalApplicationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portal_applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PortalApplicationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_id", runtime.ParamLocationQuery, *params.PortalApplicationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_account_id", runtime.ParamLocationQuery, *params.PortalAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_name", runtime.ParamLocationQuery, *params.PortalApplicationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Emoji != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emoji", runtime.ParamLocationQuery, *params.Emoji); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationUserLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_user_limit", runtime.ParamLocationQuery, *params.PortalApplicationUserLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationUserLimitInterval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_user_limit_interval", runtime.ParamLocationQuery, *params.PortalApplicationUserLimitInterval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationUserLimitRps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_user_limit_rps", runtime.ParamLocationQuery, *params.PortalApplicationUserLimitRps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalApplicationDescription != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_application_description", runtime.ParamLocationQuery, *params.PortalApplicationDescription); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FavoriteServiceIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "favorite_service_ids", runtime.ParamLocationQuery, *params.FavoriteServiceIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SecretKeyHash != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret_key_hash", runtime.ParamLocationQuery, *params.SecretKeyHash); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SecretKeyRequired != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret_key_required", runtime.ParamLocationQuery, *params.SecretKeyRequired); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at", runtime.ParamLocationQuery, *params.DeletedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostPortalApplicationsRequest calls the generic PostPortalApplications builder with application/json body
func NewPostPortalApplicationsRequest(server string, params *PostPortalApplicationsParams, body PostPortalApplicationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPortalApplicationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostPortalApplicationsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostPortalApplications builder with application/vnd.pgrst.object+json body
func NewPostPortalApplicationsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostPortalApplicationsParams, body PostPortalApplicationsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPortalApplicationsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostPortalApplicationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostPortalApplications builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostPortalApplicationsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostPortalApplicationsParams, body PostPortalApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPortalApplicationsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostPortalApplicationsRequestWithBody generates requests for PostPortalApplications with any type of body
func NewPostPortalApplicationsRequestWithBody(server string, params *PostPortalApplicationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portal_applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeletePortalPlansRequest generates requests for DeletePortalPlans
func NewDeletePortalPlansRequest(server string, params *DeletePortalPlansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portal_plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PortalPlanType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_plan_type", runtime.ParamLocationQuery, *params.PortalPlanType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalPlanTypeDescription != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_plan_type_description", runtime.ParamLocationQuery, *params.PortalPlanTypeDescription); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlanUsageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan_usage_limit", runtime.ParamLocationQuery, *params.PlanUsageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlanUsageLimitInterval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan_usage_limit_interval", runtime.ParamLocationQuery, *params.PlanUsageLimitInterval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlanRateLimitRps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan_rate_limit_rps", runtime.ParamLocationQuery, *params.PlanRateLimitRps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlanApplicationLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan_application_limit", runtime.ParamLocationQuery, *params.PlanApplicationLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetPortalPlansRequest generates requests for GetPortalPlans
func NewGetPortalPlansRequest(server string, params *GetPortalPlansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portal_plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PortalPlanType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_plan_type", runtime.ParamLocationQuery, *params.PortalPlanType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalPlanTypeDescription != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_plan_type_description", runtime.ParamLocationQuery, *params.PortalPlanTypeDescription); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlanUsageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan_usage_limit", runtime.ParamLocationQuery, *params.PlanUsageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlanUsageLimitInterval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan_usage_limit_interval", runtime.ParamLocationQuery, *params.PlanUsageLimitInterval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlanRateLimitRps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan_rate_limit_rps", runtime.ParamLocationQuery, *params.PlanRateLimitRps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlanApplicationLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan_application_limit", runtime.ParamLocationQuery, *params.PlanApplicationLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchPortalPlansRequest calls the generic PatchPortalPlans builder with application/json body
func NewPatchPortalPlansRequest(server string, params *PatchPortalPlansParams, body PatchPortalPlansJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPortalPlansRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchPortalPlansRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchPortalPlans builder with application/vnd.pgrst.object+json body
func NewPatchPortalPlansRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchPortalPlansParams, body PatchPortalPlansApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPortalPlansRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchPortalPlansRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchPortalPlans builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchPortalPlansRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchPortalPlansParams, body PatchPortalPlansApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPortalPlansRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchPortalPlansRequestWithBody generates requests for PatchPortalPlans with any type of body
func NewPatchPortalPlansRequestWithBody(server string, params *PatchPortalPlansParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portal_plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PortalPlanType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_plan_type", runtime.ParamLocationQuery, *params.PortalPlanType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortalPlanTypeDescription != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portal_plan_type_description", runtime.ParamLocationQuery, *params.PortalPlanTypeDescription); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlanUsageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan_usage_limit", runtime.ParamLocationQuery, *params.PlanUsageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlanUsageLimitInterval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan_usage_limit_interval", runtime.ParamLocationQuery, *params.PlanUsageLimitInterval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlanRateLimitRps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan_rate_limit_rps", runtime.ParamLocationQuery, *params.PlanRateLimitRps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlanApplicationLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan_application_limit", runtime.ParamLocationQuery, *params.PlanApplicationLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostPortalPlansRequest calls the generic PostPortalPlans builder with application/json body
func NewPostPortalPlansRequest(server string, params *PostPortalPlansParams, body PostPortalPlansJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPortalPlansRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostPortalPlansRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostPortalPlans builder with application/vnd.pgrst.object+json body
func NewPostPortalPlansRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostPortalPlansParams, body PostPortalPlansApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPortalPlansRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostPortalPlansRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostPortalPlans builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostPortalPlansRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostPortalPlansParams, body PostPortalPlansApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPortalPlansRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostPortalPlansRequestWithBody generates requests for PostPortalPlans with any type of body
func NewPostPortalPlansRequestWithBody(server string, params *PostPortalPlansParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portal_plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetRpcCreatePortalApplicationRequest generates requests for GetRpcCreatePortalApplication
func NewGetRpcCreatePortalApplicationRequest(server string, params *GetRpcCreatePortalApplicationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/create_portal_application")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p_portal_account_id", runtime.ParamLocationQuery, params.PPortalAccountId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p_portal_user_id", runtime.ParamLocationQuery, params.PPortalUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PPortalApplicationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p_portal_application_name", runtime.ParamLocationQuery, *params.PPortalApplicationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PEmoji != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p_emoji", runtime.ParamLocationQuery, *params.PEmoji); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PPortalApplicationUserLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p_portal_application_user_limit", runtime.ParamLocationQuery, *params.PPortalApplicationUserLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PPortalApplicationUserLimitInterval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p_portal_application_user_limit_interval", runtime.ParamLocationQuery, *params.PPortalApplicationUserLimitInterval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PPortalApplicationUserLimitRps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p_portal_application_user_limit_rps", runtime.ParamLocationQuery, *params.PPortalApplicationUserLimitRps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PPortalApplicationDescription != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p_portal_application_description", runtime.ParamLocationQuery, *params.PPortalApplicationDescription); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PFavoriteServiceIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p_favorite_service_ids", runtime.ParamLocationQuery, *params.PFavoriteServiceIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PSecretKeyRequired != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p_secret_key_required", runtime.ParamLocationQuery, *params.PSecretKeyRequired); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRpcCreatePortalApplicationRequest calls the generic PostRpcCreatePortalApplication builder with application/json body
func NewPostRpcCreatePortalApplicationRequest(server string, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcCreatePortalApplicationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRpcCreatePortalApplicationRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostRpcCreatePortalApplication builder with application/vnd.pgrst.object+json body
func NewPostRpcCreatePortalApplicationRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcCreatePortalApplicationRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostRpcCreatePortalApplicationRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostRpcCreatePortalApplication builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostRpcCreatePortalApplicationRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcCreatePortalApplicationRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostRpcCreatePortalApplicationRequestWithBody generates requests for PostRpcCreatePortalApplication with any type of body
func NewPostRpcCreatePortalApplicationRequestWithBody(server string, params *PostRpcCreatePortalApplicationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/create_portal_application")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetRpcMeRequest generates requests for GetRpcMe
func NewGetRpcMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRpcMeRequest calls the generic PostRpcMe builder with application/json body
func NewPostRpcMeRequest(server string, params *PostRpcMeParams, body PostRpcMeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcMeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRpcMeRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostRpcMe builder with application/vnd.pgrst.object+json body
func NewPostRpcMeRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostRpcMeParams, body PostRpcMeApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcMeRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostRpcMeRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostRpcMe builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostRpcMeRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostRpcMeParams, body PostRpcMeApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcMeRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostRpcMeRequestWithBody generates requests for PostRpcMe with any type of body
func NewPostRpcMeRequestWithBody(server string, params *PostRpcMeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteServiceEndpointsRequest generates requests for DeleteServiceEndpoints
func NewDeleteServiceEndpointsRequest(server string, params *DeleteServiceEndpointsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EndpointId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint_id", runtime.ParamLocationQuery, *params.EndpointId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_id", runtime.ParamLocationQuery, *params.ServiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndpointType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint_type", runtime.ParamLocationQuery, *params.EndpointType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetServiceEndpointsRequest generates requests for GetServiceEndpoints
func NewGetServiceEndpointsRequest(server string, params *GetServiceEndpointsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EndpointId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint_id", runtime.ParamLocationQuery, *params.EndpointId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_id", runtime.ParamLocationQuery, *params.ServiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndpointType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint_type", runtime.ParamLocationQuery, *params.EndpointType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchServiceEndpointsRequest calls the generic PatchServiceEndpoints builder with application/json body
func NewPatchServiceEndpointsRequest(server string, params *PatchServiceEndpointsParams, body PatchServiceEndpointsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceEndpointsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchServiceEndpointsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchServiceEndpoints builder with application/vnd.pgrst.object+json body
func NewPatchServiceEndpointsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchServiceEndpointsParams, body PatchServiceEndpointsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceEndpointsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchServiceEndpointsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchServiceEndpoints builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchServiceEndpointsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchServiceEndpointsParams, body PatchServiceEndpointsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceEndpointsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchServiceEndpointsRequestWithBody generates requests for PatchServiceEndpoints with any type of body
func NewPatchServiceEndpointsRequestWithBody(server string, params *PatchServiceEndpointsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EndpointId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint_id", runtime.ParamLocationQuery, *params.EndpointId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_id", runtime.ParamLocationQuery, *params.ServiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndpointType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint_type", runtime.ParamLocationQuery, *params.EndpointType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostServiceEndpointsRequest calls the generic PostServiceEndpoints builder with application/json body
func NewPostServiceEndpointsRequest(server string, params *PostServiceEndpointsParams, body PostServiceEndpointsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceEndpointsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostServiceEndpointsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostServiceEndpoints builder with application/vnd.pgrst.object+json body
func NewPostServiceEndpointsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostServiceEndpointsParams, body PostServiceEndpointsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceEndpointsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostServiceEndpointsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostServiceEndpoints builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostServiceEndpointsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostServiceEndpointsParams, body PostServiceEndpointsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceEndpointsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostServiceEndpointsRequestWithBody generates requests for PostServiceEndpoints with any type of body
func NewPostServiceEndpointsRequestWithBody(server string, params *PostServiceEndpointsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteServiceFallbacksRequest generates requests for DeleteServiceFallbacks
func NewDeleteServiceFallbacksRequest(server string, params *DeleteServiceFallbacksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_fallbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceFallbackId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_fallback_id", runtime.ParamLocationQuery, *params.ServiceFallbackId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_id", runtime.ParamLocationQuery, *params.ServiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FallbackUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fallback_url", runtime.ParamLocationQuery, *params.FallbackUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetServiceFallbacksRequest generates requests for GetServiceFallbacks
func NewGetServiceFallbacksRequest(server string, params *GetServiceFallbacksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_fallbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceFallbackId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_fallback_id", runtime.ParamLocationQuery, *params.ServiceFallbackId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_id", runtime.ParamLocationQuery, *params.ServiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FallbackUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fallback_url", runtime.ParamLocationQuery, *params.FallbackUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchServiceFallbacksRequest calls the generic PatchServiceFallbacks builder with application/json body
func NewPatchServiceFallbacksRequest(server string, params *PatchServiceFallbacksParams, body PatchServiceFallbacksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceFallbacksRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchServiceFallbacksRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchServiceFallbacks builder with application/vnd.pgrst.object+json body
func NewPatchServiceFallbacksRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchServiceFallbacksParams, body PatchServiceFallbacksApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceFallbacksRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchServiceFallbacksRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchServiceFallbacks builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchServiceFallbacksRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchServiceFallbacksParams, body PatchServiceFallbacksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceFallbacksRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchServiceFallbacksRequestWithBody generates requests for PatchServiceFallbacks with any type of body
func NewPatchServiceFallbacksRequestWithBody(server string, params *PatchServiceFallbacksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_fallbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceFallbackId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_fallback_id", runtime.ParamLocationQuery, *params.ServiceFallbackId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_id", runtime.ParamLocationQuery, *params.ServiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FallbackUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fallback_url", runtime.ParamLocationQuery, *params.FallbackUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostServiceFallbacksRequest calls the generic PostServiceFallbacks builder with application/json body
func NewPostServiceFallbacksRequest(server string, params *PostServiceFallbacksParams, body PostServiceFallbacksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceFallbacksRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostServiceFallbacksRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostServiceFallbacks builder with application/vnd.pgrst.object+json body
func NewPostServiceFallbacksRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostServiceFallbacksParams, body PostServiceFallbacksApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceFallbacksRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostServiceFallbacksRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostServiceFallbacks builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostServiceFallbacksRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostServiceFallbacksParams, body PostServiceFallbacksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceFallbacksRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostServiceFallbacksRequestWithBody generates requests for PostServiceFallbacks with any type of body
func NewPostServiceFallbacksRequestWithBody(server string, params *PostServiceFallbacksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_fallbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteServicesRequest generates requests for DeleteServices
func NewDeleteServicesRequest(server string, params *DeleteServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_id", runtime.ParamLocationQuery, *params.ServiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_name", runtime.ParamLocationQuery, *params.ServiceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComputeUnitsPerRelay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "compute_units_per_relay", runtime.ParamLocationQuery, *params.ComputeUnitsPerRelay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceDomains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_domains", runtime.ParamLocationQuery, *params.ServiceDomains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceOwnerAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_owner_address", runtime.ParamLocationQuery, *params.ServiceOwnerAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NetworkId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network_id", runtime.ParamLocationQuery, *params.NetworkId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Beta != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComingSoon != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coming_soon", runtime.ParamLocationQuery, *params.ComingSoon); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityFallbackEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quality_fallback_enabled", runtime.ParamLocationQuery, *params.QualityFallbackEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HardFallbackEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hard_fallback_enabled", runtime.ParamLocationQuery, *params.HardFallbackEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SvgIcon != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "svg_icon", runtime.ParamLocationQuery, *params.SvgIcon); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at", runtime.ParamLocationQuery, *params.DeletedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetServicesRequest generates requests for GetServices
func NewGetServicesRequest(server string, params *GetServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_id", runtime.ParamLocationQuery, *params.ServiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_name", runtime.ParamLocationQuery, *params.ServiceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComputeUnitsPerRelay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "compute_units_per_relay", runtime.ParamLocationQuery, *params.ComputeUnitsPerRelay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceDomains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_domains", runtime.ParamLocationQuery, *params.ServiceDomains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceOwnerAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_owner_address", runtime.ParamLocationQuery, *params.ServiceOwnerAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NetworkId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network_id", runtime.ParamLocationQuery, *params.NetworkId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Beta != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComingSoon != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coming_soon", runtime.ParamLocationQuery, *params.ComingSoon); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityFallbackEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quality_fallback_enabled", runtime.ParamLocationQuery, *params.QualityFallbackEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HardFallbackEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hard_fallback_enabled", runtime.ParamLocationQuery, *params.HardFallbackEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SvgIcon != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "svg_icon", runtime.ParamLocationQuery, *params.SvgIcon); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at", runtime.ParamLocationQuery, *params.DeletedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchServicesRequest calls the generic PatchServices builder with application/json body
func NewPatchServicesRequest(server string, params *PatchServicesParams, body PatchServicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServicesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchServicesRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchServices builder with application/vnd.pgrst.object+json body
func NewPatchServicesRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchServicesParams, body PatchServicesApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServicesRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchServicesRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchServices builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchServicesRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchServicesParams, body PatchServicesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServicesRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchServicesRequestWithBody generates requests for PatchServices with any type of body
func NewPatchServicesRequestWithBody(server string, params *PatchServicesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_id", runtime.ParamLocationQuery, *params.ServiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_name", runtime.ParamLocationQuery, *params.ServiceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComputeUnitsPerRelay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "compute_units_per_relay", runtime.ParamLocationQuery, *params.ComputeUnitsPerRelay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceDomains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_domains", runtime.ParamLocationQuery, *params.ServiceDomains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceOwnerAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_owner_address", runtime.ParamLocationQuery, *params.ServiceOwnerAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NetworkId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network_id", runtime.ParamLocationQuery, *params.NetworkId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Beta != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComingSoon != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coming_soon", runtime.ParamLocationQuery, *params.ComingSoon); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityFallbackEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quality_fallback_enabled", runtime.ParamLocationQuery, *params.QualityFallbackEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HardFallbackEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hard_fallback_enabled", runtime.ParamLocationQuery, *params.HardFallbackEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SvgIcon != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "svg_icon", runtime.ParamLocationQuery, *params.SvgIcon); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at", runtime.ParamLocationQuery, *params.DeletedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at", runtime.ParamLocationQuery, *params.UpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostServicesRequest calls the generic PostServices builder with application/json body
func NewPostServicesRequest(server string, params *PostServicesParams, body PostServicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServicesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostServicesRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostServices builder with application/vnd.pgrst.object+json body
func NewPostServicesRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostServicesParams, body PostServicesApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServicesRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostServicesRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostServices builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostServicesRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostServicesParams, body PostServicesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServicesRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostServicesRequestWithBody generates requests for PostServices with any type of body
func NewPostServicesRequestWithBody(server string, params *PostServicesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWithResponse request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// DeleteApplicationsWithResponse request
	DeleteApplicationsWithResponse(ctx context.Context, params *DeleteApplicationsParams, reqEditors ...RequestEditorFn) (*DeleteApplicationsResponse, error)

	// GetApplicationsWithResponse request
	GetApplicationsWithResponse(ctx context.Context, params *GetApplicationsParams, reqEditors ...RequestEditorFn) (*GetApplicationsResponse, error)

	// PatchApplicationsWithBodyWithResponse request with any body
	PatchApplicationsWithBodyWithResponse(ctx context.Context, params *PatchApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApplicationsResponse, error)

	PatchApplicationsWithResponse(ctx context.Context, params *PatchApplicationsParams, body PatchApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApplicationsResponse, error)

	PatchApplicationsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchApplicationsParams, body PatchApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApplicationsResponse, error)

	PatchApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchApplicationsParams, body PatchApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchApplicationsResponse, error)

	// PostApplicationsWithBodyWithResponse request with any body
	PostApplicationsWithBodyWithResponse(ctx context.Context, params *PostApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationsResponse, error)

	PostApplicationsWithResponse(ctx context.Context, params *PostApplicationsParams, body PostApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsResponse, error)

	PostApplicationsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostApplicationsParams, body PostApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsResponse, error)

	PostApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostApplicationsParams, body PostApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsResponse, error)

	// DeleteGatewaysWithResponse request
	DeleteGatewaysWithResponse(ctx context.Context, params *DeleteGatewaysParams, reqEditors ...RequestEditorFn) (*DeleteGatewaysResponse, error)

	// GetGatewaysWithResponse request
	GetGatewaysWithResponse(ctx context.Context, params *GetGatewaysParams, reqEditors ...RequestEditorFn) (*GetGatewaysResponse, error)

	// PatchGatewaysWithBodyWithResponse request with any body
	PatchGatewaysWithBodyWithResponse(ctx context.Context, params *PatchGatewaysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchGatewaysResponse, error)

	PatchGatewaysWithResponse(ctx context.Context, params *PatchGatewaysParams, body PatchGatewaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchGatewaysResponse, error)

	PatchGatewaysWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchGatewaysParams, body PatchGatewaysApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchGatewaysResponse, error)

	PatchGatewaysWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchGatewaysParams, body PatchGatewaysApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchGatewaysResponse, error)

	// PostGatewaysWithBodyWithResponse request with any body
	PostGatewaysWithBodyWithResponse(ctx context.Context, params *PostGatewaysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaysResponse, error)

	PostGatewaysWithResponse(ctx context.Context, params *PostGatewaysParams, body PostGatewaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaysResponse, error)

	PostGatewaysWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostGatewaysParams, body PostGatewaysApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaysResponse, error)

	PostGatewaysWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostGatewaysParams, body PostGatewaysApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaysResponse, error)

	// DeleteNetworksWithResponse request
	DeleteNetworksWithResponse(ctx context.Context, params *DeleteNetworksParams, reqEditors ...RequestEditorFn) (*DeleteNetworksResponse, error)

	// GetNetworksWithResponse request
	GetNetworksWithResponse(ctx context.Context, params *GetNetworksParams, reqEditors ...RequestEditorFn) (*GetNetworksResponse, error)

	// PatchNetworksWithBodyWithResponse request with any body
	PatchNetworksWithBodyWithResponse(ctx context.Context, params *PatchNetworksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchNetworksResponse, error)

	PatchNetworksWithResponse(ctx context.Context, params *PatchNetworksParams, body PatchNetworksJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchNetworksResponse, error)

	PatchNetworksWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchNetworksParams, body PatchNetworksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchNetworksResponse, error)

	PatchNetworksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchNetworksParams, body PatchNetworksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchNetworksResponse, error)

	// PostNetworksWithBodyWithResponse request with any body
	PostNetworksWithBodyWithResponse(ctx context.Context, params *PostNetworksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNetworksResponse, error)

	PostNetworksWithResponse(ctx context.Context, params *PostNetworksParams, body PostNetworksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNetworksResponse, error)

	PostNetworksWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostNetworksParams, body PostNetworksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNetworksResponse, error)

	PostNetworksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostNetworksParams, body PostNetworksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostNetworksResponse, error)

	// DeleteOrganizationsWithResponse request
	DeleteOrganizationsWithResponse(ctx context.Context, params *DeleteOrganizationsParams, reqEditors ...RequestEditorFn) (*DeleteOrganizationsResponse, error)

	// GetOrganizationsWithResponse request
	GetOrganizationsWithResponse(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error)

	// PatchOrganizationsWithBodyWithResponse request with any body
	PatchOrganizationsWithBodyWithResponse(ctx context.Context, params *PatchOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrganizationsResponse, error)

	PatchOrganizationsWithResponse(ctx context.Context, params *PatchOrganizationsParams, body PatchOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrganizationsResponse, error)

	PatchOrganizationsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchOrganizationsParams, body PatchOrganizationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrganizationsResponse, error)

	PatchOrganizationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchOrganizationsParams, body PatchOrganizationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchOrganizationsResponse, error)

	// PostOrganizationsWithBodyWithResponse request with any body
	PostOrganizationsWithBodyWithResponse(ctx context.Context, params *PostOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	PostOrganizationsWithResponse(ctx context.Context, params *PostOrganizationsParams, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	PostOrganizationsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostOrganizationsParams, body PostOrganizationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	PostOrganizationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostOrganizationsParams, body PostOrganizationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	// DeletePortalAccountsWithResponse request
	DeletePortalAccountsWithResponse(ctx context.Context, params *DeletePortalAccountsParams, reqEditors ...RequestEditorFn) (*DeletePortalAccountsResponse, error)

	// GetPortalAccountsWithResponse request
	GetPortalAccountsWithResponse(ctx context.Context, params *GetPortalAccountsParams, reqEditors ...RequestEditorFn) (*GetPortalAccountsResponse, error)

	// PatchPortalAccountsWithBodyWithResponse request with any body
	PatchPortalAccountsWithBodyWithResponse(ctx context.Context, params *PatchPortalAccountsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPortalAccountsResponse, error)

	PatchPortalAccountsWithResponse(ctx context.Context, params *PatchPortalAccountsParams, body PatchPortalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalAccountsResponse, error)

	PatchPortalAccountsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchPortalAccountsParams, body PatchPortalAccountsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalAccountsResponse, error)

	PatchPortalAccountsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchPortalAccountsParams, body PatchPortalAccountsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalAccountsResponse, error)

	// PostPortalAccountsWithBodyWithResponse request with any body
	PostPortalAccountsWithBodyWithResponse(ctx context.Context, params *PostPortalAccountsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPortalAccountsResponse, error)

	PostPortalAccountsWithResponse(ctx context.Context, params *PostPortalAccountsParams, body PostPortalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPortalAccountsResponse, error)

	PostPortalAccountsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostPortalAccountsParams, body PostPortalAccountsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPortalAccountsResponse, error)

	PostPortalAccountsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostPortalAccountsParams, body PostPortalAccountsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostPortalAccountsResponse, error)

	// DeletePortalApplicationsWithResponse request
	DeletePortalApplicationsWithResponse(ctx context.Context, params *DeletePortalApplicationsParams, reqEditors ...RequestEditorFn) (*DeletePortalApplicationsResponse, error)

	// GetPortalApplicationsWithResponse request
	GetPortalApplicationsWithResponse(ctx context.Context, params *GetPortalApplicationsParams, reqEditors ...RequestEditorFn) (*GetPortalApplicationsResponse, error)

	// PatchPortalApplicationsWithBodyWithResponse request with any body
	PatchPortalApplicationsWithBodyWithResponse(ctx context.Context, params *PatchPortalApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPortalApplicationsResponse, error)

	PatchPortalApplicationsWithResponse(ctx context.Context, params *PatchPortalApplicationsParams, body PatchPortalApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalApplicationsResponse, error)

	PatchPortalApplicationsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchPortalApplicationsParams, body PatchPortalApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalApplicationsResponse, error)

	PatchPortalApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchPortalApplicationsParams, body PatchPortalApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalApplicationsResponse, error)

	// PostPortalApplicationsWithBodyWithResponse request with any body
	PostPortalApplicationsWithBodyWithResponse(ctx context.Context, params *PostPortalApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPortalApplicationsResponse, error)

	PostPortalApplicationsWithResponse(ctx context.Context, params *PostPortalApplicationsParams, body PostPortalApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPortalApplicationsResponse, error)

	PostPortalApplicationsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostPortalApplicationsParams, body PostPortalApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPortalApplicationsResponse, error)

	PostPortalApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostPortalApplicationsParams, body PostPortalApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostPortalApplicationsResponse, error)

	// DeletePortalPlansWithResponse request
	DeletePortalPlansWithResponse(ctx context.Context, params *DeletePortalPlansParams, reqEditors ...RequestEditorFn) (*DeletePortalPlansResponse, error)

	// GetPortalPlansWithResponse request
	GetPortalPlansWithResponse(ctx context.Context, params *GetPortalPlansParams, reqEditors ...RequestEditorFn) (*GetPortalPlansResponse, error)

	// PatchPortalPlansWithBodyWithResponse request with any body
	PatchPortalPlansWithBodyWithResponse(ctx context.Context, params *PatchPortalPlansParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPortalPlansResponse, error)

	PatchPortalPlansWithResponse(ctx context.Context, params *PatchPortalPlansParams, body PatchPortalPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalPlansResponse, error)

	PatchPortalPlansWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchPortalPlansParams, body PatchPortalPlansApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalPlansResponse, error)

	PatchPortalPlansWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchPortalPlansParams, body PatchPortalPlansApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalPlansResponse, error)

	// PostPortalPlansWithBodyWithResponse request with any body
	PostPortalPlansWithBodyWithResponse(ctx context.Context, params *PostPortalPlansParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPortalPlansResponse, error)

	PostPortalPlansWithResponse(ctx context.Context, params *PostPortalPlansParams, body PostPortalPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPortalPlansResponse, error)

	PostPortalPlansWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostPortalPlansParams, body PostPortalPlansApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPortalPlansResponse, error)

	PostPortalPlansWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostPortalPlansParams, body PostPortalPlansApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostPortalPlansResponse, error)

	// GetRpcCreatePortalApplicationWithResponse request
	GetRpcCreatePortalApplicationWithResponse(ctx context.Context, params *GetRpcCreatePortalApplicationParams, reqEditors ...RequestEditorFn) (*GetRpcCreatePortalApplicationResponse, error)

	// PostRpcCreatePortalApplicationWithBodyWithResponse request with any body
	PostRpcCreatePortalApplicationWithBodyWithResponse(ctx context.Context, params *PostRpcCreatePortalApplicationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcCreatePortalApplicationResponse, error)

	PostRpcCreatePortalApplicationWithResponse(ctx context.Context, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcCreatePortalApplicationResponse, error)

	PostRpcCreatePortalApplicationWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcCreatePortalApplicationResponse, error)

	PostRpcCreatePortalApplicationWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcCreatePortalApplicationResponse, error)

	// GetRpcMeWithResponse request
	GetRpcMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRpcMeResponse, error)

	// PostRpcMeWithBodyWithResponse request with any body
	PostRpcMeWithBodyWithResponse(ctx context.Context, params *PostRpcMeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcMeResponse, error)

	PostRpcMeWithResponse(ctx context.Context, params *PostRpcMeParams, body PostRpcMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcMeResponse, error)

	PostRpcMeWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcMeParams, body PostRpcMeApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcMeResponse, error)

	PostRpcMeWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcMeParams, body PostRpcMeApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcMeResponse, error)

	// DeleteServiceEndpointsWithResponse request
	DeleteServiceEndpointsWithResponse(ctx context.Context, params *DeleteServiceEndpointsParams, reqEditors ...RequestEditorFn) (*DeleteServiceEndpointsResponse, error)

	// GetServiceEndpointsWithResponse request
	GetServiceEndpointsWithResponse(ctx context.Context, params *GetServiceEndpointsParams, reqEditors ...RequestEditorFn) (*GetServiceEndpointsResponse, error)

	// PatchServiceEndpointsWithBodyWithResponse request with any body
	PatchServiceEndpointsWithBodyWithResponse(ctx context.Context, params *PatchServiceEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceEndpointsResponse, error)

	PatchServiceEndpointsWithResponse(ctx context.Context, params *PatchServiceEndpointsParams, body PatchServiceEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceEndpointsResponse, error)

	PatchServiceEndpointsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchServiceEndpointsParams, body PatchServiceEndpointsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceEndpointsResponse, error)

	PatchServiceEndpointsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchServiceEndpointsParams, body PatchServiceEndpointsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceEndpointsResponse, error)

	// PostServiceEndpointsWithBodyWithResponse request with any body
	PostServiceEndpointsWithBodyWithResponse(ctx context.Context, params *PostServiceEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceEndpointsResponse, error)

	PostServiceEndpointsWithResponse(ctx context.Context, params *PostServiceEndpointsParams, body PostServiceEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceEndpointsResponse, error)

	PostServiceEndpointsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostServiceEndpointsParams, body PostServiceEndpointsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceEndpointsResponse, error)

	PostServiceEndpointsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostServiceEndpointsParams, body PostServiceEndpointsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostServiceEndpointsResponse, error)

	// DeleteServiceFallbacksWithResponse request
	DeleteServiceFallbacksWithResponse(ctx context.Context, params *DeleteServiceFallbacksParams, reqEditors ...RequestEditorFn) (*DeleteServiceFallbacksResponse, error)

	// GetServiceFallbacksWithResponse request
	GetServiceFallbacksWithResponse(ctx context.Context, params *GetServiceFallbacksParams, reqEditors ...RequestEditorFn) (*GetServiceFallbacksResponse, error)

	// PatchServiceFallbacksWithBodyWithResponse request with any body
	PatchServiceFallbacksWithBodyWithResponse(ctx context.Context, params *PatchServiceFallbacksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceFallbacksResponse, error)

	PatchServiceFallbacksWithResponse(ctx context.Context, params *PatchServiceFallbacksParams, body PatchServiceFallbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceFallbacksResponse, error)

	PatchServiceFallbacksWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchServiceFallbacksParams, body PatchServiceFallbacksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceFallbacksResponse, error)

	PatchServiceFallbacksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchServiceFallbacksParams, body PatchServiceFallbacksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceFallbacksResponse, error)

	// PostServiceFallbacksWithBodyWithResponse request with any body
	PostServiceFallbacksWithBodyWithResponse(ctx context.Context, params *PostServiceFallbacksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceFallbacksResponse, error)

	PostServiceFallbacksWithResponse(ctx context.Context, params *PostServiceFallbacksParams, body PostServiceFallbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceFallbacksResponse, error)

	PostServiceFallbacksWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostServiceFallbacksParams, body PostServiceFallbacksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceFallbacksResponse, error)

	PostServiceFallbacksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostServiceFallbacksParams, body PostServiceFallbacksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostServiceFallbacksResponse, error)

	// DeleteServicesWithResponse request
	DeleteServicesWithResponse(ctx context.Context, params *DeleteServicesParams, reqEditors ...RequestEditorFn) (*DeleteServicesResponse, error)

	// GetServicesWithResponse request
	GetServicesWithResponse(ctx context.Context, params *GetServicesParams, reqEditors ...RequestEditorFn) (*GetServicesResponse, error)

	// PatchServicesWithBodyWithResponse request with any body
	PatchServicesWithBodyWithResponse(ctx context.Context, params *PatchServicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServicesResponse, error)

	PatchServicesWithResponse(ctx context.Context, params *PatchServicesParams, body PatchServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServicesResponse, error)

	PatchServicesWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchServicesParams, body PatchServicesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServicesResponse, error)

	PatchServicesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchServicesParams, body PatchServicesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchServicesResponse, error)

	// PostServicesWithBodyWithResponse request with any body
	PostServicesWithBodyWithResponse(ctx context.Context, params *PostServicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServicesResponse, error)

	PostServicesWithResponse(ctx context.Context, params *PostServicesParams, body PostServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServicesResponse, error)

	PostServicesWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostServicesParams, body PostServicesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServicesResponse, error)

	PostServicesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostServicesParams, body PostServicesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostServicesResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationsResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]Applications
	ApplicationvndPgrstObjectJSON200              *[]Applications
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]Applications
}

// Status returns HTTPResponse.Status
func (r GetApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGatewaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaysResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]Gateways
	ApplicationvndPgrstObjectJSON200              *[]Gateways
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]Gateways
}

// Status returns HTTPResponse.Status
func (r GetGatewaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchGatewaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchGatewaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchGatewaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostGatewaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNetworksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteNetworksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNetworksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNetworksResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]Networks
	ApplicationvndPgrstObjectJSON200              *[]Networks
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]Networks
}

// Status returns HTTPResponse.Status
func (r GetNetworksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetworksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchNetworksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchNetworksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchNetworksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNetworksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostNetworksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNetworksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]Organizations
	ApplicationvndPgrstObjectJSON200              *[]Organizations
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]Organizations
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePortalAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePortalAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePortalAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPortalAccountsResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]PortalAccounts
	ApplicationvndPgrstObjectJSON200              *[]PortalAccounts
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]PortalAccounts
}

// Status returns HTTPResponse.Status
func (r GetPortalAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPortalAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPortalAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchPortalAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPortalAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPortalAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPortalAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPortalAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePortalApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePortalApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePortalApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPortalApplicationsResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]PortalApplications
	ApplicationvndPgrstObjectJSON200              *[]PortalApplications
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]PortalApplications
}

// Status returns HTTPResponse.Status
func (r GetPortalApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPortalApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPortalApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchPortalApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPortalApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPortalApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPortalApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPortalApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePortalPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePortalPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePortalPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPortalPlansResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]PortalPlans
	ApplicationvndPgrstObjectJSON200              *[]PortalPlans
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]PortalPlans
}

// Status returns HTTPResponse.Status
func (r GetPortalPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPortalPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPortalPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchPortalPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPortalPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPortalPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPortalPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPortalPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRpcCreatePortalApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRpcCreatePortalApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRpcCreatePortalApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRpcCreatePortalApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRpcCreatePortalApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRpcCreatePortalApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRpcMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRpcMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRpcMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRpcMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRpcMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRpcMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceEndpointsResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]ServiceEndpoints
	ApplicationvndPgrstObjectJSON200              *[]ServiceEndpoints
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]ServiceEndpoints
}

// Status returns HTTPResponse.Status
func (r GetServiceEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchServiceEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceFallbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceFallbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceFallbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceFallbacksResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]ServiceFallbacks
	ApplicationvndPgrstObjectJSON200              *[]ServiceFallbacks
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]ServiceFallbacks
}

// Status returns HTTPResponse.Status
func (r GetServiceFallbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceFallbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceFallbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchServiceFallbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceFallbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceFallbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceFallbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceFallbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServicesResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]Services
	ApplicationvndPgrstObjectJSON200              *[]Services
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]Services
}

// Status returns HTTPResponse.Status
func (r GetServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// DeleteApplicationsWithResponse request returning *DeleteApplicationsResponse
func (c *ClientWithResponses) DeleteApplicationsWithResponse(ctx context.Context, params *DeleteApplicationsParams, reqEditors ...RequestEditorFn) (*DeleteApplicationsResponse, error) {
	rsp, err := c.DeleteApplications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationsResponse(rsp)
}

// GetApplicationsWithResponse request returning *GetApplicationsResponse
func (c *ClientWithResponses) GetApplicationsWithResponse(ctx context.Context, params *GetApplicationsParams, reqEditors ...RequestEditorFn) (*GetApplicationsResponse, error) {
	rsp, err := c.GetApplications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationsResponse(rsp)
}

// PatchApplicationsWithBodyWithResponse request with arbitrary body returning *PatchApplicationsResponse
func (c *ClientWithResponses) PatchApplicationsWithBodyWithResponse(ctx context.Context, params *PatchApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApplicationsResponse, error) {
	rsp, err := c.PatchApplicationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PatchApplicationsWithResponse(ctx context.Context, params *PatchApplicationsParams, body PatchApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApplicationsResponse, error) {
	rsp, err := c.PatchApplications(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PatchApplicationsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchApplicationsParams, body PatchApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApplicationsResponse, error) {
	rsp, err := c.PatchApplicationsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PatchApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchApplicationsParams, body PatchApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchApplicationsResponse, error) {
	rsp, err := c.PatchApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApplicationsResponse(rsp)
}

// PostApplicationsWithBodyWithResponse request with arbitrary body returning *PostApplicationsResponse
func (c *ClientWithResponses) PostApplicationsWithBodyWithResponse(ctx context.Context, params *PostApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationsResponse, error) {
	rsp, err := c.PostApplicationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PostApplicationsWithResponse(ctx context.Context, params *PostApplicationsParams, body PostApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsResponse, error) {
	rsp, err := c.PostApplications(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PostApplicationsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostApplicationsParams, body PostApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsResponse, error) {
	rsp, err := c.PostApplicationsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PostApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostApplicationsParams, body PostApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsResponse, error) {
	rsp, err := c.PostApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationsResponse(rsp)
}

// DeleteGatewaysWithResponse request returning *DeleteGatewaysResponse
func (c *ClientWithResponses) DeleteGatewaysWithResponse(ctx context.Context, params *DeleteGatewaysParams, reqEditors ...RequestEditorFn) (*DeleteGatewaysResponse, error) {
	rsp, err := c.DeleteGateways(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewaysResponse(rsp)
}

// GetGatewaysWithResponse request returning *GetGatewaysResponse
func (c *ClientWithResponses) GetGatewaysWithResponse(ctx context.Context, params *GetGatewaysParams, reqEditors ...RequestEditorFn) (*GetGatewaysResponse, error) {
	rsp, err := c.GetGateways(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaysResponse(rsp)
}

// PatchGatewaysWithBodyWithResponse request with arbitrary body returning *PatchGatewaysResponse
func (c *ClientWithResponses) PatchGatewaysWithBodyWithResponse(ctx context.Context, params *PatchGatewaysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchGatewaysResponse, error) {
	rsp, err := c.PatchGatewaysWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchGatewaysResponse(rsp)
}

func (c *ClientWithResponses) PatchGatewaysWithResponse(ctx context.Context, params *PatchGatewaysParams, body PatchGatewaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchGatewaysResponse, error) {
	rsp, err := c.PatchGateways(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchGatewaysResponse(rsp)
}

func (c *ClientWithResponses) PatchGatewaysWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchGatewaysParams, body PatchGatewaysApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchGatewaysResponse, error) {
	rsp, err := c.PatchGatewaysWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchGatewaysResponse(rsp)
}

func (c *ClientWithResponses) PatchGatewaysWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchGatewaysParams, body PatchGatewaysApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchGatewaysResponse, error) {
	rsp, err := c.PatchGatewaysWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchGatewaysResponse(rsp)
}

// PostGatewaysWithBodyWithResponse request with arbitrary body returning *PostGatewaysResponse
func (c *ClientWithResponses) PostGatewaysWithBodyWithResponse(ctx context.Context, params *PostGatewaysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaysResponse, error) {
	rsp, err := c.PostGatewaysWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaysResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaysWithResponse(ctx context.Context, params *PostGatewaysParams, body PostGatewaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaysResponse, error) {
	rsp, err := c.PostGateways(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaysResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaysWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostGatewaysParams, body PostGatewaysApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaysResponse, error) {
	rsp, err := c.PostGatewaysWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaysResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaysWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostGatewaysParams, body PostGatewaysApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaysResponse, error) {
	rsp, err := c.PostGatewaysWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaysResponse(rsp)
}

// DeleteNetworksWithResponse request returning *DeleteNetworksResponse
func (c *ClientWithResponses) DeleteNetworksWithResponse(ctx context.Context, params *DeleteNetworksParams, reqEditors ...RequestEditorFn) (*DeleteNetworksResponse, error) {
	rsp, err := c.DeleteNetworks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNetworksResponse(rsp)
}

// GetNetworksWithResponse request returning *GetNetworksResponse
func (c *ClientWithResponses) GetNetworksWithResponse(ctx context.Context, params *GetNetworksParams, reqEditors ...RequestEditorFn) (*GetNetworksResponse, error) {
	rsp, err := c.GetNetworks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNetworksResponse(rsp)
}

// PatchNetworksWithBodyWithResponse request with arbitrary body returning *PatchNetworksResponse
func (c *ClientWithResponses) PatchNetworksWithBodyWithResponse(ctx context.Context, params *PatchNetworksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchNetworksResponse, error) {
	rsp, err := c.PatchNetworksWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchNetworksResponse(rsp)
}

func (c *ClientWithResponses) PatchNetworksWithResponse(ctx context.Context, params *PatchNetworksParams, body PatchNetworksJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchNetworksResponse, error) {
	rsp, err := c.PatchNetworks(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchNetworksResponse(rsp)
}

func (c *ClientWithResponses) PatchNetworksWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchNetworksParams, body PatchNetworksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchNetworksResponse, error) {
	rsp, err := c.PatchNetworksWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchNetworksResponse(rsp)
}

func (c *ClientWithResponses) PatchNetworksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchNetworksParams, body PatchNetworksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchNetworksResponse, error) {
	rsp, err := c.PatchNetworksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchNetworksResponse(rsp)
}

// PostNetworksWithBodyWithResponse request with arbitrary body returning *PostNetworksResponse
func (c *ClientWithResponses) PostNetworksWithBodyWithResponse(ctx context.Context, params *PostNetworksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNetworksResponse, error) {
	rsp, err := c.PostNetworksWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNetworksResponse(rsp)
}

func (c *ClientWithResponses) PostNetworksWithResponse(ctx context.Context, params *PostNetworksParams, body PostNetworksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNetworksResponse, error) {
	rsp, err := c.PostNetworks(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNetworksResponse(rsp)
}

func (c *ClientWithResponses) PostNetworksWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostNetworksParams, body PostNetworksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNetworksResponse, error) {
	rsp, err := c.PostNetworksWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNetworksResponse(rsp)
}

func (c *ClientWithResponses) PostNetworksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostNetworksParams, body PostNetworksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostNetworksResponse, error) {
	rsp, err := c.PostNetworksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNetworksResponse(rsp)
}

// DeleteOrganizationsWithResponse request returning *DeleteOrganizationsResponse
func (c *ClientWithResponses) DeleteOrganizationsWithResponse(ctx context.Context, params *DeleteOrganizationsParams, reqEditors ...RequestEditorFn) (*DeleteOrganizationsResponse, error) {
	rsp, err := c.DeleteOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsResponse(rsp)
}

// GetOrganizationsWithResponse request returning *GetOrganizationsResponse
func (c *ClientWithResponses) GetOrganizationsWithResponse(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error) {
	rsp, err := c.GetOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsResponse(rsp)
}

// PatchOrganizationsWithBodyWithResponse request with arbitrary body returning *PatchOrganizationsResponse
func (c *ClientWithResponses) PatchOrganizationsWithBodyWithResponse(ctx context.Context, params *PatchOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrganizationsResponse, error) {
	rsp, err := c.PatchOrganizationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PatchOrganizationsWithResponse(ctx context.Context, params *PatchOrganizationsParams, body PatchOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrganizationsResponse, error) {
	rsp, err := c.PatchOrganizations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PatchOrganizationsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchOrganizationsParams, body PatchOrganizationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrganizationsResponse, error) {
	rsp, err := c.PatchOrganizationsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PatchOrganizationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchOrganizationsParams, body PatchOrganizationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchOrganizationsResponse, error) {
	rsp, err := c.PatchOrganizationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrganizationsResponse(rsp)
}

// PostOrganizationsWithBodyWithResponse request with arbitrary body returning *PostOrganizationsResponse
func (c *ClientWithResponses) PostOrganizationsWithBodyWithResponse(ctx context.Context, params *PostOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsWithResponse(ctx context.Context, params *PostOrganizationsParams, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostOrganizationsParams, body PostOrganizationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizationsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostOrganizationsParams, body PostOrganizationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

// DeletePortalAccountsWithResponse request returning *DeletePortalAccountsResponse
func (c *ClientWithResponses) DeletePortalAccountsWithResponse(ctx context.Context, params *DeletePortalAccountsParams, reqEditors ...RequestEditorFn) (*DeletePortalAccountsResponse, error) {
	rsp, err := c.DeletePortalAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePortalAccountsResponse(rsp)
}

// GetPortalAccountsWithResponse request returning *GetPortalAccountsResponse
func (c *ClientWithResponses) GetPortalAccountsWithResponse(ctx context.Context, params *GetPortalAccountsParams, reqEditors ...RequestEditorFn) (*GetPortalAccountsResponse, error) {
	rsp, err := c.GetPortalAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPortalAccountsResponse(rsp)
}

// PatchPortalAccountsWithBodyWithResponse request with arbitrary body returning *PatchPortalAccountsResponse
func (c *ClientWithResponses) PatchPortalAccountsWithBodyWithResponse(ctx context.Context, params *PatchPortalAccountsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPortalAccountsResponse, error) {
	rsp, err := c.PatchPortalAccountsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPortalAccountsResponse(rsp)
}

func (c *ClientWithResponses) PatchPortalAccountsWithResponse(ctx context.Context, params *PatchPortalAccountsParams, body PatchPortalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalAccountsResponse, error) {
	rsp, err := c.PatchPortalAccounts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPortalAccountsResponse(rsp)
}

func (c *ClientWithResponses) PatchPortalAccountsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchPortalAccountsParams, body PatchPortalAccountsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalAccountsResponse, error) {
	rsp, err := c.PatchPortalAccountsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPortalAccountsResponse(rsp)
}

func (c *ClientWithResponses) PatchPortalAccountsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchPortalAccountsParams, body PatchPortalAccountsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalAccountsResponse, error) {
	rsp, err := c.PatchPortalAccountsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPortalAccountsResponse(rsp)
}

// PostPortalAccountsWithBodyWithResponse request with arbitrary body returning *PostPortalAccountsResponse
func (c *ClientWithResponses) PostPortalAccountsWithBodyWithResponse(ctx context.Context, params *PostPortalAccountsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPortalAccountsResponse, error) {
	rsp, err := c.PostPortalAccountsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPortalAccountsResponse(rsp)
}

func (c *ClientWithResponses) PostPortalAccountsWithResponse(ctx context.Context, params *PostPortalAccountsParams, body PostPortalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPortalAccountsResponse, error) {
	rsp, err := c.PostPortalAccounts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPortalAccountsResponse(rsp)
}

func (c *ClientWithResponses) PostPortalAccountsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostPortalAccountsParams, body PostPortalAccountsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPortalAccountsResponse, error) {
	rsp, err := c.PostPortalAccountsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPortalAccountsResponse(rsp)
}

func (c *ClientWithResponses) PostPortalAccountsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostPortalAccountsParams, body PostPortalAccountsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostPortalAccountsResponse, error) {
	rsp, err := c.PostPortalAccountsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPortalAccountsResponse(rsp)
}

// DeletePortalApplicationsWithResponse request returning *DeletePortalApplicationsResponse
func (c *ClientWithResponses) DeletePortalApplicationsWithResponse(ctx context.Context, params *DeletePortalApplicationsParams, reqEditors ...RequestEditorFn) (*DeletePortalApplicationsResponse, error) {
	rsp, err := c.DeletePortalApplications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePortalApplicationsResponse(rsp)
}

// GetPortalApplicationsWithResponse request returning *GetPortalApplicationsResponse
func (c *ClientWithResponses) GetPortalApplicationsWithResponse(ctx context.Context, params *GetPortalApplicationsParams, reqEditors ...RequestEditorFn) (*GetPortalApplicationsResponse, error) {
	rsp, err := c.GetPortalApplications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPortalApplicationsResponse(rsp)
}

// PatchPortalApplicationsWithBodyWithResponse request with arbitrary body returning *PatchPortalApplicationsResponse
func (c *ClientWithResponses) PatchPortalApplicationsWithBodyWithResponse(ctx context.Context, params *PatchPortalApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPortalApplicationsResponse, error) {
	rsp, err := c.PatchPortalApplicationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPortalApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PatchPortalApplicationsWithResponse(ctx context.Context, params *PatchPortalApplicationsParams, body PatchPortalApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalApplicationsResponse, error) {
	rsp, err := c.PatchPortalApplications(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPortalApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PatchPortalApplicationsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchPortalApplicationsParams, body PatchPortalApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalApplicationsResponse, error) {
	rsp, err := c.PatchPortalApplicationsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPortalApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PatchPortalApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchPortalApplicationsParams, body PatchPortalApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalApplicationsResponse, error) {
	rsp, err := c.PatchPortalApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPortalApplicationsResponse(rsp)
}

// PostPortalApplicationsWithBodyWithResponse request with arbitrary body returning *PostPortalApplicationsResponse
func (c *ClientWithResponses) PostPortalApplicationsWithBodyWithResponse(ctx context.Context, params *PostPortalApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPortalApplicationsResponse, error) {
	rsp, err := c.PostPortalApplicationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPortalApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PostPortalApplicationsWithResponse(ctx context.Context, params *PostPortalApplicationsParams, body PostPortalApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPortalApplicationsResponse, error) {
	rsp, err := c.PostPortalApplications(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPortalApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PostPortalApplicationsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostPortalApplicationsParams, body PostPortalApplicationsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPortalApplicationsResponse, error) {
	rsp, err := c.PostPortalApplicationsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPortalApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PostPortalApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostPortalApplicationsParams, body PostPortalApplicationsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostPortalApplicationsResponse, error) {
	rsp, err := c.PostPortalApplicationsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPortalApplicationsResponse(rsp)
}

// DeletePortalPlansWithResponse request returning *DeletePortalPlansResponse
func (c *ClientWithResponses) DeletePortalPlansWithResponse(ctx context.Context, params *DeletePortalPlansParams, reqEditors ...RequestEditorFn) (*DeletePortalPlansResponse, error) {
	rsp, err := c.DeletePortalPlans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePortalPlansResponse(rsp)
}

// GetPortalPlansWithResponse request returning *GetPortalPlansResponse
func (c *ClientWithResponses) GetPortalPlansWithResponse(ctx context.Context, params *GetPortalPlansParams, reqEditors ...RequestEditorFn) (*GetPortalPlansResponse, error) {
	rsp, err := c.GetPortalPlans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPortalPlansResponse(rsp)
}

// PatchPortalPlansWithBodyWithResponse request with arbitrary body returning *PatchPortalPlansResponse
func (c *ClientWithResponses) PatchPortalPlansWithBodyWithResponse(ctx context.Context, params *PatchPortalPlansParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPortalPlansResponse, error) {
	rsp, err := c.PatchPortalPlansWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPortalPlansResponse(rsp)
}

func (c *ClientWithResponses) PatchPortalPlansWithResponse(ctx context.Context, params *PatchPortalPlansParams, body PatchPortalPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalPlansResponse, error) {
	rsp, err := c.PatchPortalPlans(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPortalPlansResponse(rsp)
}

func (c *ClientWithResponses) PatchPortalPlansWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchPortalPlansParams, body PatchPortalPlansApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalPlansResponse, error) {
	rsp, err := c.PatchPortalPlansWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPortalPlansResponse(rsp)
}

func (c *ClientWithResponses) PatchPortalPlansWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchPortalPlansParams, body PatchPortalPlansApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchPortalPlansResponse, error) {
	rsp, err := c.PatchPortalPlansWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPortalPlansResponse(rsp)
}

// PostPortalPlansWithBodyWithResponse request with arbitrary body returning *PostPortalPlansResponse
func (c *ClientWithResponses) PostPortalPlansWithBodyWithResponse(ctx context.Context, params *PostPortalPlansParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPortalPlansResponse, error) {
	rsp, err := c.PostPortalPlansWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPortalPlansResponse(rsp)
}

func (c *ClientWithResponses) PostPortalPlansWithResponse(ctx context.Context, params *PostPortalPlansParams, body PostPortalPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPortalPlansResponse, error) {
	rsp, err := c.PostPortalPlans(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPortalPlansResponse(rsp)
}

func (c *ClientWithResponses) PostPortalPlansWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostPortalPlansParams, body PostPortalPlansApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPortalPlansResponse, error) {
	rsp, err := c.PostPortalPlansWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPortalPlansResponse(rsp)
}

func (c *ClientWithResponses) PostPortalPlansWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostPortalPlansParams, body PostPortalPlansApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostPortalPlansResponse, error) {
	rsp, err := c.PostPortalPlansWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPortalPlansResponse(rsp)
}

// GetRpcCreatePortalApplicationWithResponse request returning *GetRpcCreatePortalApplicationResponse
func (c *ClientWithResponses) GetRpcCreatePortalApplicationWithResponse(ctx context.Context, params *GetRpcCreatePortalApplicationParams, reqEditors ...RequestEditorFn) (*GetRpcCreatePortalApplicationResponse, error) {
	rsp, err := c.GetRpcCreatePortalApplication(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRpcCreatePortalApplicationResponse(rsp)
}

// PostRpcCreatePortalApplicationWithBodyWithResponse request with arbitrary body returning *PostRpcCreatePortalApplicationResponse
func (c *ClientWithResponses) PostRpcCreatePortalApplicationWithBodyWithResponse(ctx context.Context, params *PostRpcCreatePortalApplicationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcCreatePortalApplicationResponse, error) {
	rsp, err := c.PostRpcCreatePortalApplicationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcCreatePortalApplicationResponse(rsp)
}

func (c *ClientWithResponses) PostRpcCreatePortalApplicationWithResponse(ctx context.Context, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcCreatePortalApplicationResponse, error) {
	rsp, err := c.PostRpcCreatePortalApplication(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcCreatePortalApplicationResponse(rsp)
}

func (c *ClientWithResponses) PostRpcCreatePortalApplicationWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcCreatePortalApplicationResponse, error) {
	rsp, err := c.PostRpcCreatePortalApplicationWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcCreatePortalApplicationResponse(rsp)
}

func (c *ClientWithResponses) PostRpcCreatePortalApplicationWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcCreatePortalApplicationParams, body PostRpcCreatePortalApplicationApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcCreatePortalApplicationResponse, error) {
	rsp, err := c.PostRpcCreatePortalApplicationWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcCreatePortalApplicationResponse(rsp)
}

// GetRpcMeWithResponse request returning *GetRpcMeResponse
func (c *ClientWithResponses) GetRpcMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRpcMeResponse, error) {
	rsp, err := c.GetRpcMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRpcMeResponse(rsp)
}

// PostRpcMeWithBodyWithResponse request with arbitrary body returning *PostRpcMeResponse
func (c *ClientWithResponses) PostRpcMeWithBodyWithResponse(ctx context.Context, params *PostRpcMeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcMeResponse, error) {
	rsp, err := c.PostRpcMeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcMeResponse(rsp)
}

func (c *ClientWithResponses) PostRpcMeWithResponse(ctx context.Context, params *PostRpcMeParams, body PostRpcMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcMeResponse, error) {
	rsp, err := c.PostRpcMe(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcMeResponse(rsp)
}

func (c *ClientWithResponses) PostRpcMeWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcMeParams, body PostRpcMeApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcMeResponse, error) {
	rsp, err := c.PostRpcMeWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcMeResponse(rsp)
}

func (c *ClientWithResponses) PostRpcMeWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcMeParams, body PostRpcMeApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcMeResponse, error) {
	rsp, err := c.PostRpcMeWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcMeResponse(rsp)
}

// DeleteServiceEndpointsWithResponse request returning *DeleteServiceEndpointsResponse
func (c *ClientWithResponses) DeleteServiceEndpointsWithResponse(ctx context.Context, params *DeleteServiceEndpointsParams, reqEditors ...RequestEditorFn) (*DeleteServiceEndpointsResponse, error) {
	rsp, err := c.DeleteServiceEndpoints(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceEndpointsResponse(rsp)
}

// GetServiceEndpointsWithResponse request returning *GetServiceEndpointsResponse
func (c *ClientWithResponses) GetServiceEndpointsWithResponse(ctx context.Context, params *GetServiceEndpointsParams, reqEditors ...RequestEditorFn) (*GetServiceEndpointsResponse, error) {
	rsp, err := c.GetServiceEndpoints(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceEndpointsResponse(rsp)
}

// PatchServiceEndpointsWithBodyWithResponse request with arbitrary body returning *PatchServiceEndpointsResponse
func (c *ClientWithResponses) PatchServiceEndpointsWithBodyWithResponse(ctx context.Context, params *PatchServiceEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceEndpointsResponse, error) {
	rsp, err := c.PatchServiceEndpointsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceEndpointsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceEndpointsWithResponse(ctx context.Context, params *PatchServiceEndpointsParams, body PatchServiceEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceEndpointsResponse, error) {
	rsp, err := c.PatchServiceEndpoints(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceEndpointsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceEndpointsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchServiceEndpointsParams, body PatchServiceEndpointsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceEndpointsResponse, error) {
	rsp, err := c.PatchServiceEndpointsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceEndpointsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceEndpointsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchServiceEndpointsParams, body PatchServiceEndpointsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceEndpointsResponse, error) {
	rsp, err := c.PatchServiceEndpointsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceEndpointsResponse(rsp)
}

// PostServiceEndpointsWithBodyWithResponse request with arbitrary body returning *PostServiceEndpointsResponse
func (c *ClientWithResponses) PostServiceEndpointsWithBodyWithResponse(ctx context.Context, params *PostServiceEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceEndpointsResponse, error) {
	rsp, err := c.PostServiceEndpointsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceEndpointsResponse(rsp)
}

func (c *ClientWithResponses) PostServiceEndpointsWithResponse(ctx context.Context, params *PostServiceEndpointsParams, body PostServiceEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceEndpointsResponse, error) {
	rsp, err := c.PostServiceEndpoints(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceEndpointsResponse(rsp)
}

func (c *ClientWithResponses) PostServiceEndpointsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostServiceEndpointsParams, body PostServiceEndpointsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceEndpointsResponse, error) {
	rsp, err := c.PostServiceEndpointsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceEndpointsResponse(rsp)
}

func (c *ClientWithResponses) PostServiceEndpointsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostServiceEndpointsParams, body PostServiceEndpointsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostServiceEndpointsResponse, error) {
	rsp, err := c.PostServiceEndpointsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceEndpointsResponse(rsp)
}

// DeleteServiceFallbacksWithResponse request returning *DeleteServiceFallbacksResponse
func (c *ClientWithResponses) DeleteServiceFallbacksWithResponse(ctx context.Context, params *DeleteServiceFallbacksParams, reqEditors ...RequestEditorFn) (*DeleteServiceFallbacksResponse, error) {
	rsp, err := c.DeleteServiceFallbacks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceFallbacksResponse(rsp)
}

// GetServiceFallbacksWithResponse request returning *GetServiceFallbacksResponse
func (c *ClientWithResponses) GetServiceFallbacksWithResponse(ctx context.Context, params *GetServiceFallbacksParams, reqEditors ...RequestEditorFn) (*GetServiceFallbacksResponse, error) {
	rsp, err := c.GetServiceFallbacks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceFallbacksResponse(rsp)
}

// PatchServiceFallbacksWithBodyWithResponse request with arbitrary body returning *PatchServiceFallbacksResponse
func (c *ClientWithResponses) PatchServiceFallbacksWithBodyWithResponse(ctx context.Context, params *PatchServiceFallbacksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceFallbacksResponse, error) {
	rsp, err := c.PatchServiceFallbacksWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceFallbacksResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceFallbacksWithResponse(ctx context.Context, params *PatchServiceFallbacksParams, body PatchServiceFallbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceFallbacksResponse, error) {
	rsp, err := c.PatchServiceFallbacks(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceFallbacksResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceFallbacksWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchServiceFallbacksParams, body PatchServiceFallbacksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceFallbacksResponse, error) {
	rsp, err := c.PatchServiceFallbacksWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceFallbacksResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceFallbacksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchServiceFallbacksParams, body PatchServiceFallbacksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceFallbacksResponse, error) {
	rsp, err := c.PatchServiceFallbacksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceFallbacksResponse(rsp)
}

// PostServiceFallbacksWithBodyWithResponse request with arbitrary body returning *PostServiceFallbacksResponse
func (c *ClientWithResponses) PostServiceFallbacksWithBodyWithResponse(ctx context.Context, params *PostServiceFallbacksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceFallbacksResponse, error) {
	rsp, err := c.PostServiceFallbacksWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceFallbacksResponse(rsp)
}

func (c *ClientWithResponses) PostServiceFallbacksWithResponse(ctx context.Context, params *PostServiceFallbacksParams, body PostServiceFallbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceFallbacksResponse, error) {
	rsp, err := c.PostServiceFallbacks(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceFallbacksResponse(rsp)
}

func (c *ClientWithResponses) PostServiceFallbacksWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostServiceFallbacksParams, body PostServiceFallbacksApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceFallbacksResponse, error) {
	rsp, err := c.PostServiceFallbacksWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceFallbacksResponse(rsp)
}

func (c *ClientWithResponses) PostServiceFallbacksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostServiceFallbacksParams, body PostServiceFallbacksApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostServiceFallbacksResponse, error) {
	rsp, err := c.PostServiceFallbacksWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceFallbacksResponse(rsp)
}

// DeleteServicesWithResponse request returning *DeleteServicesResponse
func (c *ClientWithResponses) DeleteServicesWithResponse(ctx context.Context, params *DeleteServicesParams, reqEditors ...RequestEditorFn) (*DeleteServicesResponse, error) {
	rsp, err := c.DeleteServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServicesResponse(rsp)
}

// GetServicesWithResponse request returning *GetServicesResponse
func (c *ClientWithResponses) GetServicesWithResponse(ctx context.Context, params *GetServicesParams, reqEditors ...RequestEditorFn) (*GetServicesResponse, error) {
	rsp, err := c.GetServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicesResponse(rsp)
}

// PatchServicesWithBodyWithResponse request with arbitrary body returning *PatchServicesResponse
func (c *ClientWithResponses) PatchServicesWithBodyWithResponse(ctx context.Context, params *PatchServicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServicesResponse, error) {
	rsp, err := c.PatchServicesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServicesResponse(rsp)
}

func (c *ClientWithResponses) PatchServicesWithResponse(ctx context.Context, params *PatchServicesParams, body PatchServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServicesResponse, error) {
	rsp, err := c.PatchServices(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServicesResponse(rsp)
}

func (c *ClientWithResponses) PatchServicesWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchServicesParams, body PatchServicesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServicesResponse, error) {
	rsp, err := c.PatchServicesWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServicesResponse(rsp)
}

func (c *ClientWithResponses) PatchServicesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchServicesParams, body PatchServicesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchServicesResponse, error) {
	rsp, err := c.PatchServicesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServicesResponse(rsp)
}

// PostServicesWithBodyWithResponse request with arbitrary body returning *PostServicesResponse
func (c *ClientWithResponses) PostServicesWithBodyWithResponse(ctx context.Context, params *PostServicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServicesResponse, error) {
	rsp, err := c.PostServicesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServicesResponse(rsp)
}

func (c *ClientWithResponses) PostServicesWithResponse(ctx context.Context, params *PostServicesParams, body PostServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServicesResponse, error) {
	rsp, err := c.PostServices(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServicesResponse(rsp)
}

func (c *ClientWithResponses) PostServicesWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostServicesParams, body PostServicesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServicesResponse, error) {
	rsp, err := c.PostServicesWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServicesResponse(rsp)
}

func (c *ClientWithResponses) PostServicesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostServicesParams, body PostServicesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostServicesResponse, error) {
	rsp, err := c.PostServicesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServicesResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApplicationsResponse parses an HTTP response from a DeleteApplicationsWithResponse call
func ParseDeleteApplicationsResponse(rsp *http.Response) (*DeleteApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApplicationsResponse parses an HTTP response from a GetApplicationsWithResponse call
func ParseGetApplicationsResponse(rsp *http.Response) (*GetApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []Applications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []Applications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []Applications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchApplicationsResponse parses an HTTP response from a PatchApplicationsWithResponse call
func ParsePatchApplicationsResponse(rsp *http.Response) (*PatchApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApplicationsResponse parses an HTTP response from a PostApplicationsWithResponse call
func ParsePostApplicationsResponse(rsp *http.Response) (*PostApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteGatewaysResponse parses an HTTP response from a DeleteGatewaysWithResponse call
func ParseDeleteGatewaysResponse(rsp *http.Response) (*DeleteGatewaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGatewaysResponse parses an HTTP response from a GetGatewaysWithResponse call
func ParseGetGatewaysResponse(rsp *http.Response) (*GetGatewaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []Gateways
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []Gateways
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []Gateways
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchGatewaysResponse parses an HTTP response from a PatchGatewaysWithResponse call
func ParsePatchGatewaysResponse(rsp *http.Response) (*PatchGatewaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchGatewaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostGatewaysResponse parses an HTTP response from a PostGatewaysWithResponse call
func ParsePostGatewaysResponse(rsp *http.Response) (*PostGatewaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteNetworksResponse parses an HTTP response from a DeleteNetworksWithResponse call
func ParseDeleteNetworksResponse(rsp *http.Response) (*DeleteNetworksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNetworksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNetworksResponse parses an HTTP response from a GetNetworksWithResponse call
func ParseGetNetworksResponse(rsp *http.Response) (*GetNetworksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNetworksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []Networks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []Networks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []Networks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchNetworksResponse parses an HTTP response from a PatchNetworksWithResponse call
func ParsePatchNetworksResponse(rsp *http.Response) (*PatchNetworksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchNetworksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostNetworksResponse parses an HTTP response from a PostNetworksWithResponse call
func ParsePostNetworksResponse(rsp *http.Response) (*PostNetworksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNetworksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteOrganizationsResponse parses an HTTP response from a DeleteOrganizationsWithResponse call
func ParseDeleteOrganizationsResponse(rsp *http.Response) (*DeleteOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationsResponse parses an HTTP response from a GetOrganizationsWithResponse call
func ParseGetOrganizationsResponse(rsp *http.Response) (*GetOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []Organizations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []Organizations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []Organizations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchOrganizationsResponse parses an HTTP response from a PatchOrganizationsWithResponse call
func ParsePatchOrganizationsResponse(rsp *http.Response) (*PatchOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOrganizationsResponse parses an HTTP response from a PostOrganizationsWithResponse call
func ParsePostOrganizationsResponse(rsp *http.Response) (*PostOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePortalAccountsResponse parses an HTTP response from a DeletePortalAccountsWithResponse call
func ParseDeletePortalAccountsResponse(rsp *http.Response) (*DeletePortalAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePortalAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPortalAccountsResponse parses an HTTP response from a GetPortalAccountsWithResponse call
func ParseGetPortalAccountsResponse(rsp *http.Response) (*GetPortalAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPortalAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []PortalAccounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []PortalAccounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []PortalAccounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchPortalAccountsResponse parses an HTTP response from a PatchPortalAccountsWithResponse call
func ParsePatchPortalAccountsResponse(rsp *http.Response) (*PatchPortalAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPortalAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPortalAccountsResponse parses an HTTP response from a PostPortalAccountsWithResponse call
func ParsePostPortalAccountsResponse(rsp *http.Response) (*PostPortalAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPortalAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePortalApplicationsResponse parses an HTTP response from a DeletePortalApplicationsWithResponse call
func ParseDeletePortalApplicationsResponse(rsp *http.Response) (*DeletePortalApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePortalApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPortalApplicationsResponse parses an HTTP response from a GetPortalApplicationsWithResponse call
func ParseGetPortalApplicationsResponse(rsp *http.Response) (*GetPortalApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPortalApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []PortalApplications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []PortalApplications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []PortalApplications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchPortalApplicationsResponse parses an HTTP response from a PatchPortalApplicationsWithResponse call
func ParsePatchPortalApplicationsResponse(rsp *http.Response) (*PatchPortalApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPortalApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPortalApplicationsResponse parses an HTTP response from a PostPortalApplicationsWithResponse call
func ParsePostPortalApplicationsResponse(rsp *http.Response) (*PostPortalApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPortalApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePortalPlansResponse parses an HTTP response from a DeletePortalPlansWithResponse call
func ParseDeletePortalPlansResponse(rsp *http.Response) (*DeletePortalPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePortalPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPortalPlansResponse parses an HTTP response from a GetPortalPlansWithResponse call
func ParseGetPortalPlansResponse(rsp *http.Response) (*GetPortalPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPortalPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []PortalPlans
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []PortalPlans
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []PortalPlans
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchPortalPlansResponse parses an HTTP response from a PatchPortalPlansWithResponse call
func ParsePatchPortalPlansResponse(rsp *http.Response) (*PatchPortalPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPortalPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPortalPlansResponse parses an HTTP response from a PostPortalPlansWithResponse call
func ParsePostPortalPlansResponse(rsp *http.Response) (*PostPortalPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPortalPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRpcCreatePortalApplicationResponse parses an HTTP response from a GetRpcCreatePortalApplicationWithResponse call
func ParseGetRpcCreatePortalApplicationResponse(rsp *http.Response) (*GetRpcCreatePortalApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRpcCreatePortalApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRpcCreatePortalApplicationResponse parses an HTTP response from a PostRpcCreatePortalApplicationWithResponse call
func ParsePostRpcCreatePortalApplicationResponse(rsp *http.Response) (*PostRpcCreatePortalApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRpcCreatePortalApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRpcMeResponse parses an HTTP response from a GetRpcMeWithResponse call
func ParseGetRpcMeResponse(rsp *http.Response) (*GetRpcMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRpcMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRpcMeResponse parses an HTTP response from a PostRpcMeWithResponse call
func ParsePostRpcMeResponse(rsp *http.Response) (*PostRpcMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRpcMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteServiceEndpointsResponse parses an HTTP response from a DeleteServiceEndpointsWithResponse call
func ParseDeleteServiceEndpointsResponse(rsp *http.Response) (*DeleteServiceEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceEndpointsResponse parses an HTTP response from a GetServiceEndpointsWithResponse call
func ParseGetServiceEndpointsResponse(rsp *http.Response) (*GetServiceEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []ServiceEndpoints
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []ServiceEndpoints
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []ServiceEndpoints
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchServiceEndpointsResponse parses an HTTP response from a PatchServiceEndpointsWithResponse call
func ParsePatchServiceEndpointsResponse(rsp *http.Response) (*PatchServiceEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostServiceEndpointsResponse parses an HTTP response from a PostServiceEndpointsWithResponse call
func ParsePostServiceEndpointsResponse(rsp *http.Response) (*PostServiceEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteServiceFallbacksResponse parses an HTTP response from a DeleteServiceFallbacksWithResponse call
func ParseDeleteServiceFallbacksResponse(rsp *http.Response) (*DeleteServiceFallbacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceFallbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceFallbacksResponse parses an HTTP response from a GetServiceFallbacksWithResponse call
func ParseGetServiceFallbacksResponse(rsp *http.Response) (*GetServiceFallbacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceFallbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []ServiceFallbacks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []ServiceFallbacks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []ServiceFallbacks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchServiceFallbacksResponse parses an HTTP response from a PatchServiceFallbacksWithResponse call
func ParsePatchServiceFallbacksResponse(rsp *http.Response) (*PatchServiceFallbacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceFallbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostServiceFallbacksResponse parses an HTTP response from a PostServiceFallbacksWithResponse call
func ParsePostServiceFallbacksResponse(rsp *http.Response) (*PostServiceFallbacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceFallbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteServicesResponse parses an HTTP response from a DeleteServicesWithResponse call
func ParseDeleteServicesResponse(rsp *http.Response) (*DeleteServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServicesResponse parses an HTTP response from a GetServicesWithResponse call
func ParseGetServicesResponse(rsp *http.Response) (*GetServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []Services
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []Services
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []Services
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchServicesResponse parses an HTTP response from a PatchServicesWithResponse call
func ParsePatchServicesResponse(rsp *http.Response) (*PatchServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostServicesResponse parses an HTTP response from a PostServicesWithResponse call
func ParsePostServicesResponse(rsp *http.Response) (*PostServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9XW/ctpZ/hdAukBQ7sd30A7he5CFN27vd26aGk+w+NMFcWuLMsJYohaTs+Bb+7xfU",
	"JyVSEiVSGsfRSxCPDs85Is+3eMi/PD+Okpggwpl3/peXQAojxBHN/gpxhLn4T4CYT3HCcUy8c+9X8TMm",
	"ewBJAC7gHhOYPdl4WDz+mCJ65208AiPknRdINh7zDyiCAhu/S8QDxikme+/+fuPFux1D1pQKLAOkaICo",
	"Sul38bOA6UCdjerHnFC0Q/RVnBLNm1xkDxHxUUnhgGCOsyCRQzRoIJJG3vkfni9wviAxQd6HTSflC7F2",
	"zDHpTCDYC4bJPkTP4qs/kc97mYiZ67eniKeUvKAooYghwksRKH6PMMERDOsfsnkSf7E4TAXsC7wnMUXP",
	"gjQJsQ85Ys3HEaL7xtOe97vMaDyEN9QySSHZo9F61Gb1MsPSL+0ZpXdkgn3QUnuWoZJJBmgH05B75x7m",
	"KBJLpmEivv0ZhxzRE5jkq4djwuQ/tjAIKGIatfghjP1r/wAxAQUMiHeAHxCQhneYAx0BmfddTCMoWPcP",
	"kEKfIwpuIL3L7cuk10govoEcba/R3faAPgkiQ4y1h7hn0KcIchRsIe/iR4LQkuc4QozDKAG3mB+A+BP8",
	"K9dfYy72kKNbeCevtI6VNpj76SCI38b0eouDLh4kCPfkGaI32Ec95CWIGchzeI22MCr9n5YBGUbLwhXe",
	"4+zZSLoBInHUTzYHcf/iaRIMaIEE4VILCok+oh5WHGh00NTaFkM7LO0sWquwbWhdu8DdMrW8GalIt3W4",
	"uYYvs9+zdYuvEWEgAw/A1Z3BQjpS/Rary6p9RfxoKl+s/DGEJKZ7SPC/ju36m2wEKEQ1G01xfRPvOMgB",
	"QEWsQzolPPMxK//Vs3BtMC1DmHC0z6LoifRzYu05ew0jVBpmGbwzLW5jnEHUjqZsSUw5DLfQz/JvdnKF",
	"wxCT/TYfo2elAeNkMtpcHE3z2ow0dW9BrWozsveT8o8etWpBzbI2ggYiHPMQRWiQmxbkLBwJO0FJ/Uul",
	"9zqm9MCz8LW8LWxz0Py74KFpDd8R/DFFAAdipXYYUbCLaWYb88GgGNxhHVUKs0xli0zKEN1WlVsDvqQB",
	"801vTWSbSdkNDEezV4/U8pmkVyH2T5IQEhnSDdM0YeP5FYPcT2n2gn0+SIGbRewEUIK2LL2qVEarRG8y",
	"OCDDtTWqcJqdmYOW0Cwv9WBijUyKTGy2Cuh0Yh5EuU/HzNGjD5kZFMV/4i4+8oezrcoO3sQUc7Stq3ud",
	"pkoLa8bZHx8m8Kb1sUdwlTqepEp5w2D1M9gxakluh2exCbwkb32Wqgt8Sf7MgyP9IAfe3JhD40BpYLTr",
	"YMn8BQyCpu6BjqeaIZ8inpdsITuoccr/QHZAAcjhwDW6y0ITCQeAKT+IuKX302CbzmzSLRGi6GOKKer5",
	"7qOC6kuwcRwiSCZwc+zASQgyy8VZlql+VddD2wuexAyFHDW1oSl1l5AjkD0HmACxOohxBhJEhSTGJOjK",
	"LTXInTKeMrhH244dQL/BTzhKI5ABARiG8S0KsnXDJMuPJZPSyb1MYS7Wh21o5wDHZrPg7yGkcHpWRkRB",
	"+jFOWCwDU0SCJMZHrXeqrJT/6wnBZBALoe6h3Sc2TaA+CW5DjmNm+a0GKg9H8zglKzsYhlfQv34AIlqz",
	"Uv5vm9KwOwuUYJyuTs1H+xcDUZFBHaiOysvy0lrzcGxpZSfQ5/im03IUTy2iworQFeKw8/OYeOaCiB9H",
	"mOy3LO52VjKII5JJytE2JZizbYLolqIQ3qnR0auYZdFcMQBkA7JsAkH/APJRmy6etTTs9eH4VuqINbuK",
	"gwOkQW1oEIFXYXfapAd2IUrL796oSH9MYYj5nfEkdMK7mIfSTgZxBDHRpEf/B0McgOJx8fUNM1CM60zB",
	"m1gdFTgVrhf3JzXpvjpbA2Ye8vEtQXRow60e2DFDN/st9rt9QPVcb03QJ25KaWEHzlCIfE3mnbOFyR68",
	"isM0yqRbP/nZ+L49/OI983rDD3GAUbaOck1H/O3HhKN8L6D06PRPlk95jfw/Kdp5595/nNb9RKf5U3ba",
	"QCrIyqhuSHCS7CnjJ3lzyX/Njfu/SRqG7EX2VTHJ7d5EUkJ8Tn12MxnF/aa1us3nm3LDqbulqBA6XoZx",
	"eCcvQYPM+OmXhitTXz/blM7X3bRXCB1P+zi8k6e9QWb8tEvDlWmvn20am33czX0Tq+MFmIB88iqotMYv",
	"RRuHsh4tgE3ry6y7ZWnjdbwwk9BPXhodtfGLo2JRlkcB2Wi+pLlfpBkd+GQS1otl7871mDoXreXc5Wq8",
	"6xXLkc6zVCNw265RTWry4pQoulaleL7xlAqzszVRMTtemIkEJq+Ont74JdLhUdZJA7RRasbuF6vGPNNi",
	"jSRgvVhNetMXS8bTuVgSULVYztdorqVZaEUsF6Jv/nPUxQBdXt86/IIUnZkSVFZsS2jsI8Yw2edVawb4",
	"gcbp/pB95C9id2/jJTROEOVqEcGy/f49eU9exxydvydvD5gBzAAEFxRHkN6Bf6C7k/fp2dk3fnJ9mv0H",
	"eZv+mlIEP/2KyJ4fvPPvzpSyy8Yb6Lg3xf39txrczfJ7fbrBq3eXlz+9frt9+8tvP715+/K3C/klzGtG",
	"G2+wB1eZyZ9jivCeiJkEPAb/7Grn/Wcxz7trwOFViF48KSGfAD8rQ1W/lEOeOFqRZqV85PtouiXVVymB",
	"6lepoSe8xbfPNW/RrBiPfAtN3Vl9ixKofosa2tlbtLqDOzt3yw9T1ZiqTdeU/tffaeg3S7DONaioh+Yb",
	"6f7oOOND048u1/olca3PZylOzWnV8/QmuIAAmORvkHVLED9MA2GEs9nMjlUpCIEAcYhDptjg41ubwY7/",
	"pY17T7O/lWF/JCbKTev/47YJGu1vHWvQOHJgwBrIZeZWz1SaiPRUTHCtRSU4eHoR+9eIgwhiQhDfAI4Y",
	"z/6DuH/ylWILRgmoGwXUiFhrKgfmRqkFt7dYRAkkGDEQU+CnjMcRomBP4zQRMSrkwIcEXCEAOYf+AQVC",
	"2S7yps2XZfFscZs55bSCSYQ03bVull3ZciKptd3xAsYm+G9HtwJqU7L66jqZ1pTSW9uq05DjZxwRSHjZ",
	"W8xy7rIyVeb5i2bJbIv1npbT15Tk9kkFppP7/OwYiUtTLaZFI8oRAMav/N13HfjURn47nJ2t+FZ+e7yq",
	"t0OQ3kNK1GCkAV5HJK1xT0Yaj45u/FLW9ohsKSRBHG3TFAdPhZOb1qs/Y9T5zfea9entzp8yNR0NYuVZ",
	"kkEWhkUx4Qdv490hSIUtGtnAsPEGO+HHsN5odxgpnb09C6p0yuC1cLbHuQuaZ+iBt7MyM7vCjaftTHcX",
	"F+o6gRUx6vOuvZXOl3KFs3BsZd9S004UfpcfEKYgviWAVp1auR9miHNM9kcPIyehqBrWjZMvnW3raj0f",
	"2GSZn+eq7kirKEBK4V2PV5hiQLrPfek0IuUQxY7UY5849hLdTel2VqGzjXyMiz2G29T0lltZ7MGe8FEu",
	"ebhveya33NtvbfQKc/RD28loR0NzJaE7GDJUjSt3mi+e/XUdsqDaqh4vVW36aLmnG4hDYYOaoUKe/Inp",
	"HyphdDdAm8m1q5Zlc2rO+ownkVxAV8cEv7MV3zbeULuvOfIzQw3pD9e02226tKEEAgKN1EpV94EsHIK1",
	"OoHnL64p7b/13RAR4j/8/NbbeH7MoljYhMuf3oi///fN76+fXV688jbe/7954228vfhDI8oDzcCP5fvl",
	"sn6i1Qlez2CfNjT2M7U6P4pH4N3lr7kKlHMGbg+IgKQQskqhwA7icHnVaHcg2wYF2j7i+RVuFfnxIt/R",
	"yS1/IG9IR48mmH4Uq3RgR+MoCwmKj2OvuzYnVW3Qw4Fl2ck8DNlqRzYa4LSZ2EimP4fKRGeH7vCcPo4P",
	"8X0NusNzYN9R66x4M8qCzhj5tntmzUtef+vBprTAWu1NkftYB9pTj2XUG7a87C1uSZtq0AU29Cn/8PVj",
	"7OuuJ4sZ34uIFfwY+2kkXX+VBRDegfOEnZ+eJgKOIsZPYro/ReT05uvnJ2enMMEnBx6F+Re2XZyJJuZh",
	"cQEECSANQB7ngmJ/7ca7QZTl1AWOk+fgKfwWnZ3tdl9ln9QSRGCCvXPvm5OzkzPhQiA/ZKyfin/2+VV1",
	"wqtkrP4SeOfe37Ob5yhiSUxY7mqen51pNnr9I9+bm0ZC3sUPCSIvL34BEhh4mulkUMzHV2KN4J6J1fiF",
	"cBqzBPkZug8C1ala8hZWWGXxx+x3uQSevVp9498f+o3HNcjpiAu37jdTsbV32UzHJMmuBRJ5i48tmnxr",
	"0HQsfTuUp2OVPOd0JFJ0MR2JZNsMkDTu5Lv/oOjftzrPA14VPQgtPbTdBF+qaEMdP9xvOu3FqomrJj4W",
	"TSzOmzCAzK9SNeEru4XSFDC7P9KEfH5JrAFkXpM2tkL5xa8aI3Q2qu+piq/Nz5Foh97jm6IWItrbMeWG",
	"B307lQvcSq+ViOQ23vOz7zUxLaQcw3BxT5NA7h9UX3Mhfl69zeptHnHcVx5kdNel5o2zjhRlf5CBY1Jc",
	"pt3S5pjZhY7mvlq603uOWf5aU+7MhWmhKRbZc7Mnqy9z/nsJOd16dl6YOkpz9Pd12qCYYJ5095VOQ9DV",
	"mDUN21RzpLvc80gp6PQmwFLOK6Huyz9XeV7leU3kjprIyafOLZLE2RG0T+B66Vskbz143Sduju1zX9a2",
	"2ujVRs+Q/sjq8vAClu68Z7I6LJfz9Ezt6HzH6byKZKfZct6X7LwuIacbHt1l9QtH1LaN9OU0VvPWF08f",
	"b8rWoG3JoE0+s3aRoM2OoH3Q1kvfImjrwesuaJvFBPSFbA/Kco50XvKKPDSz2x0VTJ7x5aKCnok1jgpm",
	"mFURE2iOWukLDH5vgE+X8d5jB8aF0T2oso1qFsikHa0WWKbmB00sxytMOjpupxTApsT1hVSrsH0ewrYG",
	"oEsGoMoh/YtEoQ6o2oeiw0xYxKNDyN0FpbMb1L4AdTWqn60HHxl1KgL9kGOA7vjeTmCXC/KHpts40p95",
	"rkXUrz2Mri/uz9HLJw9MNBuDB7KM07A2Ois71MFb3cpuhU09OskKnf5AORfvqzmtbB609QEKM+GnCbND",
	"3ThK0QpTx2FhVjhb5x5a42qdeWiFb6rjbeOZ6noV7Tta+mxxrmdpwtvmui9pXi31aqlXS71a6i/EUq+1",
	"pyVrT5obCBepPjmha19/MmHDogI1jN5dDWqmqKSv8rRGJmtkskYma2Ty5eaQIyuKGn/w8PLQ7sKtpb1f",
	"rnI7PM/GtdtZJlmu2I467aVYATe9vxoOTvTH4U5SMh1aS7s0wOl0Zycjzg9Tn4M/W99pjN7Sh5rTmexL",
	"B0jImmmNX3uuvTXW9onbLhFWB3ZZI7X1uC46w3W4jle9nefOiLatNz00aDXoq0FfDfpq0L8wg74WeY9R",
	"5D3GMVPOaLsr9s546JQZCXdF3+MEMwY14TWgWQOaNaBZA5ovOEOdWLN0d5LZkZzDUPn48zjrzGw5jMvI",
	"x1gLqcosXVA2XF6+yICtvbb+jtdJiqlHZW2DC7Tte8vcobLzchLO1iVultjUG+WWrsGNvxivJeq5QA9X",
	"1lZZXmV5LT88iPJDrrIL1x0siDorOHTzYF9p6MLtsMTg0FYPFw5We73a6xmzq0pdHkjwMpQsTVOHxbOk",
	"rmk1T4+czalIemjin+Y51lbNjKQrnzRXqUGOGEgZoiBC0RWi7IATUNxOXCRo4ArtYoryLA7H5AS8J7lo",
	"shxMulO7OMFNOuVNQOwREcvduI77pLg+bZcSPz8YjgH0KYkZCsANhqC+VwsycPH7m7dg4DU3akh8mfj5",
	"9CuZuCpiWEzJxxTRO2/j5XeteclWrZLKt4txmqKN5Mh671BTrikboJnV9JYkqNRt3VPKC7mLvIFU2dXS",
	"675ociIZ+TJtDb2B+7anEhUeas73k02G+3XT1oHNyGS3ORoT0lVytXT0lxZ25Q0Dd+PlxocBWJW8JFOZ",
	"Vb1gGALIWOzjzDxe/vDyFUCEU4yEDQUQMEz2IQKQxxH2AaeQMOjnVljyCU9p4n8Fum2j7Hq/KCcgEIzx",
	"Ambhg/iB6QII4zxSFyPMJSfvyaNb5OadyKVfGWmWNl0GaNjumN8iqwshJvA5YJndYDS6YdYMleR9zZzS",
	"xty9jvCqGyP/OZrDMjSbMFc6R2Tgf5p32urjUoU9zXW2o2tPq6FaDdVqqFZD9QANVW+9erVbq91a7dZq",
	"t5a3W/pvXKs9Wu3Rao9We7S0Pbpvfz64/9wrmeUHr1x0u3ZDXSb+b8gb8a5NBiI08LmyxH+k+qF1Xu86",
	"3jb1g07lU7NmQjpK045IkMTY6HTYN/mQn6oR03dkKNRPyv+NbrJQUU29GbyHqfEbRVRkU/ehq5iO2Cdd",
	"fZIvuQFiavLP8Qj6B1BwK1krVdL6dmiuQvZZCtm6eXLJzZOqSi21g9IRZfttlGaMWOylNCEwx4ZKW8Pa",
	"t51yNa6PxYOP3JKnFeYHEQd0Zw/WwrrcjkeT6Z2w7dFubuUofwfD8Ar61+ZR/s/VCHsbUVFXfpms4SpK",
	"e0wVUykNbXHZmooa0/GC/VIEwLvLX3PpK7hj4PaACEgoFpCVmDKwgzjUSGUtfQaR/yp4n6XgrQnAMRKA",
	"WrOWTgAsKbtLAPoZcZAA9BFwlwDMZGwNsoHV4D4WTz8xam0I+MOLFwYzhOkCvHyG0DfXxhnCLBMtpQvm",
	"WYIDm2Gt1zWC8QcpVSgEYMrRNiWYs22C6JaiMPtYbcNQEEcQE2aJJb4liG5hEFDEpuIad8m8BgH0Ob6Z",
	"OrtXiMPpC4PJfsvisS21FYaPKQwxv6s9ESIiu546EQdIA1e42M1+i/3Jbzb1lKR6cu181zGTU+1F+ZUZ",
	"3NE4yrbeFBfmv87FXzWBRinpauVWK7daudXKrZWQB1sJWbwAcuy6x1zljnmrHE69tkFtY/Xcq+dePffq",
	"uRcuqdlW0tyayaH62WdQN7MqlzmczQwxojflPKU09M69A+fJ+elpGPswPMSMn39zdnbm3X+4/3cAAAD/",
	"/5yitW57IQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

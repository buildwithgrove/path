// Package portaldb provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package portaldb

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRpcArmor request
	GetRpcArmor(ctx context.Context, params *GetRpcArmorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRpcArmorWithBody request with any body
	PostRpcArmorWithBody(ctx context.Context, params *PostRpcArmorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcArmor(ctx context.Context, params *PostRpcArmorParams, body PostRpcArmorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcArmorWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcArmorParams, body PostRpcArmorApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcArmorWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcArmorParams, body PostRpcArmorApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRpcDearmor request
	GetRpcDearmor(ctx context.Context, params *GetRpcDearmorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRpcDearmorWithBody request with any body
	PostRpcDearmorWithBody(ctx context.Context, params *PostRpcDearmorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcDearmor(ctx context.Context, params *PostRpcDearmorParams, body PostRpcDearmorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcDearmorWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcDearmorParams, body PostRpcDearmorApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcDearmorWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcDearmorParams, body PostRpcDearmorApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRpcGenRandomUuid request
	GetRpcGenRandomUuid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRpcGenRandomUuidWithBody request with any body
	PostRpcGenRandomUuidWithBody(ctx context.Context, params *PostRpcGenRandomUuidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcGenRandomUuid(ctx context.Context, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcGenRandomUuidWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcGenRandomUuidWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRpcGenSalt request
	GetRpcGenSalt(ctx context.Context, params *GetRpcGenSaltParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRpcGenSaltWithBody request with any body
	PostRpcGenSaltWithBody(ctx context.Context, params *PostRpcGenSaltParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcGenSalt(ctx context.Context, params *PostRpcGenSaltParams, body PostRpcGenSaltJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcGenSaltWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcGenSaltParams, body PostRpcGenSaltApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcGenSaltWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcGenSaltParams, body PostRpcGenSaltApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRpcPgpArmorHeaders request
	GetRpcPgpArmorHeaders(ctx context.Context, params *GetRpcPgpArmorHeadersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRpcPgpArmorHeadersWithBody request with any body
	PostRpcPgpArmorHeadersWithBody(ctx context.Context, params *PostRpcPgpArmorHeadersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcPgpArmorHeaders(ctx context.Context, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcPgpArmorHeadersWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcPgpArmorHeadersWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRpcPgpKeyId request
	GetRpcPgpKeyId(ctx context.Context, params *GetRpcPgpKeyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRpcPgpKeyIdWithBody request with any body
	PostRpcPgpKeyIdWithBody(ctx context.Context, params *PostRpcPgpKeyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcPgpKeyId(ctx context.Context, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcPgpKeyIdWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcPgpKeyIdWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRpcArmor(ctx context.Context, params *GetRpcArmorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRpcArmorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcArmorWithBody(ctx context.Context, params *PostRpcArmorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcArmorRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcArmor(ctx context.Context, params *PostRpcArmorParams, body PostRpcArmorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcArmorRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcArmorWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcArmorParams, body PostRpcArmorApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcArmorRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcArmorWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcArmorParams, body PostRpcArmorApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcArmorRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRpcDearmor(ctx context.Context, params *GetRpcDearmorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRpcDearmorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcDearmorWithBody(ctx context.Context, params *PostRpcDearmorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcDearmorRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcDearmor(ctx context.Context, params *PostRpcDearmorParams, body PostRpcDearmorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcDearmorRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcDearmorWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcDearmorParams, body PostRpcDearmorApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcDearmorRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcDearmorWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcDearmorParams, body PostRpcDearmorApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcDearmorRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRpcGenRandomUuid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRpcGenRandomUuidRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcGenRandomUuidWithBody(ctx context.Context, params *PostRpcGenRandomUuidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcGenRandomUuidRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcGenRandomUuid(ctx context.Context, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcGenRandomUuidRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcGenRandomUuidWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcGenRandomUuidRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcGenRandomUuidWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcGenRandomUuidRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRpcGenSalt(ctx context.Context, params *GetRpcGenSaltParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRpcGenSaltRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcGenSaltWithBody(ctx context.Context, params *PostRpcGenSaltParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcGenSaltRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcGenSalt(ctx context.Context, params *PostRpcGenSaltParams, body PostRpcGenSaltJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcGenSaltRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcGenSaltWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcGenSaltParams, body PostRpcGenSaltApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcGenSaltRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcGenSaltWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcGenSaltParams, body PostRpcGenSaltApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcGenSaltRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRpcPgpArmorHeaders(ctx context.Context, params *GetRpcPgpArmorHeadersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRpcPgpArmorHeadersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcPgpArmorHeadersWithBody(ctx context.Context, params *PostRpcPgpArmorHeadersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcPgpArmorHeadersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcPgpArmorHeaders(ctx context.Context, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcPgpArmorHeadersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcPgpArmorHeadersWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcPgpArmorHeadersRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcPgpArmorHeadersWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcPgpArmorHeadersRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRpcPgpKeyId(ctx context.Context, params *GetRpcPgpKeyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRpcPgpKeyIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcPgpKeyIdWithBody(ctx context.Context, params *PostRpcPgpKeyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcPgpKeyIdRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcPgpKeyId(ctx context.Context, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcPgpKeyIdRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcPgpKeyIdWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcPgpKeyIdRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcPgpKeyIdWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcPgpKeyIdRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRpcArmorRequest generates requests for GetRpcArmor
func NewGetRpcArmorRequest(server string, params *GetRpcArmorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/armor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "", runtime.ParamLocationQuery, params.Empty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRpcArmorRequest calls the generic PostRpcArmor builder with application/json body
func NewPostRpcArmorRequest(server string, params *PostRpcArmorParams, body PostRpcArmorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcArmorRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRpcArmorRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostRpcArmor builder with application/vnd.pgrst.object+json body
func NewPostRpcArmorRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostRpcArmorParams, body PostRpcArmorApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcArmorRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostRpcArmorRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostRpcArmor builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostRpcArmorRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostRpcArmorParams, body PostRpcArmorApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcArmorRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostRpcArmorRequestWithBody generates requests for PostRpcArmor with any type of body
func NewPostRpcArmorRequestWithBody(server string, params *PostRpcArmorParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/armor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetRpcDearmorRequest generates requests for GetRpcDearmor
func NewGetRpcDearmorRequest(server string, params *GetRpcDearmorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/dearmor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "", runtime.ParamLocationQuery, params.Empty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRpcDearmorRequest calls the generic PostRpcDearmor builder with application/json body
func NewPostRpcDearmorRequest(server string, params *PostRpcDearmorParams, body PostRpcDearmorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcDearmorRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRpcDearmorRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostRpcDearmor builder with application/vnd.pgrst.object+json body
func NewPostRpcDearmorRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostRpcDearmorParams, body PostRpcDearmorApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcDearmorRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostRpcDearmorRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostRpcDearmor builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostRpcDearmorRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostRpcDearmorParams, body PostRpcDearmorApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcDearmorRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostRpcDearmorRequestWithBody generates requests for PostRpcDearmor with any type of body
func NewPostRpcDearmorRequestWithBody(server string, params *PostRpcDearmorParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/dearmor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetRpcGenRandomUuidRequest generates requests for GetRpcGenRandomUuid
func NewGetRpcGenRandomUuidRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/gen_random_uuid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRpcGenRandomUuidRequest calls the generic PostRpcGenRandomUuid builder with application/json body
func NewPostRpcGenRandomUuidRequest(server string, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcGenRandomUuidRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRpcGenRandomUuidRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostRpcGenRandomUuid builder with application/vnd.pgrst.object+json body
func NewPostRpcGenRandomUuidRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcGenRandomUuidRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostRpcGenRandomUuidRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostRpcGenRandomUuid builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostRpcGenRandomUuidRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcGenRandomUuidRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostRpcGenRandomUuidRequestWithBody generates requests for PostRpcGenRandomUuid with any type of body
func NewPostRpcGenRandomUuidRequestWithBody(server string, params *PostRpcGenRandomUuidParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/gen_random_uuid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetRpcGenSaltRequest generates requests for GetRpcGenSalt
func NewGetRpcGenSaltRequest(server string, params *GetRpcGenSaltParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/gen_salt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "", runtime.ParamLocationQuery, params.Empty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRpcGenSaltRequest calls the generic PostRpcGenSalt builder with application/json body
func NewPostRpcGenSaltRequest(server string, params *PostRpcGenSaltParams, body PostRpcGenSaltJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcGenSaltRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRpcGenSaltRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostRpcGenSalt builder with application/vnd.pgrst.object+json body
func NewPostRpcGenSaltRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostRpcGenSaltParams, body PostRpcGenSaltApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcGenSaltRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostRpcGenSaltRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostRpcGenSalt builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostRpcGenSaltRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostRpcGenSaltParams, body PostRpcGenSaltApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcGenSaltRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostRpcGenSaltRequestWithBody generates requests for PostRpcGenSalt with any type of body
func NewPostRpcGenSaltRequestWithBody(server string, params *PostRpcGenSaltParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/gen_salt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetRpcPgpArmorHeadersRequest generates requests for GetRpcPgpArmorHeaders
func NewGetRpcPgpArmorHeadersRequest(server string, params *GetRpcPgpArmorHeadersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/pgp_armor_headers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "", runtime.ParamLocationQuery, params.Empty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRpcPgpArmorHeadersRequest calls the generic PostRpcPgpArmorHeaders builder with application/json body
func NewPostRpcPgpArmorHeadersRequest(server string, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcPgpArmorHeadersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRpcPgpArmorHeadersRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostRpcPgpArmorHeaders builder with application/vnd.pgrst.object+json body
func NewPostRpcPgpArmorHeadersRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcPgpArmorHeadersRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostRpcPgpArmorHeadersRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostRpcPgpArmorHeaders builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostRpcPgpArmorHeadersRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcPgpArmorHeadersRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostRpcPgpArmorHeadersRequestWithBody generates requests for PostRpcPgpArmorHeaders with any type of body
func NewPostRpcPgpArmorHeadersRequestWithBody(server string, params *PostRpcPgpArmorHeadersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/pgp_armor_headers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetRpcPgpKeyIdRequest generates requests for GetRpcPgpKeyId
func NewGetRpcPgpKeyIdRequest(server string, params *GetRpcPgpKeyIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/pgp_key_id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "", runtime.ParamLocationQuery, params.Empty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRpcPgpKeyIdRequest calls the generic PostRpcPgpKeyId builder with application/json body
func NewPostRpcPgpKeyIdRequest(server string, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcPgpKeyIdRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRpcPgpKeyIdRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostRpcPgpKeyId builder with application/vnd.pgrst.object+json body
func NewPostRpcPgpKeyIdRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcPgpKeyIdRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostRpcPgpKeyIdRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostRpcPgpKeyId builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostRpcPgpKeyIdRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcPgpKeyIdRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostRpcPgpKeyIdRequestWithBody generates requests for PostRpcPgpKeyId with any type of body
func NewPostRpcPgpKeyIdRequestWithBody(server string, params *PostRpcPgpKeyIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/pgp_key_id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWithResponse request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// GetRpcArmorWithResponse request
	GetRpcArmorWithResponse(ctx context.Context, params *GetRpcArmorParams, reqEditors ...RequestEditorFn) (*GetRpcArmorResponse, error)

	// PostRpcArmorWithBodyWithResponse request with any body
	PostRpcArmorWithBodyWithResponse(ctx context.Context, params *PostRpcArmorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcArmorResponse, error)

	PostRpcArmorWithResponse(ctx context.Context, params *PostRpcArmorParams, body PostRpcArmorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcArmorResponse, error)

	PostRpcArmorWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcArmorParams, body PostRpcArmorApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcArmorResponse, error)

	PostRpcArmorWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcArmorParams, body PostRpcArmorApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcArmorResponse, error)

	// GetRpcDearmorWithResponse request
	GetRpcDearmorWithResponse(ctx context.Context, params *GetRpcDearmorParams, reqEditors ...RequestEditorFn) (*GetRpcDearmorResponse, error)

	// PostRpcDearmorWithBodyWithResponse request with any body
	PostRpcDearmorWithBodyWithResponse(ctx context.Context, params *PostRpcDearmorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcDearmorResponse, error)

	PostRpcDearmorWithResponse(ctx context.Context, params *PostRpcDearmorParams, body PostRpcDearmorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcDearmorResponse, error)

	PostRpcDearmorWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcDearmorParams, body PostRpcDearmorApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcDearmorResponse, error)

	PostRpcDearmorWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcDearmorParams, body PostRpcDearmorApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcDearmorResponse, error)

	// GetRpcGenRandomUuidWithResponse request
	GetRpcGenRandomUuidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRpcGenRandomUuidResponse, error)

	// PostRpcGenRandomUuidWithBodyWithResponse request with any body
	PostRpcGenRandomUuidWithBodyWithResponse(ctx context.Context, params *PostRpcGenRandomUuidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcGenRandomUuidResponse, error)

	PostRpcGenRandomUuidWithResponse(ctx context.Context, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcGenRandomUuidResponse, error)

	PostRpcGenRandomUuidWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcGenRandomUuidResponse, error)

	PostRpcGenRandomUuidWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcGenRandomUuidResponse, error)

	// GetRpcGenSaltWithResponse request
	GetRpcGenSaltWithResponse(ctx context.Context, params *GetRpcGenSaltParams, reqEditors ...RequestEditorFn) (*GetRpcGenSaltResponse, error)

	// PostRpcGenSaltWithBodyWithResponse request with any body
	PostRpcGenSaltWithBodyWithResponse(ctx context.Context, params *PostRpcGenSaltParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcGenSaltResponse, error)

	PostRpcGenSaltWithResponse(ctx context.Context, params *PostRpcGenSaltParams, body PostRpcGenSaltJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcGenSaltResponse, error)

	PostRpcGenSaltWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcGenSaltParams, body PostRpcGenSaltApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcGenSaltResponse, error)

	PostRpcGenSaltWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcGenSaltParams, body PostRpcGenSaltApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcGenSaltResponse, error)

	// GetRpcPgpArmorHeadersWithResponse request
	GetRpcPgpArmorHeadersWithResponse(ctx context.Context, params *GetRpcPgpArmorHeadersParams, reqEditors ...RequestEditorFn) (*GetRpcPgpArmorHeadersResponse, error)

	// PostRpcPgpArmorHeadersWithBodyWithResponse request with any body
	PostRpcPgpArmorHeadersWithBodyWithResponse(ctx context.Context, params *PostRpcPgpArmorHeadersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcPgpArmorHeadersResponse, error)

	PostRpcPgpArmorHeadersWithResponse(ctx context.Context, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcPgpArmorHeadersResponse, error)

	PostRpcPgpArmorHeadersWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcPgpArmorHeadersResponse, error)

	PostRpcPgpArmorHeadersWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcPgpArmorHeadersResponse, error)

	// GetRpcPgpKeyIdWithResponse request
	GetRpcPgpKeyIdWithResponse(ctx context.Context, params *GetRpcPgpKeyIdParams, reqEditors ...RequestEditorFn) (*GetRpcPgpKeyIdResponse, error)

	// PostRpcPgpKeyIdWithBodyWithResponse request with any body
	PostRpcPgpKeyIdWithBodyWithResponse(ctx context.Context, params *PostRpcPgpKeyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcPgpKeyIdResponse, error)

	PostRpcPgpKeyIdWithResponse(ctx context.Context, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcPgpKeyIdResponse, error)

	PostRpcPgpKeyIdWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcPgpKeyIdResponse, error)

	PostRpcPgpKeyIdWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcPgpKeyIdResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRpcArmorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRpcArmorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRpcArmorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRpcArmorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRpcArmorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRpcArmorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRpcDearmorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRpcDearmorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRpcDearmorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRpcDearmorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRpcDearmorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRpcDearmorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRpcGenRandomUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRpcGenRandomUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRpcGenRandomUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRpcGenRandomUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRpcGenRandomUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRpcGenRandomUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRpcGenSaltResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRpcGenSaltResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRpcGenSaltResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRpcGenSaltResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRpcGenSaltResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRpcGenSaltResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRpcPgpArmorHeadersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRpcPgpArmorHeadersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRpcPgpArmorHeadersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRpcPgpArmorHeadersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRpcPgpArmorHeadersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRpcPgpArmorHeadersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRpcPgpKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRpcPgpKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRpcPgpKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRpcPgpKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRpcPgpKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRpcPgpKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// GetRpcArmorWithResponse request returning *GetRpcArmorResponse
func (c *ClientWithResponses) GetRpcArmorWithResponse(ctx context.Context, params *GetRpcArmorParams, reqEditors ...RequestEditorFn) (*GetRpcArmorResponse, error) {
	rsp, err := c.GetRpcArmor(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRpcArmorResponse(rsp)
}

// PostRpcArmorWithBodyWithResponse request with arbitrary body returning *PostRpcArmorResponse
func (c *ClientWithResponses) PostRpcArmorWithBodyWithResponse(ctx context.Context, params *PostRpcArmorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcArmorResponse, error) {
	rsp, err := c.PostRpcArmorWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcArmorResponse(rsp)
}

func (c *ClientWithResponses) PostRpcArmorWithResponse(ctx context.Context, params *PostRpcArmorParams, body PostRpcArmorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcArmorResponse, error) {
	rsp, err := c.PostRpcArmor(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcArmorResponse(rsp)
}

func (c *ClientWithResponses) PostRpcArmorWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcArmorParams, body PostRpcArmorApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcArmorResponse, error) {
	rsp, err := c.PostRpcArmorWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcArmorResponse(rsp)
}

func (c *ClientWithResponses) PostRpcArmorWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcArmorParams, body PostRpcArmorApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcArmorResponse, error) {
	rsp, err := c.PostRpcArmorWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcArmorResponse(rsp)
}

// GetRpcDearmorWithResponse request returning *GetRpcDearmorResponse
func (c *ClientWithResponses) GetRpcDearmorWithResponse(ctx context.Context, params *GetRpcDearmorParams, reqEditors ...RequestEditorFn) (*GetRpcDearmorResponse, error) {
	rsp, err := c.GetRpcDearmor(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRpcDearmorResponse(rsp)
}

// PostRpcDearmorWithBodyWithResponse request with arbitrary body returning *PostRpcDearmorResponse
func (c *ClientWithResponses) PostRpcDearmorWithBodyWithResponse(ctx context.Context, params *PostRpcDearmorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcDearmorResponse, error) {
	rsp, err := c.PostRpcDearmorWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcDearmorResponse(rsp)
}

func (c *ClientWithResponses) PostRpcDearmorWithResponse(ctx context.Context, params *PostRpcDearmorParams, body PostRpcDearmorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcDearmorResponse, error) {
	rsp, err := c.PostRpcDearmor(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcDearmorResponse(rsp)
}

func (c *ClientWithResponses) PostRpcDearmorWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcDearmorParams, body PostRpcDearmorApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcDearmorResponse, error) {
	rsp, err := c.PostRpcDearmorWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcDearmorResponse(rsp)
}

func (c *ClientWithResponses) PostRpcDearmorWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcDearmorParams, body PostRpcDearmorApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcDearmorResponse, error) {
	rsp, err := c.PostRpcDearmorWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcDearmorResponse(rsp)
}

// GetRpcGenRandomUuidWithResponse request returning *GetRpcGenRandomUuidResponse
func (c *ClientWithResponses) GetRpcGenRandomUuidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRpcGenRandomUuidResponse, error) {
	rsp, err := c.GetRpcGenRandomUuid(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRpcGenRandomUuidResponse(rsp)
}

// PostRpcGenRandomUuidWithBodyWithResponse request with arbitrary body returning *PostRpcGenRandomUuidResponse
func (c *ClientWithResponses) PostRpcGenRandomUuidWithBodyWithResponse(ctx context.Context, params *PostRpcGenRandomUuidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcGenRandomUuidResponse, error) {
	rsp, err := c.PostRpcGenRandomUuidWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcGenRandomUuidResponse(rsp)
}

func (c *ClientWithResponses) PostRpcGenRandomUuidWithResponse(ctx context.Context, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcGenRandomUuidResponse, error) {
	rsp, err := c.PostRpcGenRandomUuid(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcGenRandomUuidResponse(rsp)
}

func (c *ClientWithResponses) PostRpcGenRandomUuidWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcGenRandomUuidResponse, error) {
	rsp, err := c.PostRpcGenRandomUuidWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcGenRandomUuidResponse(rsp)
}

func (c *ClientWithResponses) PostRpcGenRandomUuidWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcGenRandomUuidParams, body PostRpcGenRandomUuidApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcGenRandomUuidResponse, error) {
	rsp, err := c.PostRpcGenRandomUuidWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcGenRandomUuidResponse(rsp)
}

// GetRpcGenSaltWithResponse request returning *GetRpcGenSaltResponse
func (c *ClientWithResponses) GetRpcGenSaltWithResponse(ctx context.Context, params *GetRpcGenSaltParams, reqEditors ...RequestEditorFn) (*GetRpcGenSaltResponse, error) {
	rsp, err := c.GetRpcGenSalt(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRpcGenSaltResponse(rsp)
}

// PostRpcGenSaltWithBodyWithResponse request with arbitrary body returning *PostRpcGenSaltResponse
func (c *ClientWithResponses) PostRpcGenSaltWithBodyWithResponse(ctx context.Context, params *PostRpcGenSaltParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcGenSaltResponse, error) {
	rsp, err := c.PostRpcGenSaltWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcGenSaltResponse(rsp)
}

func (c *ClientWithResponses) PostRpcGenSaltWithResponse(ctx context.Context, params *PostRpcGenSaltParams, body PostRpcGenSaltJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcGenSaltResponse, error) {
	rsp, err := c.PostRpcGenSalt(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcGenSaltResponse(rsp)
}

func (c *ClientWithResponses) PostRpcGenSaltWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcGenSaltParams, body PostRpcGenSaltApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcGenSaltResponse, error) {
	rsp, err := c.PostRpcGenSaltWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcGenSaltResponse(rsp)
}

func (c *ClientWithResponses) PostRpcGenSaltWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcGenSaltParams, body PostRpcGenSaltApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcGenSaltResponse, error) {
	rsp, err := c.PostRpcGenSaltWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcGenSaltResponse(rsp)
}

// GetRpcPgpArmorHeadersWithResponse request returning *GetRpcPgpArmorHeadersResponse
func (c *ClientWithResponses) GetRpcPgpArmorHeadersWithResponse(ctx context.Context, params *GetRpcPgpArmorHeadersParams, reqEditors ...RequestEditorFn) (*GetRpcPgpArmorHeadersResponse, error) {
	rsp, err := c.GetRpcPgpArmorHeaders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRpcPgpArmorHeadersResponse(rsp)
}

// PostRpcPgpArmorHeadersWithBodyWithResponse request with arbitrary body returning *PostRpcPgpArmorHeadersResponse
func (c *ClientWithResponses) PostRpcPgpArmorHeadersWithBodyWithResponse(ctx context.Context, params *PostRpcPgpArmorHeadersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcPgpArmorHeadersResponse, error) {
	rsp, err := c.PostRpcPgpArmorHeadersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcPgpArmorHeadersResponse(rsp)
}

func (c *ClientWithResponses) PostRpcPgpArmorHeadersWithResponse(ctx context.Context, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcPgpArmorHeadersResponse, error) {
	rsp, err := c.PostRpcPgpArmorHeaders(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcPgpArmorHeadersResponse(rsp)
}

func (c *ClientWithResponses) PostRpcPgpArmorHeadersWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcPgpArmorHeadersResponse, error) {
	rsp, err := c.PostRpcPgpArmorHeadersWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcPgpArmorHeadersResponse(rsp)
}

func (c *ClientWithResponses) PostRpcPgpArmorHeadersWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcPgpArmorHeadersParams, body PostRpcPgpArmorHeadersApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcPgpArmorHeadersResponse, error) {
	rsp, err := c.PostRpcPgpArmorHeadersWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcPgpArmorHeadersResponse(rsp)
}

// GetRpcPgpKeyIdWithResponse request returning *GetRpcPgpKeyIdResponse
func (c *ClientWithResponses) GetRpcPgpKeyIdWithResponse(ctx context.Context, params *GetRpcPgpKeyIdParams, reqEditors ...RequestEditorFn) (*GetRpcPgpKeyIdResponse, error) {
	rsp, err := c.GetRpcPgpKeyId(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRpcPgpKeyIdResponse(rsp)
}

// PostRpcPgpKeyIdWithBodyWithResponse request with arbitrary body returning *PostRpcPgpKeyIdResponse
func (c *ClientWithResponses) PostRpcPgpKeyIdWithBodyWithResponse(ctx context.Context, params *PostRpcPgpKeyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcPgpKeyIdResponse, error) {
	rsp, err := c.PostRpcPgpKeyIdWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcPgpKeyIdResponse(rsp)
}

func (c *ClientWithResponses) PostRpcPgpKeyIdWithResponse(ctx context.Context, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcPgpKeyIdResponse, error) {
	rsp, err := c.PostRpcPgpKeyId(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcPgpKeyIdResponse(rsp)
}

func (c *ClientWithResponses) PostRpcPgpKeyIdWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcPgpKeyIdResponse, error) {
	rsp, err := c.PostRpcPgpKeyIdWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcPgpKeyIdResponse(rsp)
}

func (c *ClientWithResponses) PostRpcPgpKeyIdWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcPgpKeyIdParams, body PostRpcPgpKeyIdApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcPgpKeyIdResponse, error) {
	rsp, err := c.PostRpcPgpKeyIdWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcPgpKeyIdResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRpcArmorResponse parses an HTTP response from a GetRpcArmorWithResponse call
func ParseGetRpcArmorResponse(rsp *http.Response) (*GetRpcArmorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRpcArmorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRpcArmorResponse parses an HTTP response from a PostRpcArmorWithResponse call
func ParsePostRpcArmorResponse(rsp *http.Response) (*PostRpcArmorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRpcArmorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRpcDearmorResponse parses an HTTP response from a GetRpcDearmorWithResponse call
func ParseGetRpcDearmorResponse(rsp *http.Response) (*GetRpcDearmorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRpcDearmorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRpcDearmorResponse parses an HTTP response from a PostRpcDearmorWithResponse call
func ParsePostRpcDearmorResponse(rsp *http.Response) (*PostRpcDearmorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRpcDearmorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRpcGenRandomUuidResponse parses an HTTP response from a GetRpcGenRandomUuidWithResponse call
func ParseGetRpcGenRandomUuidResponse(rsp *http.Response) (*GetRpcGenRandomUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRpcGenRandomUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRpcGenRandomUuidResponse parses an HTTP response from a PostRpcGenRandomUuidWithResponse call
func ParsePostRpcGenRandomUuidResponse(rsp *http.Response) (*PostRpcGenRandomUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRpcGenRandomUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRpcGenSaltResponse parses an HTTP response from a GetRpcGenSaltWithResponse call
func ParseGetRpcGenSaltResponse(rsp *http.Response) (*GetRpcGenSaltResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRpcGenSaltResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRpcGenSaltResponse parses an HTTP response from a PostRpcGenSaltWithResponse call
func ParsePostRpcGenSaltResponse(rsp *http.Response) (*PostRpcGenSaltResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRpcGenSaltResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRpcPgpArmorHeadersResponse parses an HTTP response from a GetRpcPgpArmorHeadersWithResponse call
func ParseGetRpcPgpArmorHeadersResponse(rsp *http.Response) (*GetRpcPgpArmorHeadersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRpcPgpArmorHeadersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRpcPgpArmorHeadersResponse parses an HTTP response from a PostRpcPgpArmorHeadersWithResponse call
func ParsePostRpcPgpArmorHeadersResponse(rsp *http.Response) (*PostRpcPgpArmorHeadersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRpcPgpArmorHeadersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRpcPgpKeyIdResponse parses an HTTP response from a GetRpcPgpKeyIdWithResponse call
func ParseGetRpcPgpKeyIdResponse(rsp *http.Response) (*GetRpcPgpKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRpcPgpKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRpcPgpKeyIdResponse parses an HTTP response from a PostRpcPgpKeyIdWithResponse call
func ParsePostRpcPgpKeyIdResponse(rsp *http.Response) (*PostRpcPgpKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRpcPgpKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTY/iRhD9K1YlhxnFoR02J0d7mGiizWgPQbPJaYRQT7sw3tjdvdVttAj5v0fVhsUM",
	"EDNAJhz4cFPueq9eUa+9BGUqazRq7yBdgpUkK/RI7RXhFGnEa+E6Q6eosL4wGlIYhV9RK4QYCl6ZocyQ",
	"IAYtK/wWATE4NcNK8hao6wrSpzaRe+8KnZf4o3n+jMrDOAa/sHyn81ToHJqmiYHwS43O/2qyAgOMO8rD",
	"pzLao/b8VVpbFkoyMvHZMbxlJ6klY5H86nZ+TQ1V0kMKzwuPEnbztmkLwozRdpCtoHJEN+lcZwObk/OD",
	"NuCH60Hxi67L0r3nTa3lnd4AlMevXig3f4NkWyGeamzi0CHDS7UIc/nfO+S/BHFqg5yB6dX9cXKu3fbg",
	"JfzqkbQs743aN9mM8/njb5/+jO6NqivUPlQPYqip5DnnvXWpEJbjCLmalAvUYv7TcJAIaYvBzFclNDwX",
	"p4YT+MKXLXKpM0lZZOvnslDRinwMcyTXZuc9BsPoRv6MSTKd3vI2xqKWtoAU3g2SQQIxWOlnAbrgtxxD",
	"j3P5AtSHDFL4gFwyQmeNdm1Nh0myS/ePj6GSrq4qSQtesKjvRg9RJyy68bPCRdmqHresheQx/AQP2pNx",
	"FlXYbsxbCbJKSKoM/Ru4R6vuQky85TtPy9ZNvtRIC3gpX9dMeqfH+BX013RuyKrbqAU/bmJgkXfhc4sc",
	"xv894RRS+E5s3FVsQsSWr7Yg1xa34FT7bt9yQREssDmb3VqqDI8R634VdbZcB/7Mp6u1xt+r10EKb6LY",
	"8AzJNhTXouWoJyR1ZqpJXRdZj3gfUD+G4L849mQYL5P2Vvxl3svW/Wh/P9ubL+2rx3riMcedi2nZbS0n",
	"S9/fU5846voGwjcCx/Tnfg5XPxE6HNe62dxOwpiYtI9irkfAUW6Dg/2+ir4+IXcZ9SraS+rqld1Huivx",
	"37iY9A78UW4/4uIhu8bTVYfEMXIe4HHtp6wtluGEjTRfg988SaRClEbJcmacT98lSQLNuPknAAD///mR",
	"0fSZEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

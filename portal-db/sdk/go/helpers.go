// Code generated by helper generation. DO NOT EDIT manually.
// This file contains helper types and methods for working with RPC function responses
// that return custom types not automatically extracted by the OpenAPI generator.

package portaldb

import (
	"encoding/json"
	"fmt"
)

// ============================================================================
// get_portal_user Response Helpers
// ============================================================================

// AccountPermission represents the permissions and metadata for a single account
// that a user has access to.
type AccountPermission struct {
	RoleName          string   `json:"role_name"`
	UserJoinedAccount bool     `json:"user_joined_account"`
	AccountName       string   `json:"account_name"`
	Permissions       []string `json:"permissions"`
}

// GetPortalUserResult represents a single row returned from the
// get_portal_user RPC function.
type GetPortalUserResult struct {
	PortalUserID       string                       `json:"portal_user_id"`
	PortalUserEmail    string                       `json:"portal_user_email"`
	SignedUp           bool                         `json:"signed_up"`
	AccountPermissions map[string]AccountPermission `json:"account_permissions"`
}

// ParseGetPortalUserResponse unmarshals the JSON response body from
// the get_portal_user RPC function into a GetPortalUserResult.
//
// PostgREST always returns function results as JSON arrays, even when
// there's only one result. This helper extracts the first (and only)
// element from the array.
//
// Example usage:
//
//	resp, err := client.PostRpcGetPortalUserWithResponse(ctx, params, body)
//	if err != nil {
//	    return err
//	}
//
//	result, err := ParseGetPortalUserResponse(resp.Body)
//	if err != nil {
//	    return err
//	}
//
//	fmt.Printf("User ID: %s, Email: %s\n", result.PortalUserID, result.PortalUserEmail)
//	for accountID, perms := range result.AccountPermissions {
//	    fmt.Printf("  Account %s: Role=%s, Permissions=%v\n",
//	        accountID, perms.RoleName, perms.Permissions)
//	}
func ParseGetPortalUserResponse(body []byte) (*GetPortalUserResult, error) {
	var results []GetPortalUserResult
	if err := json.Unmarshal(body, &results); err != nil {
		return nil, fmt.Errorf("failed to unmarshal get_portal_user response: %w", err)
	}

	if len(results) == 0 {
		return nil, fmt.Errorf("get_portal_user returned no results")
	}

	return &results[0], nil
}

// ParseGetPortalUserResponse is a convenience method on PostRpcGetPortalUserResponse
// that unmarshals the response body into a GetPortalUserResult.
func (r PostRpcGetPortalUserResponse) ParseGetPortalUserResponse() (*GetPortalUserResult, error) {
	return ParseGetPortalUserResponse(r.Body)
}

// ============================================================================
// admin_create_portal_user Response Helpers
// ============================================================================

// AdminCreatePortalUserResult represents a single row returned from the
// admin_create_portal_user RPC function.
// AdminCreatePortalUserResult defines the structure of the response from admin_create_portal_user RPC.
// Note: The database function returns columns with "out_" prefix to avoid naming conflicts.
type AdminCreatePortalUserResult struct {
	PortalUserID    string `json:"out_portal_user_id"`
	PortalUserEmail string `json:"out_portal_user_email"`
	PortalAccountID string `json:"out_portal_account_id"`
}

// ParseAdminCreatePortalUserResponse unmarshals the JSON response body from
// the admin_create_portal_user RPC function into an AdminCreatePortalUserResult.
//
// PostgREST always returns function results as JSON arrays, even when
// there's only one result. This helper extracts the first (and only)
// element from the array.
//
// Example usage:
//
//	resp, err := client.PostRpcAdminCreatePortalUserWithResponse(ctx, params, body)
//	if err != nil {
//	    return err
//	}
//
//	result, err := ParseAdminCreatePortalUserResponse(resp.Body)
//	if err != nil {
//	    return err
//	}
//
//	fmt.Printf("Created User ID: %s, Account ID: %s\n",
//	    result.PortalUserID, result.PortalAccountID)
func ParseAdminCreatePortalUserResponse(body []byte) (*AdminCreatePortalUserResult, error) {
	var results []AdminCreatePortalUserResult
	if err := json.Unmarshal(body, &results); err != nil {
		return nil, fmt.Errorf("failed to unmarshal admin_create_portal_user response: %w", err)
	}

	if len(results) == 0 {
		return nil, fmt.Errorf("admin_create_portal_user returned no results")
	}

	return &results[0], nil
}

// ParseAdminCreatePortalUserResponse is a convenience method on PostRpcAdminCreatePortalUserResponse
// that unmarshals the response body into an AdminCreatePortalUserResult.
func (r PostRpcAdminCreatePortalUserResponse) ParseAdminCreatePortalUserResponse() (*AdminCreatePortalUserResult, error) {
	return ParseAdminCreatePortalUserResponse(r.Body)
}

/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 12.0.2 (a4e00ff)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Gateways,
} from '../models/index';
import {
    GatewaysFromJSON,
    GatewaysToJSON,
} from '../models/index';

export interface GatewaysDeleteRequest {
    gatewayAddress?: string;
    stakeAmount?: string;
    stakeDenom?: string;
    networkId?: string;
    gatewayPrivateKeyHex?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: GatewaysDeletePreferEnum;
}

export interface GatewaysGetRequest {
    gatewayAddress?: string;
    stakeAmount?: string;
    stakeDenom?: string;
    networkId?: string;
    gatewayPrivateKeyHex?: string;
    createdAt?: string;
    updatedAt?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: GatewaysGetPreferEnum;
}

export interface GatewaysPatchRequest {
    gatewayAddress?: string;
    stakeAmount?: string;
    stakeDenom?: string;
    networkId?: string;
    gatewayPrivateKeyHex?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: GatewaysPatchPreferEnum;
    gateways?: Gateways;
}

export interface GatewaysPostRequest {
    select?: string;
    prefer?: GatewaysPostPreferEnum;
    gateways?: Gateways;
}

/**
 * 
 */
export class GatewaysApi extends runtime.BaseAPI {

    /**
     * Onchain gateway information including stake and network details
     */
    async gatewaysDeleteRaw(requestParameters: GatewaysDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['gatewayAddress'] != null) {
            queryParameters['gateway_address'] = requestParameters['gatewayAddress'];
        }

        if (requestParameters['stakeAmount'] != null) {
            queryParameters['stake_amount'] = requestParameters['stakeAmount'];
        }

        if (requestParameters['stakeDenom'] != null) {
            queryParameters['stake_denom'] = requestParameters['stakeDenom'];
        }

        if (requestParameters['networkId'] != null) {
            queryParameters['network_id'] = requestParameters['networkId'];
        }

        if (requestParameters['gatewayPrivateKeyHex'] != null) {
            queryParameters['gateway_private_key_hex'] = requestParameters['gatewayPrivateKeyHex'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/gateways`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Onchain gateway information including stake and network details
     */
    async gatewaysDelete(requestParameters: GatewaysDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gatewaysDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Onchain gateway information including stake and network details
     */
    async gatewaysGetRaw(requestParameters: GatewaysGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Gateways>>> {
        const queryParameters: any = {};

        if (requestParameters['gatewayAddress'] != null) {
            queryParameters['gateway_address'] = requestParameters['gatewayAddress'];
        }

        if (requestParameters['stakeAmount'] != null) {
            queryParameters['stake_amount'] = requestParameters['stakeAmount'];
        }

        if (requestParameters['stakeDenom'] != null) {
            queryParameters['stake_denom'] = requestParameters['stakeDenom'];
        }

        if (requestParameters['networkId'] != null) {
            queryParameters['network_id'] = requestParameters['networkId'];
        }

        if (requestParameters['gatewayPrivateKeyHex'] != null) {
            queryParameters['gateway_private_key_hex'] = requestParameters['gatewayPrivateKeyHex'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/gateways`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GatewaysFromJSON));
    }

    /**
     * Onchain gateway information including stake and network details
     */
    async gatewaysGet(requestParameters: GatewaysGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Gateways> | null | undefined > {
        const response = await this.gatewaysGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Onchain gateway information including stake and network details
     */
    async gatewaysPatchRaw(requestParameters: GatewaysPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['gatewayAddress'] != null) {
            queryParameters['gateway_address'] = requestParameters['gatewayAddress'];
        }

        if (requestParameters['stakeAmount'] != null) {
            queryParameters['stake_amount'] = requestParameters['stakeAmount'];
        }

        if (requestParameters['stakeDenom'] != null) {
            queryParameters['stake_denom'] = requestParameters['stakeDenom'];
        }

        if (requestParameters['networkId'] != null) {
            queryParameters['network_id'] = requestParameters['networkId'];
        }

        if (requestParameters['gatewayPrivateKeyHex'] != null) {
            queryParameters['gateway_private_key_hex'] = requestParameters['gatewayPrivateKeyHex'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/gateways`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GatewaysToJSON(requestParameters['gateways']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Onchain gateway information including stake and network details
     */
    async gatewaysPatch(requestParameters: GatewaysPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gatewaysPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Onchain gateway information including stake and network details
     */
    async gatewaysPostRaw(requestParameters: GatewaysPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/gateways`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GatewaysToJSON(requestParameters['gateways']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Onchain gateway information including stake and network details
     */
    async gatewaysPost(requestParameters: GatewaysPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gatewaysPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GatewaysDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type GatewaysDeletePreferEnum = typeof GatewaysDeletePreferEnum[keyof typeof GatewaysDeletePreferEnum];
/**
 * @export
 */
export const GatewaysGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type GatewaysGetPreferEnum = typeof GatewaysGetPreferEnum[keyof typeof GatewaysGetPreferEnum];
/**
 * @export
 */
export const GatewaysPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type GatewaysPatchPreferEnum = typeof GatewaysPatchPreferEnum[keyof typeof GatewaysPatchPreferEnum];
/**
 * @export
 */
export const GatewaysPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type GatewaysPostPreferEnum = typeof GatewaysPostPreferEnum[keyof typeof GatewaysPostPreferEnum];

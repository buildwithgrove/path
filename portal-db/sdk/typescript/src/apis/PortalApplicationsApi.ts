/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 12.0.2 (a4e00ff)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PortalApplications,
} from '../models/index';
import {
    PortalApplicationsFromJSON,
    PortalApplicationsToJSON,
} from '../models/index';

export interface PortalApplicationsDeleteRequest {
    portalApplicationId?: string;
    portalAccountId?: string;
    portalApplicationName?: string;
    emoji?: string;
    portalApplicationUserLimit?: number;
    portalApplicationUserLimitInterval?: string;
    portalApplicationUserLimitRps?: number;
    portalApplicationDescription?: string;
    favoriteServiceIds?: string;
    secretKeyHash?: string;
    secretKeyRequired?: boolean;
    deletedAt?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: PortalApplicationsDeletePreferEnum;
}

export interface PortalApplicationsGetRequest {
    portalApplicationId?: string;
    portalAccountId?: string;
    portalApplicationName?: string;
    emoji?: string;
    portalApplicationUserLimit?: number;
    portalApplicationUserLimitInterval?: string;
    portalApplicationUserLimitRps?: number;
    portalApplicationDescription?: string;
    favoriteServiceIds?: string;
    secretKeyHash?: string;
    secretKeyRequired?: boolean;
    deletedAt?: string;
    createdAt?: string;
    updatedAt?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: PortalApplicationsGetPreferEnum;
}

export interface PortalApplicationsPatchRequest {
    portalApplicationId?: string;
    portalAccountId?: string;
    portalApplicationName?: string;
    emoji?: string;
    portalApplicationUserLimit?: number;
    portalApplicationUserLimitInterval?: string;
    portalApplicationUserLimitRps?: number;
    portalApplicationDescription?: string;
    favoriteServiceIds?: string;
    secretKeyHash?: string;
    secretKeyRequired?: boolean;
    deletedAt?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: PortalApplicationsPatchPreferEnum;
    portalApplications?: PortalApplications;
}

export interface PortalApplicationsPostRequest {
    select?: string;
    prefer?: PortalApplicationsPostPreferEnum;
    portalApplications?: PortalApplications;
}

/**
 * 
 */
export class PortalApplicationsApi extends runtime.BaseAPI {

    /**
     * Applications created within portal accounts with their own rate limits and settings
     */
    async portalApplicationsDeleteRaw(requestParameters: PortalApplicationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['portalApplicationId'] != null) {
            queryParameters['portal_application_id'] = requestParameters['portalApplicationId'];
        }

        if (requestParameters['portalAccountId'] != null) {
            queryParameters['portal_account_id'] = requestParameters['portalAccountId'];
        }

        if (requestParameters['portalApplicationName'] != null) {
            queryParameters['portal_application_name'] = requestParameters['portalApplicationName'];
        }

        if (requestParameters['emoji'] != null) {
            queryParameters['emoji'] = requestParameters['emoji'];
        }

        if (requestParameters['portalApplicationUserLimit'] != null) {
            queryParameters['portal_application_user_limit'] = requestParameters['portalApplicationUserLimit'];
        }

        if (requestParameters['portalApplicationUserLimitInterval'] != null) {
            queryParameters['portal_application_user_limit_interval'] = requestParameters['portalApplicationUserLimitInterval'];
        }

        if (requestParameters['portalApplicationUserLimitRps'] != null) {
            queryParameters['portal_application_user_limit_rps'] = requestParameters['portalApplicationUserLimitRps'];
        }

        if (requestParameters['portalApplicationDescription'] != null) {
            queryParameters['portal_application_description'] = requestParameters['portalApplicationDescription'];
        }

        if (requestParameters['favoriteServiceIds'] != null) {
            queryParameters['favorite_service_ids'] = requestParameters['favoriteServiceIds'];
        }

        if (requestParameters['secretKeyHash'] != null) {
            queryParameters['secret_key_hash'] = requestParameters['secretKeyHash'];
        }

        if (requestParameters['secretKeyRequired'] != null) {
            queryParameters['secret_key_required'] = requestParameters['secretKeyRequired'];
        }

        if (requestParameters['deletedAt'] != null) {
            queryParameters['deleted_at'] = requestParameters['deletedAt'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_applications`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Applications created within portal accounts with their own rate limits and settings
     */
    async portalApplicationsDelete(requestParameters: PortalApplicationsDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalApplicationsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Applications created within portal accounts with their own rate limits and settings
     */
    async portalApplicationsGetRaw(requestParameters: PortalApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PortalApplications>>> {
        const queryParameters: any = {};

        if (requestParameters['portalApplicationId'] != null) {
            queryParameters['portal_application_id'] = requestParameters['portalApplicationId'];
        }

        if (requestParameters['portalAccountId'] != null) {
            queryParameters['portal_account_id'] = requestParameters['portalAccountId'];
        }

        if (requestParameters['portalApplicationName'] != null) {
            queryParameters['portal_application_name'] = requestParameters['portalApplicationName'];
        }

        if (requestParameters['emoji'] != null) {
            queryParameters['emoji'] = requestParameters['emoji'];
        }

        if (requestParameters['portalApplicationUserLimit'] != null) {
            queryParameters['portal_application_user_limit'] = requestParameters['portalApplicationUserLimit'];
        }

        if (requestParameters['portalApplicationUserLimitInterval'] != null) {
            queryParameters['portal_application_user_limit_interval'] = requestParameters['portalApplicationUserLimitInterval'];
        }

        if (requestParameters['portalApplicationUserLimitRps'] != null) {
            queryParameters['portal_application_user_limit_rps'] = requestParameters['portalApplicationUserLimitRps'];
        }

        if (requestParameters['portalApplicationDescription'] != null) {
            queryParameters['portal_application_description'] = requestParameters['portalApplicationDescription'];
        }

        if (requestParameters['favoriteServiceIds'] != null) {
            queryParameters['favorite_service_ids'] = requestParameters['favoriteServiceIds'];
        }

        if (requestParameters['secretKeyHash'] != null) {
            queryParameters['secret_key_hash'] = requestParameters['secretKeyHash'];
        }

        if (requestParameters['secretKeyRequired'] != null) {
            queryParameters['secret_key_required'] = requestParameters['secretKeyRequired'];
        }

        if (requestParameters['deletedAt'] != null) {
            queryParameters['deleted_at'] = requestParameters['deletedAt'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_applications`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PortalApplicationsFromJSON));
    }

    /**
     * Applications created within portal accounts with their own rate limits and settings
     */
    async portalApplicationsGet(requestParameters: PortalApplicationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PortalApplications> | null | undefined > {
        const response = await this.portalApplicationsGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Applications created within portal accounts with their own rate limits and settings
     */
    async portalApplicationsPatchRaw(requestParameters: PortalApplicationsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['portalApplicationId'] != null) {
            queryParameters['portal_application_id'] = requestParameters['portalApplicationId'];
        }

        if (requestParameters['portalAccountId'] != null) {
            queryParameters['portal_account_id'] = requestParameters['portalAccountId'];
        }

        if (requestParameters['portalApplicationName'] != null) {
            queryParameters['portal_application_name'] = requestParameters['portalApplicationName'];
        }

        if (requestParameters['emoji'] != null) {
            queryParameters['emoji'] = requestParameters['emoji'];
        }

        if (requestParameters['portalApplicationUserLimit'] != null) {
            queryParameters['portal_application_user_limit'] = requestParameters['portalApplicationUserLimit'];
        }

        if (requestParameters['portalApplicationUserLimitInterval'] != null) {
            queryParameters['portal_application_user_limit_interval'] = requestParameters['portalApplicationUserLimitInterval'];
        }

        if (requestParameters['portalApplicationUserLimitRps'] != null) {
            queryParameters['portal_application_user_limit_rps'] = requestParameters['portalApplicationUserLimitRps'];
        }

        if (requestParameters['portalApplicationDescription'] != null) {
            queryParameters['portal_application_description'] = requestParameters['portalApplicationDescription'];
        }

        if (requestParameters['favoriteServiceIds'] != null) {
            queryParameters['favorite_service_ids'] = requestParameters['favoriteServiceIds'];
        }

        if (requestParameters['secretKeyHash'] != null) {
            queryParameters['secret_key_hash'] = requestParameters['secretKeyHash'];
        }

        if (requestParameters['secretKeyRequired'] != null) {
            queryParameters['secret_key_required'] = requestParameters['secretKeyRequired'];
        }

        if (requestParameters['deletedAt'] != null) {
            queryParameters['deleted_at'] = requestParameters['deletedAt'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_applications`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PortalApplicationsToJSON(requestParameters['portalApplications']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Applications created within portal accounts with their own rate limits and settings
     */
    async portalApplicationsPatch(requestParameters: PortalApplicationsPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalApplicationsPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Applications created within portal accounts with their own rate limits and settings
     */
    async portalApplicationsPostRaw(requestParameters: PortalApplicationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_applications`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PortalApplicationsToJSON(requestParameters['portalApplications']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Applications created within portal accounts with their own rate limits and settings
     */
    async portalApplicationsPost(requestParameters: PortalApplicationsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalApplicationsPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const PortalApplicationsDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type PortalApplicationsDeletePreferEnum = typeof PortalApplicationsDeletePreferEnum[keyof typeof PortalApplicationsDeletePreferEnum];
/**
 * @export
 */
export const PortalApplicationsGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type PortalApplicationsGetPreferEnum = typeof PortalApplicationsGetPreferEnum[keyof typeof PortalApplicationsGetPreferEnum];
/**
 * @export
 */
export const PortalApplicationsPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type PortalApplicationsPatchPreferEnum = typeof PortalApplicationsPatchPreferEnum[keyof typeof PortalApplicationsPatchPreferEnum];
/**
 * @export
 */
export const PortalApplicationsPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type PortalApplicationsPostPreferEnum = typeof PortalApplicationsPostPreferEnum[keyof typeof PortalApplicationsPostPreferEnum];

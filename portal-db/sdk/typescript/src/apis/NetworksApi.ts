/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 12.0.2 (a4e00ff)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Networks,
} from '../models/index';
import {
    NetworksFromJSON,
    NetworksToJSON,
} from '../models/index';

export interface NetworksDeleteRequest {
    networkId?: string;
    prefer?: NetworksDeletePreferEnum;
}

export interface NetworksGetRequest {
    networkId?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: NetworksGetPreferEnum;
}

export interface NetworksPatchRequest {
    networkId?: string;
    prefer?: NetworksPatchPreferEnum;
    networks?: Networks;
}

export interface NetworksPostRequest {
    select?: string;
    prefer?: NetworksPostPreferEnum;
    networks?: Networks;
}

/**
 * 
 */
export class NetworksApi extends runtime.BaseAPI {

    /**
     * Supported blockchain networks (Pocket mainnet, testnet, etc.)
     */
    async networksDeleteRaw(requestParameters: NetworksDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['networkId'] != null) {
            queryParameters['network_id'] = requestParameters['networkId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/networks`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supported blockchain networks (Pocket mainnet, testnet, etc.)
     */
    async networksDelete(requestParameters: NetworksDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.networksDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Supported blockchain networks (Pocket mainnet, testnet, etc.)
     */
    async networksGetRaw(requestParameters: NetworksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Networks>>> {
        const queryParameters: any = {};

        if (requestParameters['networkId'] != null) {
            queryParameters['network_id'] = requestParameters['networkId'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/networks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NetworksFromJSON));
    }

    /**
     * Supported blockchain networks (Pocket mainnet, testnet, etc.)
     */
    async networksGet(requestParameters: NetworksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Networks> | null | undefined > {
        const response = await this.networksGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Supported blockchain networks (Pocket mainnet, testnet, etc.)
     */
    async networksPatchRaw(requestParameters: NetworksPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['networkId'] != null) {
            queryParameters['network_id'] = requestParameters['networkId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/networks`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: NetworksToJSON(requestParameters['networks']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supported blockchain networks (Pocket mainnet, testnet, etc.)
     */
    async networksPatch(requestParameters: NetworksPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.networksPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Supported blockchain networks (Pocket mainnet, testnet, etc.)
     */
    async networksPostRaw(requestParameters: NetworksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/networks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NetworksToJSON(requestParameters['networks']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supported blockchain networks (Pocket mainnet, testnet, etc.)
     */
    async networksPost(requestParameters: NetworksPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.networksPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const NetworksDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type NetworksDeletePreferEnum = typeof NetworksDeletePreferEnum[keyof typeof NetworksDeletePreferEnum];
/**
 * @export
 */
export const NetworksGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type NetworksGetPreferEnum = typeof NetworksGetPreferEnum[keyof typeof NetworksGetPreferEnum];
/**
 * @export
 */
export const NetworksPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type NetworksPatchPreferEnum = typeof NetworksPatchPreferEnum[keyof typeof NetworksPatchPreferEnum];
/**
 * @export
 */
export const NetworksPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type NetworksPostPreferEnum = typeof NetworksPostPreferEnum[keyof typeof NetworksPostPreferEnum];

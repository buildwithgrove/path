/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 12.0.2 (a4e00ff)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PortalUsers,
} from '../models/index';
import {
    PortalUsersFromJSON,
    PortalUsersToJSON,
} from '../models/index';

export interface PortalUsersDeleteRequest {
    portalUserId?: string;
    portalUserEmail?: string;
    signedUp?: boolean;
    portalAdmin?: boolean;
    deletedAt?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: PortalUsersDeletePreferEnum;
}

export interface PortalUsersGetRequest {
    portalUserId?: string;
    portalUserEmail?: string;
    signedUp?: boolean;
    portalAdmin?: boolean;
    deletedAt?: string;
    createdAt?: string;
    updatedAt?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: PortalUsersGetPreferEnum;
}

export interface PortalUsersPatchRequest {
    portalUserId?: string;
    portalUserEmail?: string;
    signedUp?: boolean;
    portalAdmin?: boolean;
    deletedAt?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: PortalUsersPatchPreferEnum;
    portalUsers?: PortalUsers;
}

export interface PortalUsersPostRequest {
    select?: string;
    prefer?: PortalUsersPostPreferEnum;
    portalUsers?: PortalUsers;
}

/**
 * 
 */
export class PortalUsersApi extends runtime.BaseAPI {

    /**
     * Users who can access the portal and belong to multiple accounts
     */
    async portalUsersDeleteRaw(requestParameters: PortalUsersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['portalUserId'] != null) {
            queryParameters['portal_user_id'] = requestParameters['portalUserId'];
        }

        if (requestParameters['portalUserEmail'] != null) {
            queryParameters['portal_user_email'] = requestParameters['portalUserEmail'];
        }

        if (requestParameters['signedUp'] != null) {
            queryParameters['signed_up'] = requestParameters['signedUp'];
        }

        if (requestParameters['portalAdmin'] != null) {
            queryParameters['portal_admin'] = requestParameters['portalAdmin'];
        }

        if (requestParameters['deletedAt'] != null) {
            queryParameters['deleted_at'] = requestParameters['deletedAt'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_users`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Users who can access the portal and belong to multiple accounts
     */
    async portalUsersDelete(requestParameters: PortalUsersDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalUsersDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Users who can access the portal and belong to multiple accounts
     */
    async portalUsersGetRaw(requestParameters: PortalUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PortalUsers>>> {
        const queryParameters: any = {};

        if (requestParameters['portalUserId'] != null) {
            queryParameters['portal_user_id'] = requestParameters['portalUserId'];
        }

        if (requestParameters['portalUserEmail'] != null) {
            queryParameters['portal_user_email'] = requestParameters['portalUserEmail'];
        }

        if (requestParameters['signedUp'] != null) {
            queryParameters['signed_up'] = requestParameters['signedUp'];
        }

        if (requestParameters['portalAdmin'] != null) {
            queryParameters['portal_admin'] = requestParameters['portalAdmin'];
        }

        if (requestParameters['deletedAt'] != null) {
            queryParameters['deleted_at'] = requestParameters['deletedAt'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_users`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PortalUsersFromJSON));
    }

    /**
     * Users who can access the portal and belong to multiple accounts
     */
    async portalUsersGet(requestParameters: PortalUsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PortalUsers> | null | undefined > {
        const response = await this.portalUsersGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Users who can access the portal and belong to multiple accounts
     */
    async portalUsersPatchRaw(requestParameters: PortalUsersPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['portalUserId'] != null) {
            queryParameters['portal_user_id'] = requestParameters['portalUserId'];
        }

        if (requestParameters['portalUserEmail'] != null) {
            queryParameters['portal_user_email'] = requestParameters['portalUserEmail'];
        }

        if (requestParameters['signedUp'] != null) {
            queryParameters['signed_up'] = requestParameters['signedUp'];
        }

        if (requestParameters['portalAdmin'] != null) {
            queryParameters['portal_admin'] = requestParameters['portalAdmin'];
        }

        if (requestParameters['deletedAt'] != null) {
            queryParameters['deleted_at'] = requestParameters['deletedAt'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_users`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PortalUsersToJSON(requestParameters['portalUsers']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Users who can access the portal and belong to multiple accounts
     */
    async portalUsersPatch(requestParameters: PortalUsersPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalUsersPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Users who can access the portal and belong to multiple accounts
     */
    async portalUsersPostRaw(requestParameters: PortalUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_users`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PortalUsersToJSON(requestParameters['portalUsers']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Users who can access the portal and belong to multiple accounts
     */
    async portalUsersPost(requestParameters: PortalUsersPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalUsersPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const PortalUsersDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type PortalUsersDeletePreferEnum = typeof PortalUsersDeletePreferEnum[keyof typeof PortalUsersDeletePreferEnum];
/**
 * @export
 */
export const PortalUsersGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type PortalUsersGetPreferEnum = typeof PortalUsersGetPreferEnum[keyof typeof PortalUsersGetPreferEnum];
/**
 * @export
 */
export const PortalUsersPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type PortalUsersPatchPreferEnum = typeof PortalUsersPatchPreferEnum[keyof typeof PortalUsersPatchPreferEnum];
/**
 * @export
 */
export const PortalUsersPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type PortalUsersPostPreferEnum = typeof PortalUsersPostPreferEnum[keyof typeof PortalUsersPostPreferEnum];

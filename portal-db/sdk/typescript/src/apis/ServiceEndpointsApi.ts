/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 12.0.2 (a4e00ff)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceEndpoints,
} from '../models/index';
import {
    ServiceEndpointsFromJSON,
    ServiceEndpointsToJSON,
} from '../models/index';

export interface ServiceEndpointsDeleteRequest {
    endpointId?: number;
    serviceId?: string;
    endpointType?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: ServiceEndpointsDeletePreferEnum;
}

export interface ServiceEndpointsGetRequest {
    endpointId?: number;
    serviceId?: string;
    endpointType?: string;
    createdAt?: string;
    updatedAt?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: ServiceEndpointsGetPreferEnum;
}

export interface ServiceEndpointsPatchRequest {
    endpointId?: number;
    serviceId?: string;
    endpointType?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: ServiceEndpointsPatchPreferEnum;
    serviceEndpoints?: ServiceEndpoints;
}

export interface ServiceEndpointsPostRequest {
    select?: string;
    prefer?: ServiceEndpointsPostPreferEnum;
    serviceEndpoints?: ServiceEndpoints;
}

/**
 * 
 */
export class ServiceEndpointsApi extends runtime.BaseAPI {

    /**
     * Available endpoint types for each service
     */
    async serviceEndpointsDeleteRaw(requestParameters: ServiceEndpointsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['endpointId'] != null) {
            queryParameters['endpoint_id'] = requestParameters['endpointId'];
        }

        if (requestParameters['serviceId'] != null) {
            queryParameters['service_id'] = requestParameters['serviceId'];
        }

        if (requestParameters['endpointType'] != null) {
            queryParameters['endpoint_type'] = requestParameters['endpointType'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/service_endpoints`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Available endpoint types for each service
     */
    async serviceEndpointsDelete(requestParameters: ServiceEndpointsDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serviceEndpointsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Available endpoint types for each service
     */
    async serviceEndpointsGetRaw(requestParameters: ServiceEndpointsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceEndpoints>>> {
        const queryParameters: any = {};

        if (requestParameters['endpointId'] != null) {
            queryParameters['endpoint_id'] = requestParameters['endpointId'];
        }

        if (requestParameters['serviceId'] != null) {
            queryParameters['service_id'] = requestParameters['serviceId'];
        }

        if (requestParameters['endpointType'] != null) {
            queryParameters['endpoint_type'] = requestParameters['endpointType'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/service_endpoints`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceEndpointsFromJSON));
    }

    /**
     * Available endpoint types for each service
     */
    async serviceEndpointsGet(requestParameters: ServiceEndpointsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceEndpoints> | null | undefined > {
        const response = await this.serviceEndpointsGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Available endpoint types for each service
     */
    async serviceEndpointsPatchRaw(requestParameters: ServiceEndpointsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['endpointId'] != null) {
            queryParameters['endpoint_id'] = requestParameters['endpointId'];
        }

        if (requestParameters['serviceId'] != null) {
            queryParameters['service_id'] = requestParameters['serviceId'];
        }

        if (requestParameters['endpointType'] != null) {
            queryParameters['endpoint_type'] = requestParameters['endpointType'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/service_endpoints`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceEndpointsToJSON(requestParameters['serviceEndpoints']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Available endpoint types for each service
     */
    async serviceEndpointsPatch(requestParameters: ServiceEndpointsPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serviceEndpointsPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Available endpoint types for each service
     */
    async serviceEndpointsPostRaw(requestParameters: ServiceEndpointsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/service_endpoints`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceEndpointsToJSON(requestParameters['serviceEndpoints']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Available endpoint types for each service
     */
    async serviceEndpointsPost(requestParameters: ServiceEndpointsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serviceEndpointsPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ServiceEndpointsDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type ServiceEndpointsDeletePreferEnum = typeof ServiceEndpointsDeletePreferEnum[keyof typeof ServiceEndpointsDeletePreferEnum];
/**
 * @export
 */
export const ServiceEndpointsGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type ServiceEndpointsGetPreferEnum = typeof ServiceEndpointsGetPreferEnum[keyof typeof ServiceEndpointsGetPreferEnum];
/**
 * @export
 */
export const ServiceEndpointsPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type ServiceEndpointsPatchPreferEnum = typeof ServiceEndpointsPatchPreferEnum[keyof typeof ServiceEndpointsPatchPreferEnum];
/**
 * @export
 */
export const ServiceEndpointsPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type ServiceEndpointsPostPreferEnum = typeof ServiceEndpointsPostPreferEnum[keyof typeof ServiceEndpointsPostPreferEnum];

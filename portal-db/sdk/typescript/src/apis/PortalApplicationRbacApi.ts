/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 12.0.2 (a4e00ff)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PortalApplicationRbac,
} from '../models/index';
import {
    PortalApplicationRbacFromJSON,
    PortalApplicationRbacToJSON,
} from '../models/index';

export interface PortalApplicationRbacDeleteRequest {
    id?: number;
    portalApplicationId?: string;
    portalUserId?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: PortalApplicationRbacDeletePreferEnum;
}

export interface PortalApplicationRbacGetRequest {
    id?: number;
    portalApplicationId?: string;
    portalUserId?: string;
    createdAt?: string;
    updatedAt?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: PortalApplicationRbacGetPreferEnum;
}

export interface PortalApplicationRbacPatchRequest {
    id?: number;
    portalApplicationId?: string;
    portalUserId?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: PortalApplicationRbacPatchPreferEnum;
    portalApplicationRbac?: PortalApplicationRbac;
}

export interface PortalApplicationRbacPostRequest {
    select?: string;
    prefer?: PortalApplicationRbacPostPreferEnum;
    portalApplicationRbac?: PortalApplicationRbac;
}

/**
 * 
 */
export class PortalApplicationRbacApi extends runtime.BaseAPI {

    /**
     * User access controls for specific applications
     */
    async portalApplicationRbacDeleteRaw(requestParameters: PortalApplicationRbacDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['portalApplicationId'] != null) {
            queryParameters['portal_application_id'] = requestParameters['portalApplicationId'];
        }

        if (requestParameters['portalUserId'] != null) {
            queryParameters['portal_user_id'] = requestParameters['portalUserId'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_application_rbac`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User access controls for specific applications
     */
    async portalApplicationRbacDelete(requestParameters: PortalApplicationRbacDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalApplicationRbacDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * User access controls for specific applications
     */
    async portalApplicationRbacGetRaw(requestParameters: PortalApplicationRbacGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PortalApplicationRbac>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['portalApplicationId'] != null) {
            queryParameters['portal_application_id'] = requestParameters['portalApplicationId'];
        }

        if (requestParameters['portalUserId'] != null) {
            queryParameters['portal_user_id'] = requestParameters['portalUserId'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_application_rbac`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PortalApplicationRbacFromJSON));
    }

    /**
     * User access controls for specific applications
     */
    async portalApplicationRbacGet(requestParameters: PortalApplicationRbacGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PortalApplicationRbac> | null | undefined > {
        const response = await this.portalApplicationRbacGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * User access controls for specific applications
     */
    async portalApplicationRbacPatchRaw(requestParameters: PortalApplicationRbacPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['portalApplicationId'] != null) {
            queryParameters['portal_application_id'] = requestParameters['portalApplicationId'];
        }

        if (requestParameters['portalUserId'] != null) {
            queryParameters['portal_user_id'] = requestParameters['portalUserId'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_application_rbac`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PortalApplicationRbacToJSON(requestParameters['portalApplicationRbac']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User access controls for specific applications
     */
    async portalApplicationRbacPatch(requestParameters: PortalApplicationRbacPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalApplicationRbacPatchRaw(requestParameters, initOverrides);
    }

    /**
     * User access controls for specific applications
     */
    async portalApplicationRbacPostRaw(requestParameters: PortalApplicationRbacPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_application_rbac`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PortalApplicationRbacToJSON(requestParameters['portalApplicationRbac']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User access controls for specific applications
     */
    async portalApplicationRbacPost(requestParameters: PortalApplicationRbacPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalApplicationRbacPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const PortalApplicationRbacDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type PortalApplicationRbacDeletePreferEnum = typeof PortalApplicationRbacDeletePreferEnum[keyof typeof PortalApplicationRbacDeletePreferEnum];
/**
 * @export
 */
export const PortalApplicationRbacGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type PortalApplicationRbacGetPreferEnum = typeof PortalApplicationRbacGetPreferEnum[keyof typeof PortalApplicationRbacGetPreferEnum];
/**
 * @export
 */
export const PortalApplicationRbacPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type PortalApplicationRbacPatchPreferEnum = typeof PortalApplicationRbacPatchPreferEnum[keyof typeof PortalApplicationRbacPatchPreferEnum];
/**
 * @export
 */
export const PortalApplicationRbacPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type PortalApplicationRbacPostPreferEnum = typeof PortalApplicationRbacPostPreferEnum[keyof typeof PortalApplicationRbacPostPreferEnum];

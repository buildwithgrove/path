/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 12.0.2 (a4e00ff)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Services,
} from '../models/index';
import {
    ServicesFromJSON,
    ServicesToJSON,
} from '../models/index';

export interface ServicesDeleteRequest {
    serviceId?: string;
    serviceName?: string;
    computeUnitsPerRelay?: number;
    serviceDomains?: string;
    serviceOwnerAddress?: string;
    networkId?: string;
    active?: boolean;
    beta?: boolean;
    comingSoon?: boolean;
    qualityFallbackEnabled?: boolean;
    hardFallbackEnabled?: boolean;
    svgIcon?: string;
    publicEndpointUrl?: string;
    statusEndpointUrl?: string;
    statusQuery?: string;
    deletedAt?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: ServicesDeletePreferEnum;
}

export interface ServicesGetRequest {
    serviceId?: string;
    serviceName?: string;
    computeUnitsPerRelay?: number;
    serviceDomains?: string;
    serviceOwnerAddress?: string;
    networkId?: string;
    active?: boolean;
    beta?: boolean;
    comingSoon?: boolean;
    qualityFallbackEnabled?: boolean;
    hardFallbackEnabled?: boolean;
    svgIcon?: string;
    publicEndpointUrl?: string;
    statusEndpointUrl?: string;
    statusQuery?: string;
    deletedAt?: string;
    createdAt?: string;
    updatedAt?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: ServicesGetPreferEnum;
}

export interface ServicesPatchRequest {
    serviceId?: string;
    serviceName?: string;
    computeUnitsPerRelay?: number;
    serviceDomains?: string;
    serviceOwnerAddress?: string;
    networkId?: string;
    active?: boolean;
    beta?: boolean;
    comingSoon?: boolean;
    qualityFallbackEnabled?: boolean;
    hardFallbackEnabled?: boolean;
    svgIcon?: string;
    publicEndpointUrl?: string;
    statusEndpointUrl?: string;
    statusQuery?: string;
    deletedAt?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: ServicesPatchPreferEnum;
    services?: Services;
}

export interface ServicesPostRequest {
    select?: string;
    prefer?: ServicesPostPreferEnum;
    services?: Services;
}

/**
 * 
 */
export class ServicesApi extends runtime.BaseAPI {

    /**
     * Supported blockchain services from the Pocket Network
     */
    async servicesDeleteRaw(requestParameters: ServicesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['serviceId'] != null) {
            queryParameters['service_id'] = requestParameters['serviceId'];
        }

        if (requestParameters['serviceName'] != null) {
            queryParameters['service_name'] = requestParameters['serviceName'];
        }

        if (requestParameters['computeUnitsPerRelay'] != null) {
            queryParameters['compute_units_per_relay'] = requestParameters['computeUnitsPerRelay'];
        }

        if (requestParameters['serviceDomains'] != null) {
            queryParameters['service_domains'] = requestParameters['serviceDomains'];
        }

        if (requestParameters['serviceOwnerAddress'] != null) {
            queryParameters['service_owner_address'] = requestParameters['serviceOwnerAddress'];
        }

        if (requestParameters['networkId'] != null) {
            queryParameters['network_id'] = requestParameters['networkId'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['beta'] != null) {
            queryParameters['beta'] = requestParameters['beta'];
        }

        if (requestParameters['comingSoon'] != null) {
            queryParameters['coming_soon'] = requestParameters['comingSoon'];
        }

        if (requestParameters['qualityFallbackEnabled'] != null) {
            queryParameters['quality_fallback_enabled'] = requestParameters['qualityFallbackEnabled'];
        }

        if (requestParameters['hardFallbackEnabled'] != null) {
            queryParameters['hard_fallback_enabled'] = requestParameters['hardFallbackEnabled'];
        }

        if (requestParameters['svgIcon'] != null) {
            queryParameters['svg_icon'] = requestParameters['svgIcon'];
        }

        if (requestParameters['publicEndpointUrl'] != null) {
            queryParameters['public_endpoint_url'] = requestParameters['publicEndpointUrl'];
        }

        if (requestParameters['statusEndpointUrl'] != null) {
            queryParameters['status_endpoint_url'] = requestParameters['statusEndpointUrl'];
        }

        if (requestParameters['statusQuery'] != null) {
            queryParameters['status_query'] = requestParameters['statusQuery'];
        }

        if (requestParameters['deletedAt'] != null) {
            queryParameters['deleted_at'] = requestParameters['deletedAt'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/services`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supported blockchain services from the Pocket Network
     */
    async servicesDelete(requestParameters: ServicesDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Supported blockchain services from the Pocket Network
     */
    async servicesGetRaw(requestParameters: ServicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Services>>> {
        const queryParameters: any = {};

        if (requestParameters['serviceId'] != null) {
            queryParameters['service_id'] = requestParameters['serviceId'];
        }

        if (requestParameters['serviceName'] != null) {
            queryParameters['service_name'] = requestParameters['serviceName'];
        }

        if (requestParameters['computeUnitsPerRelay'] != null) {
            queryParameters['compute_units_per_relay'] = requestParameters['computeUnitsPerRelay'];
        }

        if (requestParameters['serviceDomains'] != null) {
            queryParameters['service_domains'] = requestParameters['serviceDomains'];
        }

        if (requestParameters['serviceOwnerAddress'] != null) {
            queryParameters['service_owner_address'] = requestParameters['serviceOwnerAddress'];
        }

        if (requestParameters['networkId'] != null) {
            queryParameters['network_id'] = requestParameters['networkId'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['beta'] != null) {
            queryParameters['beta'] = requestParameters['beta'];
        }

        if (requestParameters['comingSoon'] != null) {
            queryParameters['coming_soon'] = requestParameters['comingSoon'];
        }

        if (requestParameters['qualityFallbackEnabled'] != null) {
            queryParameters['quality_fallback_enabled'] = requestParameters['qualityFallbackEnabled'];
        }

        if (requestParameters['hardFallbackEnabled'] != null) {
            queryParameters['hard_fallback_enabled'] = requestParameters['hardFallbackEnabled'];
        }

        if (requestParameters['svgIcon'] != null) {
            queryParameters['svg_icon'] = requestParameters['svgIcon'];
        }

        if (requestParameters['publicEndpointUrl'] != null) {
            queryParameters['public_endpoint_url'] = requestParameters['publicEndpointUrl'];
        }

        if (requestParameters['statusEndpointUrl'] != null) {
            queryParameters['status_endpoint_url'] = requestParameters['statusEndpointUrl'];
        }

        if (requestParameters['statusQuery'] != null) {
            queryParameters['status_query'] = requestParameters['statusQuery'];
        }

        if (requestParameters['deletedAt'] != null) {
            queryParameters['deleted_at'] = requestParameters['deletedAt'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/services`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServicesFromJSON));
    }

    /**
     * Supported blockchain services from the Pocket Network
     */
    async servicesGet(requestParameters: ServicesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Services> | null | undefined > {
        const response = await this.servicesGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Supported blockchain services from the Pocket Network
     */
    async servicesPatchRaw(requestParameters: ServicesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['serviceId'] != null) {
            queryParameters['service_id'] = requestParameters['serviceId'];
        }

        if (requestParameters['serviceName'] != null) {
            queryParameters['service_name'] = requestParameters['serviceName'];
        }

        if (requestParameters['computeUnitsPerRelay'] != null) {
            queryParameters['compute_units_per_relay'] = requestParameters['computeUnitsPerRelay'];
        }

        if (requestParameters['serviceDomains'] != null) {
            queryParameters['service_domains'] = requestParameters['serviceDomains'];
        }

        if (requestParameters['serviceOwnerAddress'] != null) {
            queryParameters['service_owner_address'] = requestParameters['serviceOwnerAddress'];
        }

        if (requestParameters['networkId'] != null) {
            queryParameters['network_id'] = requestParameters['networkId'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['beta'] != null) {
            queryParameters['beta'] = requestParameters['beta'];
        }

        if (requestParameters['comingSoon'] != null) {
            queryParameters['coming_soon'] = requestParameters['comingSoon'];
        }

        if (requestParameters['qualityFallbackEnabled'] != null) {
            queryParameters['quality_fallback_enabled'] = requestParameters['qualityFallbackEnabled'];
        }

        if (requestParameters['hardFallbackEnabled'] != null) {
            queryParameters['hard_fallback_enabled'] = requestParameters['hardFallbackEnabled'];
        }

        if (requestParameters['svgIcon'] != null) {
            queryParameters['svg_icon'] = requestParameters['svgIcon'];
        }

        if (requestParameters['publicEndpointUrl'] != null) {
            queryParameters['public_endpoint_url'] = requestParameters['publicEndpointUrl'];
        }

        if (requestParameters['statusEndpointUrl'] != null) {
            queryParameters['status_endpoint_url'] = requestParameters['statusEndpointUrl'];
        }

        if (requestParameters['statusQuery'] != null) {
            queryParameters['status_query'] = requestParameters['statusQuery'];
        }

        if (requestParameters['deletedAt'] != null) {
            queryParameters['deleted_at'] = requestParameters['deletedAt'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/services`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ServicesToJSON(requestParameters['services']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supported blockchain services from the Pocket Network
     */
    async servicesPatch(requestParameters: ServicesPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Supported blockchain services from the Pocket Network
     */
    async servicesPostRaw(requestParameters: ServicesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/services`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServicesToJSON(requestParameters['services']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supported blockchain services from the Pocket Network
     */
    async servicesPost(requestParameters: ServicesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ServicesDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type ServicesDeletePreferEnum = typeof ServicesDeletePreferEnum[keyof typeof ServicesDeletePreferEnum];
/**
 * @export
 */
export const ServicesGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type ServicesGetPreferEnum = typeof ServicesGetPreferEnum[keyof typeof ServicesGetPreferEnum];
/**
 * @export
 */
export const ServicesPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type ServicesPatchPreferEnum = typeof ServicesPatchPreferEnum[keyof typeof ServicesPatchPreferEnum];
/**
 * @export
 */
export const ServicesPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type ServicesPostPreferEnum = typeof ServicesPostPreferEnum[keyof typeof ServicesPostPreferEnum];

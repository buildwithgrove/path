/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 12.0.2 (a4e00ff)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Applications,
} from '../models/index';
import {
    ApplicationsFromJSON,
    ApplicationsToJSON,
} from '../models/index';

export interface ApplicationsDeleteRequest {
    applicationAddress?: string;
    gatewayAddress?: string;
    serviceId?: string;
    stakeAmount?: string;
    stakeDenom?: string;
    applicationPrivateKeyHex?: string;
    networkId?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: ApplicationsDeletePreferEnum;
}

export interface ApplicationsGetRequest {
    applicationAddress?: string;
    gatewayAddress?: string;
    serviceId?: string;
    stakeAmount?: string;
    stakeDenom?: string;
    applicationPrivateKeyHex?: string;
    networkId?: string;
    createdAt?: string;
    updatedAt?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: ApplicationsGetPreferEnum;
}

export interface ApplicationsPatchRequest {
    applicationAddress?: string;
    gatewayAddress?: string;
    serviceId?: string;
    stakeAmount?: string;
    stakeDenom?: string;
    applicationPrivateKeyHex?: string;
    networkId?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: ApplicationsPatchPreferEnum;
    applications?: Applications;
}

export interface ApplicationsPostRequest {
    select?: string;
    prefer?: ApplicationsPostPreferEnum;
    applications?: Applications;
}

/**
 * 
 */
export class ApplicationsApi extends runtime.BaseAPI {

    /**
     * Onchain applications for processing relays through the network
     */
    async applicationsDeleteRaw(requestParameters: ApplicationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['applicationAddress'] != null) {
            queryParameters['application_address'] = requestParameters['applicationAddress'];
        }

        if (requestParameters['gatewayAddress'] != null) {
            queryParameters['gateway_address'] = requestParameters['gatewayAddress'];
        }

        if (requestParameters['serviceId'] != null) {
            queryParameters['service_id'] = requestParameters['serviceId'];
        }

        if (requestParameters['stakeAmount'] != null) {
            queryParameters['stake_amount'] = requestParameters['stakeAmount'];
        }

        if (requestParameters['stakeDenom'] != null) {
            queryParameters['stake_denom'] = requestParameters['stakeDenom'];
        }

        if (requestParameters['applicationPrivateKeyHex'] != null) {
            queryParameters['application_private_key_hex'] = requestParameters['applicationPrivateKeyHex'];
        }

        if (requestParameters['networkId'] != null) {
            queryParameters['network_id'] = requestParameters['networkId'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/applications`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Onchain applications for processing relays through the network
     */
    async applicationsDelete(requestParameters: ApplicationsDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Onchain applications for processing relays through the network
     */
    async applicationsGetRaw(requestParameters: ApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Applications>>> {
        const queryParameters: any = {};

        if (requestParameters['applicationAddress'] != null) {
            queryParameters['application_address'] = requestParameters['applicationAddress'];
        }

        if (requestParameters['gatewayAddress'] != null) {
            queryParameters['gateway_address'] = requestParameters['gatewayAddress'];
        }

        if (requestParameters['serviceId'] != null) {
            queryParameters['service_id'] = requestParameters['serviceId'];
        }

        if (requestParameters['stakeAmount'] != null) {
            queryParameters['stake_amount'] = requestParameters['stakeAmount'];
        }

        if (requestParameters['stakeDenom'] != null) {
            queryParameters['stake_denom'] = requestParameters['stakeDenom'];
        }

        if (requestParameters['applicationPrivateKeyHex'] != null) {
            queryParameters['application_private_key_hex'] = requestParameters['applicationPrivateKeyHex'];
        }

        if (requestParameters['networkId'] != null) {
            queryParameters['network_id'] = requestParameters['networkId'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/applications`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationsFromJSON));
    }

    /**
     * Onchain applications for processing relays through the network
     */
    async applicationsGet(requestParameters: ApplicationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Applications> | null | undefined > {
        const response = await this.applicationsGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Onchain applications for processing relays through the network
     */
    async applicationsPatchRaw(requestParameters: ApplicationsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['applicationAddress'] != null) {
            queryParameters['application_address'] = requestParameters['applicationAddress'];
        }

        if (requestParameters['gatewayAddress'] != null) {
            queryParameters['gateway_address'] = requestParameters['gatewayAddress'];
        }

        if (requestParameters['serviceId'] != null) {
            queryParameters['service_id'] = requestParameters['serviceId'];
        }

        if (requestParameters['stakeAmount'] != null) {
            queryParameters['stake_amount'] = requestParameters['stakeAmount'];
        }

        if (requestParameters['stakeDenom'] != null) {
            queryParameters['stake_denom'] = requestParameters['stakeDenom'];
        }

        if (requestParameters['applicationPrivateKeyHex'] != null) {
            queryParameters['application_private_key_hex'] = requestParameters['applicationPrivateKeyHex'];
        }

        if (requestParameters['networkId'] != null) {
            queryParameters['network_id'] = requestParameters['networkId'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/applications`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationsToJSON(requestParameters['applications']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Onchain applications for processing relays through the network
     */
    async applicationsPatch(requestParameters: ApplicationsPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationsPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Onchain applications for processing relays through the network
     */
    async applicationsPostRaw(requestParameters: ApplicationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/applications`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationsToJSON(requestParameters['applications']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Onchain applications for processing relays through the network
     */
    async applicationsPost(requestParameters: ApplicationsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationsPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ApplicationsDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type ApplicationsDeletePreferEnum = typeof ApplicationsDeletePreferEnum[keyof typeof ApplicationsDeletePreferEnum];
/**
 * @export
 */
export const ApplicationsGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type ApplicationsGetPreferEnum = typeof ApplicationsGetPreferEnum[keyof typeof ApplicationsGetPreferEnum];
/**
 * @export
 */
export const ApplicationsPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type ApplicationsPatchPreferEnum = typeof ApplicationsPatchPreferEnum[keyof typeof ApplicationsPatchPreferEnum];
/**
 * @export
 */
export const ApplicationsPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type ApplicationsPostPreferEnum = typeof ApplicationsPostPreferEnum[keyof typeof ApplicationsPostPreferEnum];

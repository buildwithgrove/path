/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 12.0.2 (a4e00ff)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PortalAccountRbac,
} from '../models/index';
import {
    PortalAccountRbacFromJSON,
    PortalAccountRbacToJSON,
} from '../models/index';

export interface PortalAccountRbacDeleteRequest {
    id?: number;
    portalAccountId?: string;
    portalUserId?: string;
    roleName?: string;
    userJoinedAccount?: boolean;
    prefer?: PortalAccountRbacDeletePreferEnum;
}

export interface PortalAccountRbacGetRequest {
    id?: number;
    portalAccountId?: string;
    portalUserId?: string;
    roleName?: string;
    userJoinedAccount?: boolean;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: PortalAccountRbacGetPreferEnum;
}

export interface PortalAccountRbacPatchRequest {
    id?: number;
    portalAccountId?: string;
    portalUserId?: string;
    roleName?: string;
    userJoinedAccount?: boolean;
    prefer?: PortalAccountRbacPatchPreferEnum;
    portalAccountRbac?: PortalAccountRbac;
}

export interface PortalAccountRbacPostRequest {
    select?: string;
    prefer?: PortalAccountRbacPostPreferEnum;
    portalAccountRbac?: PortalAccountRbac;
}

/**
 * 
 */
export class PortalAccountRbacApi extends runtime.BaseAPI {

    /**
     * User roles and permissions for specific portal accounts
     */
    async portalAccountRbacDeleteRaw(requestParameters: PortalAccountRbacDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['portalAccountId'] != null) {
            queryParameters['portal_account_id'] = requestParameters['portalAccountId'];
        }

        if (requestParameters['portalUserId'] != null) {
            queryParameters['portal_user_id'] = requestParameters['portalUserId'];
        }

        if (requestParameters['roleName'] != null) {
            queryParameters['role_name'] = requestParameters['roleName'];
        }

        if (requestParameters['userJoinedAccount'] != null) {
            queryParameters['user_joined_account'] = requestParameters['userJoinedAccount'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_account_rbac`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User roles and permissions for specific portal accounts
     */
    async portalAccountRbacDelete(requestParameters: PortalAccountRbacDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalAccountRbacDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * User roles and permissions for specific portal accounts
     */
    async portalAccountRbacGetRaw(requestParameters: PortalAccountRbacGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PortalAccountRbac>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['portalAccountId'] != null) {
            queryParameters['portal_account_id'] = requestParameters['portalAccountId'];
        }

        if (requestParameters['portalUserId'] != null) {
            queryParameters['portal_user_id'] = requestParameters['portalUserId'];
        }

        if (requestParameters['roleName'] != null) {
            queryParameters['role_name'] = requestParameters['roleName'];
        }

        if (requestParameters['userJoinedAccount'] != null) {
            queryParameters['user_joined_account'] = requestParameters['userJoinedAccount'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_account_rbac`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PortalAccountRbacFromJSON));
    }

    /**
     * User roles and permissions for specific portal accounts
     */
    async portalAccountRbacGet(requestParameters: PortalAccountRbacGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PortalAccountRbac> | null | undefined > {
        const response = await this.portalAccountRbacGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * User roles and permissions for specific portal accounts
     */
    async portalAccountRbacPatchRaw(requestParameters: PortalAccountRbacPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['portalAccountId'] != null) {
            queryParameters['portal_account_id'] = requestParameters['portalAccountId'];
        }

        if (requestParameters['portalUserId'] != null) {
            queryParameters['portal_user_id'] = requestParameters['portalUserId'];
        }

        if (requestParameters['roleName'] != null) {
            queryParameters['role_name'] = requestParameters['roleName'];
        }

        if (requestParameters['userJoinedAccount'] != null) {
            queryParameters['user_joined_account'] = requestParameters['userJoinedAccount'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_account_rbac`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PortalAccountRbacToJSON(requestParameters['portalAccountRbac']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User roles and permissions for specific portal accounts
     */
    async portalAccountRbacPatch(requestParameters: PortalAccountRbacPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalAccountRbacPatchRaw(requestParameters, initOverrides);
    }

    /**
     * User roles and permissions for specific portal accounts
     */
    async portalAccountRbacPostRaw(requestParameters: PortalAccountRbacPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_account_rbac`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PortalAccountRbacToJSON(requestParameters['portalAccountRbac']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User roles and permissions for specific portal accounts
     */
    async portalAccountRbacPost(requestParameters: PortalAccountRbacPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalAccountRbacPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const PortalAccountRbacDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type PortalAccountRbacDeletePreferEnum = typeof PortalAccountRbacDeletePreferEnum[keyof typeof PortalAccountRbacDeletePreferEnum];
/**
 * @export
 */
export const PortalAccountRbacGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type PortalAccountRbacGetPreferEnum = typeof PortalAccountRbacGetPreferEnum[keyof typeof PortalAccountRbacGetPreferEnum];
/**
 * @export
 */
export const PortalAccountRbacPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type PortalAccountRbacPatchPreferEnum = typeof PortalAccountRbacPatchPreferEnum[keyof typeof PortalAccountRbacPatchPreferEnum];
/**
 * @export
 */
export const PortalAccountRbacPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type PortalAccountRbacPostPreferEnum = typeof PortalAccountRbacPostPreferEnum[keyof typeof PortalAccountRbacPostPreferEnum];

/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 12.0.2 (a4e00ff)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PortalWorkersAccountData,
} from '../models/index';
import {
    PortalWorkersAccountDataFromJSON,
    PortalWorkersAccountDataToJSON,
} from '../models/index';

export interface PortalWorkersAccountDataGetRequest {
    portalAccountId?: string;
    userAccountName?: string;
    portalPlanType?: string;
    billingType?: string;
    portalAccountUserLimit?: number;
    gcpEntitlementId?: string;
    ownerEmail?: string;
    ownerUserId?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: PortalWorkersAccountDataGetPreferEnum;
}

/**
 * 
 */
export class PortalWorkersAccountDataApi extends runtime.BaseAPI {

    /**
     * Account data for portal-workers billing operations with owner email. Filter using WHERE portal_plan_type = \'PLAN_UNLIMITED\' AND billing_type = \'stripe\'
     */
    async portalWorkersAccountDataGetRaw(requestParameters: PortalWorkersAccountDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PortalWorkersAccountData>>> {
        const queryParameters: any = {};

        if (requestParameters['portalAccountId'] != null) {
            queryParameters['portal_account_id'] = requestParameters['portalAccountId'];
        }

        if (requestParameters['userAccountName'] != null) {
            queryParameters['user_account_name'] = requestParameters['userAccountName'];
        }

        if (requestParameters['portalPlanType'] != null) {
            queryParameters['portal_plan_type'] = requestParameters['portalPlanType'];
        }

        if (requestParameters['billingType'] != null) {
            queryParameters['billing_type'] = requestParameters['billingType'];
        }

        if (requestParameters['portalAccountUserLimit'] != null) {
            queryParameters['portal_account_user_limit'] = requestParameters['portalAccountUserLimit'];
        }

        if (requestParameters['gcpEntitlementId'] != null) {
            queryParameters['gcp_entitlement_id'] = requestParameters['gcpEntitlementId'];
        }

        if (requestParameters['ownerEmail'] != null) {
            queryParameters['owner_email'] = requestParameters['ownerEmail'];
        }

        if (requestParameters['ownerUserId'] != null) {
            queryParameters['owner_user_id'] = requestParameters['ownerUserId'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_workers_account_data`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PortalWorkersAccountDataFromJSON));
    }

    /**
     * Account data for portal-workers billing operations with owner email. Filter using WHERE portal_plan_type = \'PLAN_UNLIMITED\' AND billing_type = \'stripe\'
     */
    async portalWorkersAccountDataGet(requestParameters: PortalWorkersAccountDataGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PortalWorkersAccountData> | null | undefined > {
        const response = await this.portalWorkersAccountDataGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

}

/**
 * @export
 */
export const PortalWorkersAccountDataGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type PortalWorkersAccountDataGetPreferEnum = typeof PortalWorkersAccountDataGetPreferEnum[keyof typeof PortalWorkersAccountDataGetPreferEnum];

/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 12.0.2 (a4e00ff)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcCreatePortalApplicationPostRequest,
} from '../models/index';
import {
    RpcCreatePortalApplicationPostRequestFromJSON,
    RpcCreatePortalApplicationPostRequestToJSON,
} from '../models/index';

export interface RpcCreatePortalApplicationGetRequest {
    pPortalAccountId: string;
    pPortalUserId: string;
    pPortalApplicationName?: string;
    pEmoji?: string;
    pPortalApplicationUserLimit?: number;
    pPortalApplicationUserLimitInterval?: string;
    pPortalApplicationUserLimitRps?: number;
    pPortalApplicationDescription?: string;
    pFavoriteServiceIds?: string;
    pSecretKeyRequired?: string;
}

export interface RpcCreatePortalApplicationPostOperationRequest {
    rpcCreatePortalApplicationPostRequest: RpcCreatePortalApplicationPostRequest;
    prefer?: RpcCreatePortalApplicationPostOperationPreferEnum;
}

/**
 * 
 */
export class RpcCreatePortalApplicationApi extends runtime.BaseAPI {

    /**
     * Validates user membership in the account before creation.  Returns the application details including the generated secret key. This function is exposed via PostgREST as POST /rpc/create_portal_application
     * Creates a portal application with all associated RBAC entries in a single atomic transaction. 
     */
    async rpcCreatePortalApplicationGetRaw(requestParameters: RpcCreatePortalApplicationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pPortalAccountId'] == null) {
            throw new runtime.RequiredError(
                'pPortalAccountId',
                'Required parameter "pPortalAccountId" was null or undefined when calling rpcCreatePortalApplicationGet().'
            );
        }

        if (requestParameters['pPortalUserId'] == null) {
            throw new runtime.RequiredError(
                'pPortalUserId',
                'Required parameter "pPortalUserId" was null or undefined when calling rpcCreatePortalApplicationGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pPortalAccountId'] != null) {
            queryParameters['p_portal_account_id'] = requestParameters['pPortalAccountId'];
        }

        if (requestParameters['pPortalUserId'] != null) {
            queryParameters['p_portal_user_id'] = requestParameters['pPortalUserId'];
        }

        if (requestParameters['pPortalApplicationName'] != null) {
            queryParameters['p_portal_application_name'] = requestParameters['pPortalApplicationName'];
        }

        if (requestParameters['pEmoji'] != null) {
            queryParameters['p_emoji'] = requestParameters['pEmoji'];
        }

        if (requestParameters['pPortalApplicationUserLimit'] != null) {
            queryParameters['p_portal_application_user_limit'] = requestParameters['pPortalApplicationUserLimit'];
        }

        if (requestParameters['pPortalApplicationUserLimitInterval'] != null) {
            queryParameters['p_portal_application_user_limit_interval'] = requestParameters['pPortalApplicationUserLimitInterval'];
        }

        if (requestParameters['pPortalApplicationUserLimitRps'] != null) {
            queryParameters['p_portal_application_user_limit_rps'] = requestParameters['pPortalApplicationUserLimitRps'];
        }

        if (requestParameters['pPortalApplicationDescription'] != null) {
            queryParameters['p_portal_application_description'] = requestParameters['pPortalApplicationDescription'];
        }

        if (requestParameters['pFavoriteServiceIds'] != null) {
            queryParameters['p_favorite_service_ids'] = requestParameters['pFavoriteServiceIds'];
        }

        if (requestParameters['pSecretKeyRequired'] != null) {
            queryParameters['p_secret_key_required'] = requestParameters['pSecretKeyRequired'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/rpc/create_portal_application`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validates user membership in the account before creation.  Returns the application details including the generated secret key. This function is exposed via PostgREST as POST /rpc/create_portal_application
     * Creates a portal application with all associated RBAC entries in a single atomic transaction. 
     */
    async rpcCreatePortalApplicationGet(requestParameters: RpcCreatePortalApplicationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rpcCreatePortalApplicationGetRaw(requestParameters, initOverrides);
    }

    /**
     * Validates user membership in the account before creation.  Returns the application details including the generated secret key. This function is exposed via PostgREST as POST /rpc/create_portal_application
     * Creates a portal application with all associated RBAC entries in a single atomic transaction. 
     */
    async rpcCreatePortalApplicationPostRaw(requestParameters: RpcCreatePortalApplicationPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['rpcCreatePortalApplicationPostRequest'] == null) {
            throw new runtime.RequiredError(
                'rpcCreatePortalApplicationPostRequest',
                'Required parameter "rpcCreatePortalApplicationPostRequest" was null or undefined when calling rpcCreatePortalApplicationPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/rpc/create_portal_application`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RpcCreatePortalApplicationPostRequestToJSON(requestParameters['rpcCreatePortalApplicationPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validates user membership in the account before creation.  Returns the application details including the generated secret key. This function is exposed via PostgREST as POST /rpc/create_portal_application
     * Creates a portal application with all associated RBAC entries in a single atomic transaction. 
     */
    async rpcCreatePortalApplicationPost(requestParameters: RpcCreatePortalApplicationPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rpcCreatePortalApplicationPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const RpcCreatePortalApplicationPostOperationPreferEnum = {
    ParamssingleObject: 'params=single-object'
} as const;
export type RpcCreatePortalApplicationPostOperationPreferEnum = typeof RpcCreatePortalApplicationPostOperationPreferEnum[keyof typeof RpcCreatePortalApplicationPostOperationPreferEnum];

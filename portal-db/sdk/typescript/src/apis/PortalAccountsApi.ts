/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 12.0.2 (a4e00ff)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PortalAccounts,
} from '../models/index';
import {
    PortalAccountsFromJSON,
    PortalAccountsToJSON,
} from '../models/index';

export interface PortalAccountsDeleteRequest {
    portalAccountId?: string;
    organizationId?: number;
    portalPlanType?: string;
    userAccountName?: string;
    internalAccountName?: string;
    portalAccountUserLimit?: number;
    portalAccountUserLimitInterval?: string;
    portalAccountUserLimitRps?: number;
    billingType?: string;
    stripeSubscriptionId?: string;
    gcpAccountId?: string;
    gcpEntitlementId?: string;
    deletedAt?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: PortalAccountsDeletePreferEnum;
}

export interface PortalAccountsGetRequest {
    portalAccountId?: string;
    organizationId?: number;
    portalPlanType?: string;
    userAccountName?: string;
    internalAccountName?: string;
    portalAccountUserLimit?: number;
    portalAccountUserLimitInterval?: string;
    portalAccountUserLimitRps?: number;
    billingType?: string;
    stripeSubscriptionId?: string;
    gcpAccountId?: string;
    gcpEntitlementId?: string;
    deletedAt?: string;
    createdAt?: string;
    updatedAt?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: PortalAccountsGetPreferEnum;
}

export interface PortalAccountsPatchRequest {
    portalAccountId?: string;
    organizationId?: number;
    portalPlanType?: string;
    userAccountName?: string;
    internalAccountName?: string;
    portalAccountUserLimit?: number;
    portalAccountUserLimitInterval?: string;
    portalAccountUserLimitRps?: number;
    billingType?: string;
    stripeSubscriptionId?: string;
    gcpAccountId?: string;
    gcpEntitlementId?: string;
    deletedAt?: string;
    createdAt?: string;
    updatedAt?: string;
    prefer?: PortalAccountsPatchPreferEnum;
    portalAccounts?: PortalAccounts;
}

export interface PortalAccountsPostRequest {
    select?: string;
    prefer?: PortalAccountsPostPreferEnum;
    portalAccounts?: PortalAccounts;
}

/**
 * 
 */
export class PortalAccountsApi extends runtime.BaseAPI {

    /**
     * Multi-tenant accounts with plans and billing integration
     */
    async portalAccountsDeleteRaw(requestParameters: PortalAccountsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['portalAccountId'] != null) {
            queryParameters['portal_account_id'] = requestParameters['portalAccountId'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organization_id'] = requestParameters['organizationId'];
        }

        if (requestParameters['portalPlanType'] != null) {
            queryParameters['portal_plan_type'] = requestParameters['portalPlanType'];
        }

        if (requestParameters['userAccountName'] != null) {
            queryParameters['user_account_name'] = requestParameters['userAccountName'];
        }

        if (requestParameters['internalAccountName'] != null) {
            queryParameters['internal_account_name'] = requestParameters['internalAccountName'];
        }

        if (requestParameters['portalAccountUserLimit'] != null) {
            queryParameters['portal_account_user_limit'] = requestParameters['portalAccountUserLimit'];
        }

        if (requestParameters['portalAccountUserLimitInterval'] != null) {
            queryParameters['portal_account_user_limit_interval'] = requestParameters['portalAccountUserLimitInterval'];
        }

        if (requestParameters['portalAccountUserLimitRps'] != null) {
            queryParameters['portal_account_user_limit_rps'] = requestParameters['portalAccountUserLimitRps'];
        }

        if (requestParameters['billingType'] != null) {
            queryParameters['billing_type'] = requestParameters['billingType'];
        }

        if (requestParameters['stripeSubscriptionId'] != null) {
            queryParameters['stripe_subscription_id'] = requestParameters['stripeSubscriptionId'];
        }

        if (requestParameters['gcpAccountId'] != null) {
            queryParameters['gcp_account_id'] = requestParameters['gcpAccountId'];
        }

        if (requestParameters['gcpEntitlementId'] != null) {
            queryParameters['gcp_entitlement_id'] = requestParameters['gcpEntitlementId'];
        }

        if (requestParameters['deletedAt'] != null) {
            queryParameters['deleted_at'] = requestParameters['deletedAt'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_accounts`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Multi-tenant accounts with plans and billing integration
     */
    async portalAccountsDelete(requestParameters: PortalAccountsDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalAccountsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Multi-tenant accounts with plans and billing integration
     */
    async portalAccountsGetRaw(requestParameters: PortalAccountsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PortalAccounts>>> {
        const queryParameters: any = {};

        if (requestParameters['portalAccountId'] != null) {
            queryParameters['portal_account_id'] = requestParameters['portalAccountId'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organization_id'] = requestParameters['organizationId'];
        }

        if (requestParameters['portalPlanType'] != null) {
            queryParameters['portal_plan_type'] = requestParameters['portalPlanType'];
        }

        if (requestParameters['userAccountName'] != null) {
            queryParameters['user_account_name'] = requestParameters['userAccountName'];
        }

        if (requestParameters['internalAccountName'] != null) {
            queryParameters['internal_account_name'] = requestParameters['internalAccountName'];
        }

        if (requestParameters['portalAccountUserLimit'] != null) {
            queryParameters['portal_account_user_limit'] = requestParameters['portalAccountUserLimit'];
        }

        if (requestParameters['portalAccountUserLimitInterval'] != null) {
            queryParameters['portal_account_user_limit_interval'] = requestParameters['portalAccountUserLimitInterval'];
        }

        if (requestParameters['portalAccountUserLimitRps'] != null) {
            queryParameters['portal_account_user_limit_rps'] = requestParameters['portalAccountUserLimitRps'];
        }

        if (requestParameters['billingType'] != null) {
            queryParameters['billing_type'] = requestParameters['billingType'];
        }

        if (requestParameters['stripeSubscriptionId'] != null) {
            queryParameters['stripe_subscription_id'] = requestParameters['stripeSubscriptionId'];
        }

        if (requestParameters['gcpAccountId'] != null) {
            queryParameters['gcp_account_id'] = requestParameters['gcpAccountId'];
        }

        if (requestParameters['gcpEntitlementId'] != null) {
            queryParameters['gcp_entitlement_id'] = requestParameters['gcpEntitlementId'];
        }

        if (requestParameters['deletedAt'] != null) {
            queryParameters['deleted_at'] = requestParameters['deletedAt'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_accounts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PortalAccountsFromJSON));
    }

    /**
     * Multi-tenant accounts with plans and billing integration
     */
    async portalAccountsGet(requestParameters: PortalAccountsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PortalAccounts> | null | undefined > {
        const response = await this.portalAccountsGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Multi-tenant accounts with plans and billing integration
     */
    async portalAccountsPatchRaw(requestParameters: PortalAccountsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['portalAccountId'] != null) {
            queryParameters['portal_account_id'] = requestParameters['portalAccountId'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organization_id'] = requestParameters['organizationId'];
        }

        if (requestParameters['portalPlanType'] != null) {
            queryParameters['portal_plan_type'] = requestParameters['portalPlanType'];
        }

        if (requestParameters['userAccountName'] != null) {
            queryParameters['user_account_name'] = requestParameters['userAccountName'];
        }

        if (requestParameters['internalAccountName'] != null) {
            queryParameters['internal_account_name'] = requestParameters['internalAccountName'];
        }

        if (requestParameters['portalAccountUserLimit'] != null) {
            queryParameters['portal_account_user_limit'] = requestParameters['portalAccountUserLimit'];
        }

        if (requestParameters['portalAccountUserLimitInterval'] != null) {
            queryParameters['portal_account_user_limit_interval'] = requestParameters['portalAccountUserLimitInterval'];
        }

        if (requestParameters['portalAccountUserLimitRps'] != null) {
            queryParameters['portal_account_user_limit_rps'] = requestParameters['portalAccountUserLimitRps'];
        }

        if (requestParameters['billingType'] != null) {
            queryParameters['billing_type'] = requestParameters['billingType'];
        }

        if (requestParameters['stripeSubscriptionId'] != null) {
            queryParameters['stripe_subscription_id'] = requestParameters['stripeSubscriptionId'];
        }

        if (requestParameters['gcpAccountId'] != null) {
            queryParameters['gcp_account_id'] = requestParameters['gcpAccountId'];
        }

        if (requestParameters['gcpEntitlementId'] != null) {
            queryParameters['gcp_entitlement_id'] = requestParameters['gcpEntitlementId'];
        }

        if (requestParameters['deletedAt'] != null) {
            queryParameters['deleted_at'] = requestParameters['deletedAt'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updated_at'] = requestParameters['updatedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_accounts`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PortalAccountsToJSON(requestParameters['portalAccounts']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Multi-tenant accounts with plans and billing integration
     */
    async portalAccountsPatch(requestParameters: PortalAccountsPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalAccountsPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Multi-tenant accounts with plans and billing integration
     */
    async portalAccountsPostRaw(requestParameters: PortalAccountsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_accounts`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PortalAccountsToJSON(requestParameters['portalAccounts']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Multi-tenant accounts with plans and billing integration
     */
    async portalAccountsPost(requestParameters: PortalAccountsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalAccountsPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const PortalAccountsDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type PortalAccountsDeletePreferEnum = typeof PortalAccountsDeletePreferEnum[keyof typeof PortalAccountsDeletePreferEnum];
/**
 * @export
 */
export const PortalAccountsGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type PortalAccountsGetPreferEnum = typeof PortalAccountsGetPreferEnum[keyof typeof PortalAccountsGetPreferEnum];
/**
 * @export
 */
export const PortalAccountsPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type PortalAccountsPatchPreferEnum = typeof PortalAccountsPatchPreferEnum[keyof typeof PortalAccountsPatchPreferEnum];
/**
 * @export
 */
export const PortalAccountsPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type PortalAccountsPostPreferEnum = typeof PortalAccountsPostPreferEnum[keyof typeof PortalAccountsPostPreferEnum];

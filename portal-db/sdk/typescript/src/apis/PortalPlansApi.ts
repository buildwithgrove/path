/* tslint:disable */
/* eslint-disable */
/**
 * standard public schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 12.0.2 (a4e00ff)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PortalPlans,
} from '../models/index';
import {
    PortalPlansFromJSON,
    PortalPlansToJSON,
} from '../models/index';

export interface PortalPlansDeleteRequest {
    portalPlanType?: string;
    portalPlanTypeDescription?: string;
    planUsageLimit?: number;
    planUsageLimitInterval?: string;
    planRateLimitRps?: number;
    planApplicationLimit?: number;
    prefer?: PortalPlansDeletePreferEnum;
}

export interface PortalPlansGetRequest {
    portalPlanType?: string;
    portalPlanTypeDescription?: string;
    planUsageLimit?: number;
    planUsageLimitInterval?: string;
    planRateLimitRps?: number;
    planApplicationLimit?: number;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: PortalPlansGetPreferEnum;
}

export interface PortalPlansPatchRequest {
    portalPlanType?: string;
    portalPlanTypeDescription?: string;
    planUsageLimit?: number;
    planUsageLimitInterval?: string;
    planRateLimitRps?: number;
    planApplicationLimit?: number;
    prefer?: PortalPlansPatchPreferEnum;
    portalPlans?: PortalPlans;
}

export interface PortalPlansPostRequest {
    select?: string;
    prefer?: PortalPlansPostPreferEnum;
    portalPlans?: PortalPlans;
}

/**
 * 
 */
export class PortalPlansApi extends runtime.BaseAPI {

    /**
     * Available subscription plans for Portal Accounts
     */
    async portalPlansDeleteRaw(requestParameters: PortalPlansDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['portalPlanType'] != null) {
            queryParameters['portal_plan_type'] = requestParameters['portalPlanType'];
        }

        if (requestParameters['portalPlanTypeDescription'] != null) {
            queryParameters['portal_plan_type_description'] = requestParameters['portalPlanTypeDescription'];
        }

        if (requestParameters['planUsageLimit'] != null) {
            queryParameters['plan_usage_limit'] = requestParameters['planUsageLimit'];
        }

        if (requestParameters['planUsageLimitInterval'] != null) {
            queryParameters['plan_usage_limit_interval'] = requestParameters['planUsageLimitInterval'];
        }

        if (requestParameters['planRateLimitRps'] != null) {
            queryParameters['plan_rate_limit_rps'] = requestParameters['planRateLimitRps'];
        }

        if (requestParameters['planApplicationLimit'] != null) {
            queryParameters['plan_application_limit'] = requestParameters['planApplicationLimit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_plans`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Available subscription plans for Portal Accounts
     */
    async portalPlansDelete(requestParameters: PortalPlansDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalPlansDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Available subscription plans for Portal Accounts
     */
    async portalPlansGetRaw(requestParameters: PortalPlansGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PortalPlans>>> {
        const queryParameters: any = {};

        if (requestParameters['portalPlanType'] != null) {
            queryParameters['portal_plan_type'] = requestParameters['portalPlanType'];
        }

        if (requestParameters['portalPlanTypeDescription'] != null) {
            queryParameters['portal_plan_type_description'] = requestParameters['portalPlanTypeDescription'];
        }

        if (requestParameters['planUsageLimit'] != null) {
            queryParameters['plan_usage_limit'] = requestParameters['planUsageLimit'];
        }

        if (requestParameters['planUsageLimitInterval'] != null) {
            queryParameters['plan_usage_limit_interval'] = requestParameters['planUsageLimitInterval'];
        }

        if (requestParameters['planRateLimitRps'] != null) {
            queryParameters['plan_rate_limit_rps'] = requestParameters['planRateLimitRps'];
        }

        if (requestParameters['planApplicationLimit'] != null) {
            queryParameters['plan_application_limit'] = requestParameters['planApplicationLimit'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['rangeUnit'] != null) {
            headerParameters['Range-Unit'] = String(requestParameters['rangeUnit']);
        }

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_plans`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PortalPlansFromJSON));
    }

    /**
     * Available subscription plans for Portal Accounts
     */
    async portalPlansGet(requestParameters: PortalPlansGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PortalPlans> | null | undefined > {
        const response = await this.portalPlansGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 206:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Available subscription plans for Portal Accounts
     */
    async portalPlansPatchRaw(requestParameters: PortalPlansPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['portalPlanType'] != null) {
            queryParameters['portal_plan_type'] = requestParameters['portalPlanType'];
        }

        if (requestParameters['portalPlanTypeDescription'] != null) {
            queryParameters['portal_plan_type_description'] = requestParameters['portalPlanTypeDescription'];
        }

        if (requestParameters['planUsageLimit'] != null) {
            queryParameters['plan_usage_limit'] = requestParameters['planUsageLimit'];
        }

        if (requestParameters['planUsageLimitInterval'] != null) {
            queryParameters['plan_usage_limit_interval'] = requestParameters['planUsageLimitInterval'];
        }

        if (requestParameters['planRateLimitRps'] != null) {
            queryParameters['plan_rate_limit_rps'] = requestParameters['planRateLimitRps'];
        }

        if (requestParameters['planApplicationLimit'] != null) {
            queryParameters['plan_application_limit'] = requestParameters['planApplicationLimit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_plans`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PortalPlansToJSON(requestParameters['portalPlans']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Available subscription plans for Portal Accounts
     */
    async portalPlansPatch(requestParameters: PortalPlansPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalPlansPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Available subscription plans for Portal Accounts
     */
    async portalPlansPostRaw(requestParameters: PortalPlansPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['prefer'] != null) {
            headerParameters['Prefer'] = String(requestParameters['prefer']);
        }


        let urlPath = `/portal_plans`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PortalPlansToJSON(requestParameters['portalPlans']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Available subscription plans for Portal Accounts
     */
    async portalPlansPost(requestParameters: PortalPlansPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portalPlansPostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const PortalPlansDeletePreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type PortalPlansDeletePreferEnum = typeof PortalPlansDeletePreferEnum[keyof typeof PortalPlansDeletePreferEnum];
/**
 * @export
 */
export const PortalPlansGetPreferEnum = {
    Countnone: 'count=none'
} as const;
export type PortalPlansGetPreferEnum = typeof PortalPlansGetPreferEnum[keyof typeof PortalPlansGetPreferEnum];
/**
 * @export
 */
export const PortalPlansPatchPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none'
} as const;
export type PortalPlansPatchPreferEnum = typeof PortalPlansPatchPreferEnum[keyof typeof PortalPlansPatchPreferEnum];
/**
 * @export
 */
export const PortalPlansPostPreferEnum = {
    Returnrepresentation: 'return=representation',
    Returnminimal: 'return=minimal',
    Returnnone: 'return=none',
    ResolutionignoreDuplicates: 'resolution=ignore-duplicates',
    ResolutionmergeDuplicates: 'resolution=merge-duplicates'
} as const;
export type PortalPlansPostPreferEnum = typeof PortalPlansPostPreferEnum[keyof typeof PortalPlansPostPreferEnum];

# ============================================================================
# PostgREST Configuration File
# ============================================================================
# TODO_PRODUCTION: FOR LOCAL DEVELOPMENT ONLY - NOT FOR PRODUCTION USE
# Production deployments should use environment-specific secrets management
#
# Documentation: https://postgrest.org/en/stable/references/configuration.html

# ============================================================================
# DATABASE CONNECTION
# ============================================================================

# The database connection URI
# https://postgrest.org/en/stable/references/configuration.html#db-uri
db-uri = "postgresql://authenticator:authenticator_password@postgres:5432/portal_db"

# Database schemas to expose via the API
# https://postgrest.org/en/stable/references/configuration.html#db-schemas
db-schemas = "public,api"

# The database role to use when no client authentication is provided
# https://postgrest.org/en/stable/references/configuration.html#db-anon-role
db-anon-role = "anon"

# ============================================================================
# SERVER CONFIGURATION
# ============================================================================

# Where to bind the PostgREST web server
# https://postgrest.org/en/stable/references/configuration.html#server-host
server-host = "0.0.0.0"

# The TCP port to bind the web server
# https://postgrest.org/en/stable/references/configuration.html#server-port
server-port = 3000

# ============================================================================
# OPENAPI CONFIGURATION
# ============================================================================

# Specifies how the OpenAPI output should be displayed
# https://postgrest.org/en/stable/references/configuration.html#openapi-mode
openapi-mode = "follow-privileges"

# Overrides the base URL used within the OpenAPI self-documentation
# https://postgrest.org/en/stable/references/configuration.html#openapi-server-proxy-uri
openapi-server-proxy-uri = "http://localhost:3000"

# ============================================================================
# CORS CONFIGURATION
# ============================================================================

# Specifies allowed CORS origins (empty string allows all origins)
# https://postgrest.org/en/stable/references/configuration.html#server-cors-allowed-origins
server-cors-allowed-origins = ""

# ============================================================================
# REQUEST CONFIGURATION
# ============================================================================

# Transaction end behavior - commit changes after each request
# https://postgrest.org/en/stable/references/configuration.html#db-tx-end
db-tx-end = "commit"

# ============================================================================
# CONNECTION POOL CONFIGURATION
# ============================================================================

# Maximum number of connections in the database pool
# https://postgrest.org/en/stable/references/configuration.html#db-pool
db-pool = 10

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Specifies the level of information to be logged
# https://postgrest.org/en/stable/references/configuration.html#log-level
log-level = "info"

# ============================================================================
# JWT AUTHENTICATION CONFIGURATION - DUAL KEY SETUP
# ============================================================================
# JWT role claim key - specifies which JWT claim contains the database role
# https://postgrest.org/en/stable/references/configuration.html#jwt-role-claim-key
# Both JWT types use the standard ".role" claim
jwt-role-claim-key = ".role"

# JWT VERIFICATION PROCESS (handled automatically by PostgREST):
#   1. Client sends: Authorization: Bearer <JWT_TOKEN>
#   2. PostgREST extracts token from header
#   3. PostgREST verifies signature using jwt-secret JWKS below
#   4. If valid, PostgREST extracts claims from JWT payload
#   5. PostgREST looks for role claim (specified by jwt-role-claim-key)
#   6. PostgREST executes: SET ROLE <extracted_role>;
#   7. PostgREST sets JWT claims as transaction-scoped settings
#
# DUAL JWT SUPPORT:
# This configuration supports TWO types of JWTs simultaneously:
#
# 1. Backend/Internal JWTs (HS256):
#    - Algorithm: HS256 (symmetric key)
#    - No 'kid' in header
#    - Example payload:
#      {
#        "role": "portal_db_admin",
#        "email": "engineer@example.com",
#        "exp": 1758126390
#      }
#
# 2. Auth0 User JWTs (RS256):
#    - Generated by Auth0
#    - Algorithm: RS256 (asymmetric key)
#    - 'kid': "1a2b3c4d5e6f7g8h9i0j" in header
#    - Example payload:
#      {
#        "role": "authenticated_user",
#        "sub": "auth0|1a2b3c4d5e6f7g8h9i0j",
#        "aud": "https://api.eggs.town/",
#        "exp": 1760197313
#      }
#
# PostgREST automatically routes to the correct key based on JWT header:
# - No 'kid' -> Uses HS256 key
# - kid="1a2b3c4d5e6f7g8h9i0j" -> Uses Auth0 RS256 key
#
# JWKS (JSON Web Key Set) containing both HS256 and RS256 keys
# https://postgrest.org/en/stable/references/configuration.html#jwt-secret
#
# ðŸŒ¿ GROVE EMPLOYEES ONLY:
#    To download the JWKS file, run:
#      make grove-download-jwks
#    This will download the JWKS file to the api/jwks.json file.
#
# IMPORTANT: The JWKS file contains:
#   1. HS256 key (no kid) for backend/internal JWTs
#      - The 'k' value is the base64url encoding of the LITERAL SECRET STRING
#      - NOT the decoded bytes of a base64 secret, but the string itself as ASCII bytes
#      - Example: If JWT generator uses "mySecret123" as the HMAC key,
#        then k = base64url("mySecret123") = "bXlTZWNyZXQxMjM"
#
#   2. RS256 key (kid="1a2b3c4d5e6f7g8h9i0j") for Auth0 user JWTs
#      - Standard RSA public key in JWK format from Auth0 JWKS endpoint
#
# File location: Mounted in Docker at /etc/postgrest/jwks.json (see docker-compose.yml)
# Security: jwks.json is gitignored and contains all sensitive key material
#   - /etc/postgrest/jwks.json is mounted in Docker from portal-db/api/jwks.json
jwt-secret = "@/etc/postgrest/jwks.json"

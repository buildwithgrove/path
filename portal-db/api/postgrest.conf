# ============================================================================
# PostgREST Configuration File
# ============================================================================
# Documentation: https://postgrest.org/en/stable/references/configuration.html

# ============================================================================
# DATABASE CONNECTION
# ============================================================================

# The database connection URI
# https://postgrest.org/en/stable/references/configuration.html#db-uri
db-uri = "postgresql://authenticator:authenticator_password@postgres:5432/portal_db"

# Database schemas to expose via the API
# https://postgrest.org/en/stable/references/configuration.html#db-schemas
db-schemas = "public,api"

# The database role to use when no client authentication is provided
# https://postgrest.org/en/stable/references/configuration.html#db-anon-role
db-anon-role = "anon"

# ============================================================================
# SERVER CONFIGURATION
# ============================================================================

# Where to bind the PostgREST web server
# https://postgrest.org/en/stable/references/configuration.html#server-host
server-host = "0.0.0.0"

# The TCP port to bind the web server
# https://postgrest.org/en/stable/references/configuration.html#server-port
server-port = 3000

# ============================================================================
# OPENAPI CONFIGURATION
# ============================================================================

# Specifies how the OpenAPI output should be displayed
# https://postgrest.org/en/stable/references/configuration.html#openapi-mode
openapi-mode = "follow-privileges"

# Overrides the base URL used within the OpenAPI self-documentation
# https://postgrest.org/en/stable/references/configuration.html#openapi-server-proxy-uri
openapi-server-proxy-uri = "http://localhost:3000"

# ============================================================================
# CORS CONFIGURATION
# ============================================================================

# Specifies allowed CORS origins (empty string allows all origins)
# https://postgrest.org/en/stable/references/configuration.html#server-cors-allowed-origins
server-cors-allowed-origins = ""

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Specifies the level of information to be logged
# https://postgrest.org/en/stable/references/configuration.html#log-level
log-level = "info"

# ============================================================================
# JWT AUTHENTICATION CONFIGURATION
# ============================================================================
#
# JWT VERIFICATION PROCESS (handled automatically by PostgREST):
#   1. Client sends: Authorization: Bearer <JWT_TOKEN>
#   2. PostgREST extracts token from header
#   3. PostgREST verifies signature using jwt-secret below
#   4. If valid, PostgREST extracts claims from JWT payload
#   5. PostgREST looks for role claim (specified by jwt-role-claim-key)
#   6. PostgREST executes: SET ROLE <extracted_role>;
#   7. PostgREST sets JWT claims as transaction-scoped settings
#
# Example JWT payload generated by tmp/gen-jwt.js:
# {
#   "role": "authenticated",          <- Used for SET ROLE command
#   "email": "john@doe.com",          <- Available via current_setting()
#   "exp": 1758126390                 <- Token expiration
# }

# Secret for JWT token verification (32+ characters required)
# https://postgrest.org/en/stable/references/configuration.html#jwt-secret
# WARNING: Use a secure random secret in production!
# MUST match the secret used in tmp/gen-jwt.js for token generation
jwt-secret = "supersecretjwtsecretforlocaldevelopment123456789"

# JWT role claim key - specifies which JWT claim contains the database role
# https://postgrest.org/en/stable/references/configuration.html#jwt-role-claim-key
# The "." prefix indicates JSON path: payload.role -> "authenticated" or "anon"
jwt-role-claim-key = ".role"

# JWT audience claim verification (optional security hardening)
# https://postgrest.org/en/stable/references/configuration.html#jwt-aud
# Ensures JWTs are intended specifically for this PostgREST API
jwt-aud = "postgrest"

# ============================================================================
# REQUEST CONFIGURATION
# ============================================================================

# Transaction end behavior - commit changes after each request
# https://postgrest.org/en/stable/references/configuration.html#db-tx-end
db-tx-end = "commit"

# Pre-request hook to set statement timeout (prevents long-running queries)
# https://postgrest.org/en/stable/references/configuration.html#db-pre-request
# Uncomment in production to prevent runaway queries from blocking resources
# db-pre-request = "SET statement_timeout = '10s';"

# ============================================================================
# CONNECTION POOL CONFIGURATION
# ============================================================================

# Maximum number of connections in the database pool
# https://postgrest.org/en/stable/references/configuration.html#db-pool
db-pool = 10

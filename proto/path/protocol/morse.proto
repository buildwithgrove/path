syntax = "proto3";
package path.protocol;

option go_package = "github.com/buildwithgrove/path/observation/protocol";

import "google/protobuf/timestamp.proto";

// MorseRequestErrorType enumerates possible relay request errors.
enum MorseRequestErrorType {
  MORSE_REQUEST_ERROR_UNSPECIFIED = 0;
  // Internal error: e.g. no endpoint selected for serving the request.
  MORSE_REQUEST_ERROR_INTERNAL = 1;
}

// MorseEndpointErrorType enumerates possible relay errors when interacting with Morse endpoints
enum MorseEndpointErrorType {
  MORSE_ENDPOINT_ERROR_UNSPECIFIED = 0;
  MORSE_ENDPOINT_ERROR_CONNECTION_FAILED = 1;
  MORSE_ENDPOINT_ERROR_TIMEOUT = 2;
  MORSE_ENDPOINT_ERROR_MAXED_OUT = 3;
  // This error indicates the endpoint returned an SDK/pocket-core error as its response.
  MORSE_ENDPOINT_ERROR_POCKET_CORE = 4;
  MORSE_ENDPOINT_ERROR_TLS_CERTIFICATE_VERIFICATION_FAILED = 5;
  MORSE_ENDPOINT_ERROR_INVALID_RESPONSE = 6;
  // This error indicates that the endpoint returned invalid data in its response and was rejected by the SDK.
  // This is important because the `protocol` package should not attempt to parse the response contents.
  MORSE_ENDPOINT_ERROR_NON_JSON_RESPONSE = 7;
  // This error indicates the endpoint returned a 4xx HTTP status code.
  MORSE_ENDPOINT_ERROR_HTTP_4XX_RESPONSE = 8;
  // This error indicates the endpoint returned a 5xx HTTP status code.
  MORSE_ENDPOINT_ERROR_HTTP_5XX_RESPONSE = 9;

  // This error indicates the endpoint returned an HTTP response with a mismatch between ContentLength header and actual body length.
  // Mostly encountered as ContentLength > 0 with an actual body length of 0.
  MORSE_ENDPOINT_ERROR_HTTP_LENGTH_HEADER_MISMATCH = 10;

  // Internal gateway errors
  MORSE_ENDPOINT_ERROR_INTERNAL = 11;

  // This error indicates the endpoint returned an error on executing the HTTP request.
  // The SDK does not catch this, so the error string contains `error executing the http request: blockchain request`.
  // NOT the same as 4xx or 5xx, which are captured and returned by the SDK:
  // Reference:
  // https://github.com/pokt-foundation/pocket-go/blob/0cb5a3a2ab762e7af18b3482f864d2d9d211a71f/provider/provider.go#L24-26
  MORSE_ENDPOINT_ERROR_EXECUTING_HTTP_REQUEST = 12;
}

// TODO_DOCUMENT(@adshmh): Document the sanction system in the Morse protocol implementation:
// - Enumerate all sanction types with their specific triggers
// - Detail error conditions that activate each sanction category
// - Explain the rationale behind each sanction's severity level
// - Specify sanction durations and how they're calculated
// - Document potential escalation path for repeated violations
// - Include examples of boundary cases where sanctions apply/don't apply
//
// MorseSanctionType specifies the duration type for endpoint sanctions
enum MorseSanctionType {
  MORSE_SANCTION_UNSPECIFIED = 0;
  // Valid only for current session
  MORSE_SANCTION_SESSION = 1;
 // Sanction persists indefinitely; can only be cleared by Gateway restart (e.g., redeploying the K8s pod or restarting the binary)
  MORSE_SANCTION_PERMANENT = 2;
}

// MorseRequestObservations contains Morse-specific observations collected from relays
// handling a single service request.
message MorseRequestObservations {
  // Service ID (i.e. chain ID) for which the observation was made
  string service_id = 1;

  // Error encountered processing the request, if any.
  optional MorseRequestError request_error = 2;

  // Tracks endpoint observation(s).
  // Only set if the request did not encounter any errors, e.g. an internal error.
  // Multiple observations possible if:
  // - Original endpoint returns invalid response
  // - Retry mechanism activates
  repeated MorseEndpointObservation endpoint_observations = 3;
}

// MorseRequestError stores details of any errors encountered processing the request.
message MorseRequestError {
	// Type of request error, e.g. internal
	MorseRequestErrorType error_type = 1;
	// Details of the request error.
	string error_details = 2;
}

// MorseEndpointObservation stores a single observation from an endpoint
message MorseEndpointObservation {
  // Address of the endpoint handling the request
  string endpoint_addr = 1;
  // URL of the endpoint handling the request
  string endpoint_url = 2;

  // Application address that signed the associated relay
  string app_address = 3;
  // Public key of the application that signed the associated relay
  string app_public_key = 4;

  // Session information when available
  string session_key = 5;
  string session_service_id = 6;
  // Session height
  int32 session_height = 7;

  // Timestamp marking the sending of the request to the endpoint.
  google.protobuf.Timestamp endpoint_query_timestamp = 8;
  
  // Timestamp marking the reception of the endpoint's response.
  // Only set if the endpoint did not timeout.
  optional google.protobuf.Timestamp endpoint_response_timestamp = 9;

  // Error type if relay to this endpoint failed
  optional MorseEndpointErrorType error_type = 10;
  
  // Additional error details when available
  optional string error_details = 11;
  
  // Recommended sanction type based on the error
  optional MorseSanctionType recommended_sanction = 12;
}

// TODO_MVP(@adshmh): Assess if a list of observations (vs. just a list of endpoint observarions) is needed per service request.
// Drop the MorseObservationsList if it is not yet required.
// 
// MorseObservationsList is a wrapper message that enables embedding lists of
// Morse observations in other protocol buffers.
message MorseObservationsList {
  repeated MorseRequestObservations observations = 1;
}

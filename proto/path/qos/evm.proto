syntax = "proto3";

// TODO_TECHDEBT(@adshmh): Address linter warning on all the .proto files.
// TODO_TECHDEBT(@adshmh): Package name "path.qos" should be suffixed with a correctly formed version, such as "path.qos.v1"
//
// Buf used as linter for proto files:
// https://buf.build/docs/lint/overview/
package path.qos;

// TODO_UPNEXT(@adshmh): Organize qos & observation code + structures like so:
// - Separate out `evm.proto` into `evm_qos.proto` and `evm_observation.proto`
// - Organize code under the `observations` package into appropriate `observation/qos/evm/**` files like it's done in `qos/evm/**`
// Why the TODO?
// As a reader of the code, the separation of concerns yet simultaneous overlap of data & primitives
// leads to very confusing conflation between qos (i.e. request/responses) with observations (i.e. metrics/data).

option go_package = "github.com/buildwithgrove/path/observation/qos";

import "path/qos/jsonrpc.proto";
import "path/qos/request_origin.proto";
import "path/qos/endpoint_selection_metadata.proto";
import "path/metadata/metadata.proto";

// EVMRequestValidationError enumerates possible causes for EVM request rejection:
// Invalid request types (as of PR #186):
//   1. Internal server error while reading the HTTP request body
//   2. Unmarshal error when parsing request into the expected format
enum EVMRequestValidationError {
  EVM_REQUEST_VALIDATION_ERROR_UNSPECIFIED = 0;
  EVM_REQUEST_VALIDATION_ERROR_HTTP_BODY_READ_FAILURE = 1;
  EVM_REQUEST_VALIDATION_ERROR_REQUEST_UNMARSHALING_FAILURE = 2;
}

// TODO_DOCUMENT(@adshmh): Create a design document for the feature described below.
// TODO_MVP(@adshmh): Add EVMUserErrorType enum
//
// Purpose: Distinguish between endpoint technical failures and user input errors
//
// Background:
// - Currently we only track endpoint/technical failures
// - Need to identify when request seems valid but fails due to user input issues (e.g., non-existent hash)
//
// Implementation:
// 1. Create new EVMUserErrorType enum with categories like RESOURCE_NOT_FOUND, INVALID_PARAMETER
// 2. Add user_error field to appropriate response types
// 3. Update HTTP status code selection logic to consider user errors
//
// Benefits:
// - More accurate error reporting to clients
// - Appropriate HTTP status codes (e.g., 404 vs 500)
// - Better client debugging experience
//
// EVMResponseValidationError defines why an endpoint response was rejected.
// Current invalid response types (as of PR #186):
//   1. EmptyResponse - endpoint returned no data
//   2. UnmarshalErr - response failed to parse into expected format
//   3. NoResponse - no responses recorded by the QoS service: probably caused by protocol-level errors
enum EVMResponseValidationError {
	EVM_RESPONSE_VALIDATION_ERROR_UNSPECIFIED = 0;
	EVM_RESPONSE_VALIDATION_ERROR_EMPTY = 1;      // Response with no data.
	EVM_RESPONSE_VALIDATION_ERROR_UNMARSHAL = 2;  // Response parsing failed
	EVM_RESPONSE_VALIDATION_ERROR_NO_RESPONSE = 3;  // No response received from any endpoint
}

// EVMRequestObservations captures all observations made while serving a single EVM blockchain service request.
message EVMRequestObservations {
  // Next ID: 11

  // JsonRpcRequest and endpoint_observations are no longer supported.
  // They are replaced by EVMRequestObservation.
  reserved 5, 6;
  reserved "jsonrpc_request", "endpoint_observations";

  // chain_id is the blockchain identifier for the evm QoS implementation.
  // This is preset by the processor and not determined by the request.
  // Expected as the `Result` field in eth_chainId responses.
  string chain_id = 1;

  // service_id is the identifier for the evm QoS implementation.
  // It is the "alias" or human readable interpratation of the chain_id.
  string service_id = 7;

  // The origin of the request:
  // - Organic: real (i.e. user) requests
  // - Synthetic: requests built by QoS module for collecting data on endpoints (a.k.a hydrator)
  RequestOrigin request_origin = 8;

  // The length of the client's request payload, in bytes.
  uint32 request_payload_length = 2;

  // If this oneof IS SET, then one of the following validation failures happened:
  //  - Indicates the request failed validation
  //  - Contains details about the specific failure type
  //  - The HTTP status code in the selected failure type overrides any status codes from
  //    endpoint observations and should be returned to the client
  // If this oneof IS NOT SET, then one of the following occurred:
  //  - The request passed validation
  //  - The HTTP status code from the most recent endpoint observation should be used instead
  oneof request_validation_failure {
    // Indicates a failure to read the HTTP request body
    EVMHTTPBodyReadFailure evm_http_body_read_failure = 3;

    // Indicates a failure to unmarshal/parse the request
    EVMRequestUnmarshalingFailure evm_request_unmarshaling_failure = 4;
  }

  // Each request may have multiple observations to support batch requests.
  repeated EVMRequestObservation request_observations = 10;

  // endpoint_selection_metadata contains metadata about the endpoint selection process.
  EndpointSelectionMetadata endpoint_selection_metadata = 9;
}

message EVMRequestObservation {
   // The EVM blockchain service's JSON-RPC request.
  // This field will be populated only if request validation succeeds.
  // If there is an error reading the HTTP request, there will be no jsonrpc_request.
  // TODO_TECHDEBT: Assumes EVM chains only support JSON-RPC. May need refactoring to support other protocols.
  JsonRpcRequest jsonrpc_request = 5;

    // EVM-specific observations from endpoint(s) that responded to the service request.
  // Multiple observations may occur when:
  // * Original endpoint fails
  // * Request is sent to additional endpoints for data collection
  // This field will only be populated if request validation succeeds.
  repeated EVMEndpointObservation endpoint_observations = 6;
}

// TODO_MVP(@adshmh): Remove HTTP body read validation once QoS interface is updated
// to receive request payload directly rather than reading from the HTTP request body.
//
// EVMHTTPBodyReadFailure represents a validation failure due to internal server error
// while attempting to read the HTTP request body.
message EVMHTTPBodyReadFailure {
  // The HTTP status code to return to the client - typically 500 Internal Server Error
  int32 http_status_code = 1;

  // The specific type of request validation error
  EVMRequestValidationError validation_error = 2;

  // Additional error details if available
  optional string error_details = 3;
}

// EVMRequestUnmarshalingFailure represents a validation failure due to being unable
// to parse the incoming request into the expected format.
message EVMRequestUnmarshalingFailure {
  // The HTTP status code to return to the client - typically 400 Bad Request
  int32 http_status_code = 1;

  // The specific type of request validation error
  EVMRequestValidationError validation_error = 2;

  // Additional error details if available
  optional string error_details = 3;
}

// EVMEndpointObservation stores a single observation from an endpoint servicing the protocol response.
// Example: A Pocket node on Shannon backed by an Ethereum data node servicing an `eth_getBlockNumber` request.
message EVMEndpointObservation {
  // Address of the endpoint handling the request (e.g., onchain address of a Pocket Shannon node)
  string endpoint_addr = 1;

  // Details of the response received from the endpoint
  oneof response_observation {
    // Response to `eth_chainId` request
    // Reference: https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid
    EVMChainIDResponse chain_id_response = 2;

    // Response to `eth_blockNumber` request
    // References:
    // * https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber
    // * Chain IDs: https://chainlist.org
    EVMBlockNumberResponse block_number_response = 3;

    // Response to `eth_getBalance` request, which may be used to update archival state.
    // See the EVMGetBalanceResponse message for more details.
    // References:
    // * https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance
    EVMGetBalanceResponse get_balance_response = 4;

    // Responses not used in endpoint validation (e.g., JSONRPC ID field from `eth_call`)
    EVMUnrecognizedResponse unrecognized_response = 5;

    // EVMEmptyResponse indicates an endpoint returned no data.
    // Used to:
    //   - Disqualify endpoints that return empty responses
    //   - Track metrics for empty response patterns
    EVMEmptyResponse empty_response = 6;

    // EVMNoResponse indicates no response was received from any endpoint.
    // This differs from EVMEmptyResponse as no response was reported by the protocol.
    EVMNoResponse no_response = 7;
  }
}

// TODO_MVP(@adshmh): Implement a consolidated SanctionObservation message structure that:
//   1. Contains both SanctionType enum and RecommendedSanction field
//   2. Can be embedded as a single field within all qos/Response.proto messages
//   3. Ensures sanction policies are explicitly documented within message definitions
//   4. Search for all instances of RecommendedSanction in the codebase and use this new structure instead
//
// EVMChainIDResponse stores the response to an `eth_chainId` request
// https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid
message EVMChainIDResponse {
  // The HTTP status code received from the endpoint
  int32 http_status_code = 1;

  // The chain ID value returned in the response
  string chain_id_response = 2;

  // Why the response failed QoS validation
  // If not set, the response is considered valid
  optional EVMResponseValidationError response_validation_error = 3 [(metadata.semantic_meaning) = "Validation failure type"];
}

// EVMBlockNumberResponse stores the response to an `eth_getBlockNumber` request
// https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber
message EVMBlockNumberResponse {
  // The HTTP status code received from the endpoint
  int32 http_status_code = 1;

  // The block number value returned in the response
  string block_number_response = 2;

  // Why the response failed QoS validation
  // If not set, the response is considered valid
  optional EVMResponseValidationError response_validation_error = 3 [(metadata.semantic_meaning) = "Validity failure type"];
}

// EVMGetBalanceResponse stores the response to an `eth_getBalance` request.
// https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance
message EVMGetBalanceResponse {
  // The HTTP status code received from the endpoint
  int32 http_status_code = 1;

  // The contract address for which the the balance is checked.
  string contract_address = 2;

  // The block number at which the balance is checked.
  string block_number = 3;

  // The balance value at the block number for the address provided.
  string balance = 4;

  // Why the response failed QoS validation
  // If not set, the response is considered valid
  optional EVMResponseValidationError response_validation_error = 5 [(metadata.semantic_meaning) = "Validity failure type"];
}

// EVMUnrecognizedResponse handles requests with unrecognized/unvalidated response methods for QoS endpoint selection.
// - Example: eth_call response contents used for endpoint validation (as of PR #72)
// - Sanctions still apply to endpoints returning invalid responses (e.g. unparsable JSONRPC)
message EVMUnrecognizedResponse {
  // The HTTP status code received from the endpoint
  int32 http_status_code = 1;

  // The JSON-RPC response received
  JsonRpcResponse jsonrpc_response = 2;

  // Why the response failed QoS validation
  // If not set, the response is considered valid
  optional EVMResponseValidationError response_validation_error = 3 [(metadata.semantic_meaning) = "Validity failure type"];
}

// EVMEmptyResponse represents an endpoint's empty response, which triggers
// automatic endpoint disqualification by EVM QoS processors.
message EVMEmptyResponse {
  // The HTTP status code represents the status code sent to the client when the chosen endpoint returns an empty response.
  int32 http_status_code = 1;

  // Always set to EMPTY for empty responses
  EVMResponseValidationError response_validation_error = 2 [(metadata.semantic_meaning) = "Validity failure type"];
}

// EVMNoResponse represents a situation where no responses were reported to QoS by the protocol.
// This is due to protocol failures, e.g. if the selected endpoint was maxed out.
message EVMNoResponse {
  // The HTTP status code to return, typically 503 Service Unavailable
  int32 http_status_code = 1;

  // Always set to NO_RESPONSE for this scenario
  EVMResponseValidationError response_validation_error = 2 [(metadata.semantic_meaning) = "Validity failure type"];
}
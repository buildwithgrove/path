syntax = "proto3";
package path.qos;

option go_package = "github.com/buildwithgrove/path/observation/qos";

import "path/qos/jsonrpc.proto";
import "path/metadata/metadata.proto";

// EVMRequestValidationErrorKind enumerates possible causes for EVM request rejection:
// Invalid request types (as of PR #165):
//   1. Internal server error while reading the HTTP request body
//   2. Unmarshal error when parsing request into the expected format
enum EVMRequestValidationErrorKind {
  EVM_REQUEST_VALIDATION_ERROR_KIND_UNSPECIFIED = 0;
  EVM_REQUEST_VALIDATION_ERROR_KIND_HTTP_BODY_READ_FAILURE = 1;
  EVM_REQUEST_VALIDATION_ERROR_KIND_REQUEST_UNMARSHALING_FAILURE = 2;
}

// EVMResponseInvalidReason defines why an endpoint response was rejected.
// Current invalid response types (as of PR #164):
//   1. EmptyResponse - endpoint returned no data
//   2. UnmarshalErr - response failed to parse into expected format
enum EVMResponseInvalidReason {
	EVM_RESPONSE_INVALID_REASON_UNSPECIFIED = 0;
	EVM_RESPONSE_INVALID_REASON_EMPTY = 1;      // No response data received
	EVM_RESPONSE_INVALID_REASON_UNMARSHAL = 2;  // Response parsing failed
}

// EVMRequestObservations captures all observations made while serving a single EVM blockchain service request.
message EVMRequestObservations {
  // The EVM blockchain service's JSON-RPC request.
  // TODO_TECHDEBT: Assumes EVM chains only support JSON-RPC. May need refactoring to support other protocols.
  JsonRpcRequest jsonrpc_request = 1;

  // EVM-specific observations from endpoint(s) that responded to the service request.
  // Multiple observations may occur when:
  // * Original endpoint fails
  // * Request is sent to additional endpoints for data collection
  repeated EVMEndpointObservation endpoint_observations = 2;

  // chainID is the blockchain identifier for the evm QoS implementation.
  // Expected as the `Result` field in eth_chainId responses.
  string chain_id = 3;

  // Specifies the reason an EVM request failed validation.
  optional EVMRequestValidationErrorKind request_validation_error_kind = 4;
}

// EVMEndpointObservation stores a single observation from an endpoint servicing the protocol response.
// Example: A Pocket node on Shannon backed by an Ethereum data node servicing an `eth_getBlockNumber` request.
message EVMEndpointObservation {
  // Address of the endpoint handling the request (e.g., onchain address of a Pocket Morse/Shannon node)
  string endpoint_addr = 1;

  // Details of the response received from the endpoint
  oneof response_observation {
    // Response to `eth_chainId` request
    // Reference: https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid
    EVMChainIDResponse chain_id_response = 2;

    // Response to `eth_blockNumber` request
    // References:
    // * https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber
    // * Chain IDs: https://chainlist.org
    EVMBlockNumberResponse block_number_response = 3;

    // Responses not used in endpoint validation (e.g., JSONRPC ID field from `eth_call`)
    EVMUnrecognizedResponse unrecognized_response = 4;

    // EVMEmptyResponse indicates an endpoint returned no data.
    // Used to:
    //   - Disqualify endpoints that return empty responses
    //   - Track metrics for empty response patterns
    EVMEmptyResponse empty_response = 5;
  }
  // TODO_MVP(@adshmh): add observations for archival checks.
}

// EVMChainIDResponse stores the response to an `eth_chainId` request
// https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid
message EVMChainIDResponse {
  string chain_id_response = 1;

  // Whether the response is deemed valid by QoS
  bool valid = 2 [(metadata.semantic_meaning) = "Response validity status"];

  // Why the response failed QoS validation
  optional EVMResponseInvalidReason invalid_reason = 3 [(metadata.semantic_meaning) = "Validation failure reason"];
}

// EVMBlockNumberResponse stores the response to an `eth_getBlockNumber` request
// https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber
message EVMBlockNumberResponse {
  string block_number_response = 1;

  // Whether the response is deemed valid by QoS
  bool valid = 2 [(metadata.semantic_meaning) = "Response validity status"];

  // Why the response failed QoS validation
  optional EVMResponseInvalidReason invalid_reason = 3 [(metadata.semantic_meaning) = "Validity failure reason"];
}

// EVMUnrecognizedResponse handles requests with methods ignored by state update and endpoint validation
// Example: As of PR #72, `eth_call` requests are not used for endpoint validation
message EVMUnrecognizedResponse {
  JsonRpcResponse jsonrpc_response = 1;

  // Whether the response is deemed valid by QoS
  bool valid = 2 [(metadata.semantic_meaning) = "Response validity status"];

  // Why the response failed QoS validation
  optional EVMResponseInvalidReason invalid_reason = 3 [(metadata.semantic_meaning) = "Validity failure reason"];
}

// EVMEmptyResponse represents an endpoint's empty response, which triggers
// automatic endpoint disqualification by EVM QoS processors.
message EVMEmptyResponse {
  // valid indicates if response meets QoS criteria
  // Always false for empty responses
  bool valid = 1 [(metadata.semantic_meaning) = "Response validity status"];

  // Why the response failed QoS validation
  // Set to EmptyResponse for empty responses
  optional EVMResponseInvalidReason invalid_reason = 2 [(metadata.semantic_meaning) = "Validity failure reason"];
}

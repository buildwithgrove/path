syntax = "proto3";
package path.qos;

option go_package = "github.com/buildwithgrove/path/observation/qos";

// RequestErrorKind enumerates possible request errors.
enum RequestErrorKind {
  REQUEST_ERROR_UNSPECIFIED = 0;
  REQUEST_ERROR_INTERNAL_READ_HTTP_ERROR = 1; // Internal error: reading HTTP request's body failed.
  REQUEST_ERROR_INTERNAL_PROTOCOL_ERROR = 2; // Internal error: protocol error: e.g. no endpoint responses received.
  REQUEST_ERROR_USER_ERROR_JSONRPC_PARSE_ERROR = 3; // User error: Request failed to parse as JSONRPC.
  REQUEST_ERROR_USER_ERROR_JSONRPC_SERVICE_DETECTION_ERROR = 4; // User error: Failed to detect service type from JSONRPC method.
  REQUEST_ERROR_USER_ERROR_JSONRPC_UNSUPPORTED_RPC_TYPE = 5; // User error: JSONRPC method maps to unsupported RPC type.
  REQUEST_ERROR_INTERNAL_JSONRPC_PAYLOAD_BUILD_ERROR = 6; // Internal error: Failed to build service payload from JSONRPC request.
  REQUEST_ERROR_USER_ERROR_REST_SERVICE_DETECTION_ERROR = 7; // User error: Failed to detect service type from REST request.
  REQUEST_ERROR_USER_ERROR_REST_UNSUPPORTED_RPC_TYPE = 8; // User error: unsupported service type in REST request.
}

// RequestError tracks the details of a request error.
message RequestError {
  // Tracks the kind of error: e.g. internal.
  RequestErrorKind error_kind = 1;

  // Tracks details of the error.
  string error_details = 2;

  // TODO_MVP(@adshm): drop this in favor of JUDGE's solution:
  // store the JSONRPC Response's details (specifically the `code` field).
  // The HTTP status can be derived from the JSONRPC response.
  int32 http_status_code = 3;
}

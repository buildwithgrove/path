syntax = "proto3";
package path.qos;

option go_package = "github.com/buildwithgrove/path/observation/qos";

import "path/qos/jsonrpc.proto";
import "path/qos/request_origin.proto";
import "path/qos/request_error.proto";
import "path/qos/jsonrpc_validation_error.proto";

// SolanaRequestObservations captures QoS data for a single Solana blockchain service request,
// including all observations made during potential retries.
message SolanaRequestObservations {
  // chain_id is the blockchain identifier for the QoS implementation.
  // This is preset by the processor and not determined by the request.
  // Used by metrics and data pipeline.
  string chain_id = 1;

  // service_id is the identifier for the QoS implementation.
  // It is the "alias" or human readable interpratation of the chain_id.
  string service_id = 2;

  // The length of the client's request payload, in bytes.
  uint32 request_payload_length = 3;

  // The origin of the request: user vs. QoS service (requests built by QoS for collecting data on endpoints)
  RequestOrigin request_origin = 4;

  // Tracks request errors, if any.
  optional RequestError request_error = 5;

  // JSON-RPC request to the Solana blockchain service.
  // Only set if the HTTP request payload was successfully parsed into JSONRPC.
  // TODO_TECHDEBT: This assumes all SolanaVM blockchains only (and always) support JSON-RPC.
  // May need expansion/refactoring for future blockchain support.
  optional JsonRpcRequest jsonrpc_request = 6;

  // Multiple observations possible if:
  // - Original endpoint returns invalid response
  // - Retry mechanism activates
  repeated SolanaEndpointObservation endpoint_observations = 7;
}

// TODO_MVP(@adshmh): add unmarshaling error tracker to endpoint observations.
//
// SolanaEndpointObservation captures a single endpoint's response to a request
message SolanaEndpointObservation {
  // Address of the endpoint handling the request
  string endpoint_addr = 1;

  // HTTP status code returned to the user.
  // It is derived from either:
  //   - The endpoint payload parsed as a JSONRPC response.
  //   - A generic JSONRPC error response if the endpoint payload fails to parse.
  int32 http_status_code = 2;

  oneof response_observation {
    // Response from getEpochInfo
    // Docs: https://solana.com/docs/rpc/http/getepochinfo
    SolanaGetEpochInfoResponse get_epoch_info_response = 3;

    // Response from getHealth
    // Docs: https://solana.com/docs/rpc/http/gethealth
    SolanaGetHealthResponse get_health_response = 4;

    // Responses not used in endpoint validation (e.g., getAccountInfo)
    SolanaUnrecognizedResponse unrecognized_response = 5;
  }
}

// SolanaEpochInfoResponse stores getEpochInfo response data
// Docs: https://solana.com/docs/rpc/http/getepochinfo
message SolanaGetEpochInfoResponse {
  // Stored as uint64 for cross-instance validation
  uint64 block_height = 1;
  uint64 epoch = 2;
}

// SolanaGetHealthResponse stores getHealth response data
// Docs: https://solana.com/docs/rpc/http/gethealth
message SolanaGetHealthResponse {
  string result = 1;
}

// SolanaUnrecognizedResponse stores responses from methods not used in validation
// Examples: getTokenSupply, getTransaction
message SolanaUnrecognizedResponse {
  JsonRpcResponse jsonrpc_response = 1;

  // Optional validation error information
  optional JsonRpcResponseValidationError validation_error = 2;
}

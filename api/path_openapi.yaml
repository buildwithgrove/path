openapi: 3.0.3
info:
  title: PATH - Path API & Toolkit Harness
  description: PATH (Path API & Toolkit Harness) is an open source framework for enabling access to a decentralized supply network. It provides various tools and libraries to streamline the integration and interaction with decentralized protocols.
  version: 1.0.0
  contact:
    name: Grove Engineering
    email: engineering@grove.city
servers:
  - url: https://rpc.grove.city
    description: Production PATH URL
  - url: http://localhost:3069
    description: Local PATH instance
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    ServiceID:
      type: string
      default: eth
  parameters:
    TargetServiceIdParam:
      name: Target-Service-Id
      in: header
      required: true
      description: The service ID to route the request to
      schema:
        type: string
      examples:
        arb_one:
          value: arb_one
          summary: Arbitrum One
        arb_sep_test:
          value: arb_sep_test
          summary: Arbitrum Sepolia Testnet
        avax:
          value: avax
          summary: Avalanche
        avax-dfk:
          value: avax-dfk
          summary: Avalanche DFK
        base:
          value: base
          summary: Base
        base-test:
          value: base-test
          summary: Base Testnet
        bera:
          value: bera
          summary: Berachain
        bitcoin:
          value: bitcoin
          summary: Bitcoin
        blast:
          value: blast
          summary: Blast
        boba:
          value: boba
          summary: Boba Network
        bsc:
          value: bsc
          summary: Binance Smart Chain
        celo:
          value: celo
          summary: Celo
        eth:
          value: eth
          summary: Ethereum
        eth_hol_test:
          value: eth_hol_test
          summary: Ethereum Holesky Testnet
        eth_sep_test:
          value: eth_sep_test
          summary: Ethereum Sepolia Testnet
        evmos:
          value: evmos
          summary: Evmos
        fantom:
          value: fantom
          summary: Fantom
        fraxtal:
          value: fraxtal
          summary: Fraxtal
        fuse:
          value: fuse
          summary: Fuse
        gnosis:
          value: gnosis
          summary: Gnosis
        harmony:
          value: harmony
          summary: Harmony
        ink:
          value: ink
          summary: Ink
        iotex:
          value: iotex
          summary: IoTeX
        kaia:
          value: kaia
          summary: Kaia
        kava:
          value: kava
          summary: Kava
        linea:
          value: linea
          summary: Linea
        mantle:
          value: mantle
          summary: Mantle
        metis:
          value: metis
          summary: Metis
        moonbeam:
          value: moonbeam
          summary: Moonbeam
        moonriver:
          value: moonriver
          summary: Moonriver
        near:
          value: near
          summary: Near
        oasys:
          value: oasys
          summary: Oasys
        op:
          value: op
          summary: Optimism
        op_sep_test:
          value: op_sep_test
          summary: Optimism Sepolia Testnet
        opbnb:
          value: opbnb
          summary: Optimism BNB
        pocket:
          value: pocket
          summary: Pocket Network
        poly:
          value: poly
          summary: Polygon
        poly_amoy_test:
          value: poly_amoy_test
          summary: Polygon Amoy Testnet
        poly_zkevm:
          value: poly_zkevm
          summary: Polygon zkEVM
        radix:
          value: radix
          summary: Radix
        scroll:
          value: scroll
          summary: Scroll
        sei:
          value: sei
          summary: Sei
        sonic:
          value: sonic
          summary: Sonic
        sui:
          value: sui
          summary: Sui
        taiko:
          value: taiko
          summary: Taiko
        taiko_hek_test:
          value: taiko_hek_test
          summary: Taiko Hekla Testnet
        tron:
          value: tron
          summary: Tron
        xrpl_evm_dev:
          value: xrpl_evm_dev
          summary: XRPL EVM Dev
        xrpl_evm_testnet:
          value: xrpl_evm_testnet
          summary: XRPL EVM Testnet
        zklink_nova:
          value: zklink_nova
          summary: zkLink Nova
        zksync_era:
          value: zksync_era
          summary: zkSync Era
security:
  - ApiKeyAuth: []
paths:
  /v1:
    post:
      tags:
        - Service Requests
      summary: JSON-RPC Service Request
      description: Handles JSON-RPC service requests. This endpoint processes API requests and forwards them to the appropriate endpoint in the Pocket Network.
      operationId: handleServiceRequest
      parameters:
        - $ref: '#/components/parameters/TargetServiceIdParam'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                jsonrpc:
                  type: string
                  description: JSON-RPC version
                  example: "2.0"
                method:
                  type: string
                  description: Method to call
                  example: eth_blockNumber
                params:
                  type: array
                  description: Parameters for the method
                  items:
                    type: object
                  example: []
                id:
                  type: integer
                  description: Request identifier
                  example: 1
            examples:
              eth_blockNumber:
                summary: Ethereum Block Number Request
                value:
                  jsonrpc: "2.0"
                  method: eth_blockNumber
                  params: []
                  id: 1
              eth_call:
                summary: Call a Contract Method
                value:
                  jsonrpc: "2.0"
                  method: eth_call
                  params: [
                    {
                      "to": "0x6b175474e89094c44da98b954eedeac495271d0f",
                      "data": "0x70a08231000000000000000000000000b5d85cbf7cb3ee0d56b3bb207d5fc4b82f43f511"
                    },
                    "latest"
                  ]
                  id: 2
              eth_getTransactionReceipt:
                summary: Get Transaction Receipt
                value:
                  jsonrpc: "2.0"
                  method: eth_getTransactionReceipt
                  params: ["0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"]
                  id: 3
              eth_getBlockByNumber:
                summary: Get Block By Number
                value:
                  jsonrpc: "2.0"
                  method: eth_getBlockByNumber
                  params: ["0x1b4", true]
                  id: 4
              eth_getBalance:
                summary: Get Account Balance
                value:
                  jsonrpc: "2.0"
                  method: eth_getBalance
                  params: ["0xc94770007dda54cF92009BFF0dE90c06F603a09f", "latest"]
                  id: 5
              eth_chainId:
                summary: Get Chain ID
                value:
                  jsonrpc: "2.0"
                  method: eth_chainId
                  params: []
                  id: 6
              eth_getTransactionCount:
                summary: Get Transaction Count for Address
                value:
                  jsonrpc: "2.0"
                  method: eth_getTransactionCount
                  params: ["0xc94770007dda54cF92009BFF0dE90c06F603a09f", "latest"]
                  id: 7
              eth_getTransactionByHash:
                summary: Get Transaction By Hash
                value:
                  jsonrpc: "2.0"
                  method: eth_getTransactionByHash
                  params: ["0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"]
                  id: 8
              eth_gasPrice:
                summary: Get Current Gas Price
                value:
                  jsonrpc: "2.0"
                  method: eth_gasPrice
                  params: []
                  id: 9
      responses:
        "200":
          description: Successful JSON-RPC response
          content:
            application/json:
              schema:
                type: object
                properties:
                  jsonrpc:
                    type: string
                    description: JSON-RPC version
                    example: "2.0"
                  id: 
                    type: integer
                    description: Request identifier that matches the request
                    example: 1
                  result:
                    type: string
                    description: Result of the request (format depends on the method called)
                    example: "0xc96eae"
              examples:
                eth_blockNumber:
                  summary: Ethereum Block Number Response
                  value:
                    jsonrpc: "2.0"
                    id: 1
                    result: "0xc96eae"
                eth_call:
                  summary: Contract Call Response
                  value:
                    jsonrpc: "2.0"
                    id: 2
                    result: "0x000000000000000000000000000000000000000000000000000000012a05f200"
                eth_getTransactionReceipt:
                  summary: Transaction Receipt Response
                  value:
                    jsonrpc: "2.0"
                    id: 3
                    result: {
                      "blockHash": "0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2",
                      "blockNumber": "0x5daf3b",
                      "contractAddress": null,
                      "cumulativeGasUsed": "0x7f110",
                      "effectiveGasPrice": "0x7f110",
                      "from": "0xa7d9ddbe1f17865597fbd27ec712455208b6b76d",
                      "gasUsed": "0x5208",
                      "logs": [],
                      "logsBloom": "0x
                      "status": "0x1",
                      "to": "0xf02c1c8e6114b1dbe8937a39260b5b0a374432bb",
                      "transactionHash": "0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238",
                      "transactionIndex": "0x1"
                    }
                eth_getBlockByNumber:
                  summary: Block By Number Response
                  value:
                    jsonrpc: "2.0"
                    id: 4
                    result: {
                      "number": "0x1b4",
                      "hash": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                      "parentHash": "0x9646252be9520f6e71339a8df9c55e4d7619deeb018d2a3f2d21fc165dde5eb5",
                      "nonce": "0xe04d296d2460cfb8472af2c5fd05b5a214109c25688d3704aed5484f9a7792f2",
                      "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                      "logsBloom": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                      "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                      "stateRoot": "0xd5855eb08b3387c0af375e9cdb6acfc05eb8f519e419b874b6ff2ffda7ed1dff",
                      "miner": "0x4e65fda2159562a496f9f3522f89122a3088497a",
                      "difficulty": "0x027f07",
                      "totalDifficulty": "0x027f07",
                      "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "size": "0x027f07",
                      "gasLimit": "0x9f759",
                      "gasUsed": "0x9f759",
                      "timestamp": "0x54e34e8e",
                      "transactions": [
                        {
                          "hash": "0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b",
                          "nonce": "0x",
                          "blockHash": "0xbeab0aa2411b7ab17f30a99d3cb9c6ef2fc5426d6ad6fd9e2a26a6aed1d1055b",
                          "blockNumber": "0x15df",
                          "transactionIndex": "0x1",
                          "from": "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
                          "to": "0x85h43d8a49eeb85d32cf465507dd71d507100c1",
                          "value": "0x7f110",
                          "gas": "0x7f110",
                          "gasPrice": "0x09184e72a000",
                          "input": "0x603880600c6000396000f300603880600c6000396000f3603880600c6000396000f360"
                        }
                      ],
                      "uncles": []
                    }
                eth_getBalance:
                  summary: Account Balance Response
                  value:
                    jsonrpc: "2.0"
                    id: 5
                    result: "0x0234c8a3397aab58"
                eth_chainId:
                  summary: Chain ID Response
                  value:
                    jsonrpc: "2.0"
                    id: 6
                    result: "0x1"
                eth_getTransactionCount:
                  summary: Transaction Count Response
                  value:
                    jsonrpc: "2.0"
                    id: 7
                    result: "0x1"
                eth_getTransactionByHash:
                  summary: Transaction By Hash Response
                  value:
                    jsonrpc: "2.0"
                    id: 8
                    result: {
                      "blockHash": "0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2",
                      "blockNumber": "0x5daf3b",
                      "from": "0xa7d9ddbe1f17865597fbd27ec712455208b6b76d",
                      "gas": "0x24a22",
                      "gasPrice": "0x2540be400",
                      "hash": "0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238",
                      "input": "0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675",
                      "nonce": "0x9",
                      "to": "0xf02c1c8e6114b1dbe8937a39260b5b0a374432bb",
                      "transactionIndex": "0x1",
                      "value": "0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675",
                      "type": "0x0",
                      "v": "0x1c",
                      "r": "0x4e65fda2159562a496f9f3522f89122a3088497a",
                      "s": "0x7a25abe9ee27691173cd5f82c7382755dd7d2bb7feea88a61b599ede1dd944"
                    }
                eth_gasPrice:
                  summary: Gas Price Response
                  value:
                    jsonrpc: "2.0"
                    id: 9
                    result: "0x4a817c800"
  /healthz:
    get:
      tags:
        - Health
      summary: Health Check
      description: Returns a JSON health check response indicating the ready status of PATH
      operationId: healthCheck
      security: [] # Health check endpoint does not require authentication
      responses:
        "200":
          description: Health check successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  message:
                    type: string
                    example: "PATH is up and running"
                  version:
                    type: string
                    example: "1.0.0"
                  readyStates:
                    type: object
                    additionalProperties:
                      type: boolean
                    example:
                      "endpoint-hydrator": true
                      "pokt-shannon": true
                  configuredServiceIDs:
                    type: array
                    items:
                      type: string
                    example: ["eth", "poly", "avax"]
  /disqualified_endpoints:
    get:
      tags:
        - DevTools
      summary: Get Disqualified Endpoints
      description: Returns a JSON list of disqualified endpoints for a given service ID.
      operationId: getDisqualifiedEndpoints
      parameters:
        - $ref: '#/components/parameters/TargetServiceIdParam'
      responses:
        "200":
          description: Successfully retrieved disqualified endpoints
          content:
            application/json:
              schema:
                type: object
                properties:
                  protocol_level_data_response:
                    type: object
                    properties:
                      permanently_sanctioned_endpoints:
                        type: object
                      session_sanctioned_endpoints:
                        type: object
                        additionalProperties:
                          type: object
                          properties:
                            endpoint_addr:
                              type: string
                            reason:
                              type: string
                            service_id:
                              type: string
                            sanction_type:
                              type: string
                            error_type:
                              type: string
                            session_height:
                              type: integer
                            created_at:
                              type: string
                              format: date-time
                      permanent_sanctioned_endpoints_count:
                        type: integer
                      session_sanctioned_endpoints_count:
                        type: integer
                      total_sanctioned_endpoints_count:
                        type: integer
                  qos_level_data_response:
                    type: object
                    properties:
                      disqualified_endpoints:
                        type: object
                      empty_response_count:
                        type: integer
                      chain_id_check_errors_count:
                        type: integer
                      archival_check_errors_count:
                        type: integer
                      block_number_check_errors_count:
                        type: integer
                  total_service_endpoints_count:
                    type: integer
                  valid_service_endpoints_count:
                    type: integer
                  invalid_service_endpoints_count:
                    type: integer
              examples:
                successResponse:
                  summary: Successful disqualified endpoints response
                  value:
                    protocol_level_data_response:
                      permanently_sanctioned_endpoints: {}
                      session_sanctioned_endpoints: {}
                      permanent_sanctioned_endpoints_count: 0
                      session_sanctioned_endpoints_count: 0
                      total_sanctioned_endpoints_count: 0
                    qos_level_data_response:
                      disqualified_endpoints: {}
                      empty_response_count: 0
                      chain_id_check_errors_count: 0
                      archival_check_errors_count: 0
                      block_number_check_errors_count: 0
                    total_service_endpoints_count: 5
                    valid_service_endpoints_count: 5
                    invalid_service_endpoints_count: 0
                disqualifiedEndpointsExample:
                  summary: Response with disqualified endpoints
                  value:
                    protocol_level_data_response:
                      permanently_sanctioned_endpoints: {}
                      session_sanctioned_endpoints:
                        "node123abc:8f5b84bd49057:node456def:https://endpoint.the-expanse.io":
                          endpoint_addr: "node123abc:8f5b84bd49057:node456def:https://endpoint.the-expanse.io"
                          reason: "relay error: relay: error sending request to endpoint https://endpoint.the-expanse.io: Post \"https://endpoint.the-expanse.io\": dial tcp: lookup endpoint.the-expanse.io: no such host"
                          service_id: "avax"
                          sanction_type: "SANCTION_SESSION"
                          error_type: "ENDPOINT_ERROR_TIMEOUT"
                          session_height: 12345
                          created_at: "2023-01-15T10:41:37.94993+01:00"
                      permanent_sanctioned_endpoints_count: 0
                      session_sanctioned_endpoints_count: 1
                      total_sanctioned_endpoints_count: 1
                    # TODO_IN_THIS_PR(@commoddity): add example of QoS-level disqualified endpoints
                    qos_level_data_response:
                      disqualified_endpoints:
                        "node789xyz:8f5b84bd49057:nodeabc123:https://endpoint.the-expanse.io":
                          endpoint_addr: "node789xyz:8f5b84bd49057:nodeabc123:https://endpoint.the-expanse.io"
                          reason: "endpoint has not returned an archival balance response to a \"eth_getBalance\" request"
                          service_id: "avax"
                      empty_response_count: 0
                      chain_id_check_errors_count: 0
                      archival_check_errors_count: 1
                      block_number_check_errors_count: 0
                    total_service_endpoints_count: 10
                    valid_service_endpoints_count: 8
                    invalid_service_endpoints_count: 2
        "400":
          description: Bad request - Target-Service-Id header is required or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
              examples:
                missingHeader:
                  summary: Missing Target-Service-Id header
                  value:
                    error: "400 Bad Request"
                    message: "Target-Service-Id header is required"
                invalidServiceId:
                  summary: Invalid service ID
                  value:
                    error: "400 Bad Request"
                    message: "invalid service ID: no apps matched the request for service: earth"
tags:
  - name: Service Requests
    description: Endpoints for forwarding service requests to the Pocket Network
  - name: Health
    description: Endpoints for checking the health of the PATH service
  - name: DevTools
    description: Development and debugging tools

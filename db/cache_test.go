package db

import (
	"context"
	"fmt"
	"sync"
	"testing"
	"time"

	"github.com/pokt-network/poktroll/pkg/polylog/polyzero"
	mock "github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"

	driver "github.com/buildwithgrove/path/db/driver"
)

func Test_GetUserApp(t *testing.T) {
	tests := []struct {
		name       string
		userAppID  driver.UserAppID
		mockReturn map[driver.UserAppID]driver.UserApp
		expected   driver.UserApp
		found      bool
	}{
		{
			name:       "should return user app when found",
			userAppID:  "user_app_1",
			mockReturn: getTestUserApps(),
			expected:   getTestUserApps()["user_app_1"],
			found:      true,
		},
		{
			name:       "should return different user app when found",
			userAppID:  "user_app_2",
			mockReturn: getTestUserApps(),
			expected:   getTestUserApps()["user_app_2"],
			found:      true,
		},
		{
			name:       "should return false when user app not found",
			userAppID:  "user_app_3",
			mockReturn: getTestUserApps(),
			expected:   driver.UserApp{},
			found:      false,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			c := require.New(t)
			cache, err := newTestCache(t, test.mockReturn)
			c.NoError(err)

			userApp, found := cache.GetUserApp(context.Background(), test.userAppID)
			c.Equal(test.found, found)
			c.Equal(test.expected, userApp)
		})
	}
}

func Test_cacheRefreshHandler(t *testing.T) {
	tests := []struct {
		name       string
		mockReturn map[driver.UserAppID]driver.UserApp
		expected   map[driver.UserAppID]driver.UserApp
	}{
		{
			name:       "should refresh cache with new data",
			mockReturn: map[driver.UserAppID]driver.UserApp{"user_app_1": {ID: "user_app_1"}},
			expected:   map[driver.UserAppID]driver.UserApp{"user_app_1": {ID: "user_app_1"}},
		},
		{
			name:       "should handle empty cache refresh",
			mockReturn: map[driver.UserAppID]driver.UserApp{},
			expected:   map[driver.UserAppID]driver.UserApp{},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			c := require.New(t)
			cache, err := newTestCache(t, test.mockReturn)
			c.NoError(err)

			cache.cacheRefreshInterval = time.Millisecond * 10

			go cache.cacheRefreshHandler(context.Background())

			time.Sleep(time.Millisecond * 20)

			c.Equal(test.expected, cache.userApps)
		})
	}
}

func Test_setCache(t *testing.T) {
	tests := []struct {
		name       string
		mockReturn map[driver.UserAppID]driver.UserApp
		expected   map[driver.UserAppID]driver.UserApp
	}{
		{
			name:       "should set cache with user apps",
			mockReturn: map[driver.UserAppID]driver.UserApp{"user_app_1": {ID: "user_app_1"}},
			expected:   map[driver.UserAppID]driver.UserApp{"user_app_1": {ID: "user_app_1"}},
		},
		{
			name:       "should handle empty user apps",
			mockReturn: map[driver.UserAppID]driver.UserApp{},
			expected:   map[driver.UserAppID]driver.UserApp{},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			c := require.New(t)
			cache, err := newTestCache(t, test.mockReturn)
			c.NoError(err)

			err = cache.setCache(context.Background())
			c.NoError(err)
			c.Equal(test.expected, cache.userApps)
		})
	}
}

func newTestCache(t *testing.T, userApps map[driver.UserAppID]driver.UserApp) (*cache, error) {
	mockDb := newMockDbDriver(t)

	cache := &cache{
		userApps:             make(map[driver.UserAppID]driver.UserApp),
		db:                   mockDb,
		cacheRefreshInterval: time.Minute,
		mu:                   sync.RWMutex{},
		logger:               polyzero.NewLogger(),
	}

	mockDb.On("GetUserApps", mock.Anything).Return(userApps, nil)

	if err := cache.setCache(context.Background()); err != nil {
		return nil, fmt.Errorf("failed to set cache: %w", err)
	}

	go cache.cacheRefreshHandler(context.Background())

	return cache, nil
}

func getTestUserApps() map[driver.UserAppID]driver.UserApp {
	return map[driver.UserAppID]driver.UserApp{
		"user_app_1": {
			ID:                "user_app_1",
			AccountID:         "account_1",
			PlanType:          "PLAN_FREE",
			SecretKey:         "secret_1",
			SecretKeyRequired: true,
			ThroughputLimit:   30,
			Whitelists: map[string]map[string]struct{}{
				"origins":   {"origin_1": {}},
				"contracts": {"contract_1": {}},
			},
		},
		"user_app_2": {
			ID:                "user_app_2",
			AccountID:         "account_2",
			PlanType:          "PLAN_UNLIMITED",
			SecretKey:         "secret_2",
			SecretKeyRequired: true,
			ThroughputLimit:   0,
			Whitelists: map[string]map[string]struct{}{
				"origins":   {"origin_2": {}},
				"contracts": {"contract_2": {}},
			},
		},
	}
}

// Code below generated by mockery v2.41.0. DO NOT EDIT.

// mockDbDriver is an autogenerated mock type for the dbDriver type
type mockDbDriver struct {
	mock.Mock
}

// GetUserApps provides a mock function with given fields: ctx
func (_m *mockDbDriver) GetUserApps(ctx context.Context) (map[driver.UserAppID]driver.UserApp, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserApps")
	}

	var r0 map[driver.UserAppID]driver.UserApp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[driver.UserAppID]driver.UserApp, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[driver.UserAppID]driver.UserApp); ok {
		r0 = rf(ctx)
	} else if ret.Get(0) != nil {
		r0 = ret.Get(0).(map[driver.UserAppID]driver.UserApp)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockDbDriver creates a new instance of mockDbDriver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDbDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDbDriver {
	mock := &mockDbDriver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by MockGen. DO NOT EDIT.
// Source: router.go
//
// Generated by this command:
//
//	mockgen -source=router.go -destination=router_mock_test.go -package=router
//

// Package router is a generated GoMock package.
package router

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockgateway is a mock of gateway interface.
type Mockgateway struct {
	ctrl     *gomock.Controller
	recorder *MockgatewayMockRecorder
}

// MockgatewayMockRecorder is the mock recorder for Mockgateway.
type MockgatewayMockRecorder struct {
	mock *Mockgateway
}

// NewMockgateway creates a new mock instance.
func NewMockgateway(ctrl *gomock.Controller) *Mockgateway {
	mock := &Mockgateway{ctrl: ctrl}
	mock.recorder = &MockgatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockgateway) EXPECT() *MockgatewayMockRecorder {
	return m.recorder
}

// HandleHTTPServiceRequest mocks base method.
func (m *Mockgateway) HandleHTTPServiceRequest(ctx context.Context, httpReq *http.Request, w http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleHTTPServiceRequest", ctx, httpReq, w)
}

// HandleHTTPServiceRequest indicates an expected call of HandleHTTPServiceRequest.
func (mr *MockgatewayMockRecorder) HandleHTTPServiceRequest(ctx, httpReq, w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleHTTPServiceRequest", reflect.TypeOf((*Mockgateway)(nil).HandleHTTPServiceRequest), ctx, httpReq, w)
}

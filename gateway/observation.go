package gateway

import (
	"net/http"

	"github.com/google/uuid"
	"google.golang.org/protobuf/types/known/timestamppb"

	"github.com/buildwithgrove/path/observation"
)

const (
	httpHeaderAuthRequestID       = "Auth-Request-ID"
	httpHeaderAuthRegion          = "Auth-Region"
	httpHeaderAuthPortalAccountID = "Auth-Portal-Account-ID"
	httpHeaderAuthPortalAppID     = "Auth-Portal-Application-ID"

	// Used as value in any observation field that does not apply to a synthetic request (e.g. user application id)
	syntheticRequestStr = "SYNTHETIC-REQUEST"
)

// getUserRequestGatewayObservations returns gateway-level observations for an organic, i.e. from a user, request.
func getUserRequestGatewayObservations(httpReq *http.Request) *observation.GatewayObservations {
	return &observation.GatewayObservations{
		// Extract Request Authentication fields from HTTP headers.
		RequestAuth:  extractAuthObservationFromHTTPHeaders(httpReq),
		RequestType:  observation.RequestType_REQUEST_TYPE_ORGANIC,
		ReceivedTime: timestamppb.Now(),
	}
}

// getSyntheticRequestGatewayObservations returns the gateway-level observations for a synthetic request.
// Example: request originated from the hydrator.
func getSyntheticRequestGatewayObservations() *observation.GatewayObservations {
	return &observation.GatewayObservations{
		// Request Authentication fields for synthetic requests.
		RequestAuth:  setAuthObservationForSyntheticRequests(),
		RequestType:  observation.RequestType_REQUEST_TYPE_SYNTHETIC,
		ReceivedTime: timestamppb.Now(),
	}
}

// Sets Authentication metadata for synthetic, i.e. generated by the endpoint hydrator, requests.
func setAuthObservationForSyntheticRequests() *observation.RequestAuth {
	return &observation.RequestAuth{
		RequestId: uuid.New().String(),
		// TODO_MVP(@adshmh): pass the region field to PATH, to apply to synthetic requests' metadata.
		Region:              syntheticRequestStr,
		PortalAccountId:     syntheticRequestStr,
		PortalApplicationId: syntheticRequestStr,
	}
}

func extractAuthObservationFromHTTPHeaders(httpReq *http.Request) *observation.RequestAuth {
	requestID := httpReq.Header.Get(httpHeaderAuthRequestID)
	region := httpReq.Header.Get(httpHeaderAuthRegion)
	portalAccountID := httpReq.Header.Get(httpHeaderAuthPortalAccountID)
	portalApplicationID := httpReq.Header.Get(httpHeaderAuthPortalAppID)

	return &observation.RequestAuth{
		RequestId:           requestID,
		Region:              region,
		PortalAccountId:     portalAccountID,
		PortalApplicationId: portalApplicationID,
	}
}

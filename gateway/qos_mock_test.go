// Code generated by MockGen. DO NOT EDIT.
// Source: ./gateway/qos.go
//
// Generated by this command:
//
//	mockgen -source=./gateway/qos.go -destination=./gateway/qos_mock_test.go -package=gateway
//

// Package gateway is a generated GoMock package.
package gateway

import (
	context "context"
	http "net/http"
	reflect "reflect"

	devtools "github.com/buildwithgrove/path/metrics/devtools"
	qos "github.com/buildwithgrove/path/observation/qos"
	protocol "github.com/buildwithgrove/path/protocol"
	gomock "go.uber.org/mock/gomock"
)

// MockRequestQoSContext is a mock of RequestQoSContext interface.
type MockRequestQoSContext struct {
	ctrl     *gomock.Controller
	recorder *MockRequestQoSContextMockRecorder
	isgomock struct{}
}

// MockRequestQoSContextMockRecorder is the mock recorder for MockRequestQoSContext.
type MockRequestQoSContextMockRecorder struct {
	mock *MockRequestQoSContext
}

// NewMockRequestQoSContext creates a new mock instance.
func NewMockRequestQoSContext(ctrl *gomock.Controller) *MockRequestQoSContext {
	mock := &MockRequestQoSContext{ctrl: ctrl}
	mock.recorder = &MockRequestQoSContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestQoSContext) EXPECT() *MockRequestQoSContextMockRecorder {
	return m.recorder
}

// GetEndpointSelector mocks base method.
func (m *MockRequestQoSContext) GetEndpointSelector() protocol.EndpointSelector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpointSelector")
	ret0, _ := ret[0].(protocol.EndpointSelector)
	return ret0
}

// GetEndpointSelector indicates an expected call of GetEndpointSelector.
func (mr *MockRequestQoSContextMockRecorder) GetEndpointSelector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointSelector", reflect.TypeOf((*MockRequestQoSContext)(nil).GetEndpointSelector))
}

// GetHTTPResponse mocks base method.
func (m *MockRequestQoSContext) GetHTTPResponse() HTTPResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPResponse")
	ret0, _ := ret[0].(HTTPResponse)
	return ret0
}

// GetHTTPResponse indicates an expected call of GetHTTPResponse.
func (mr *MockRequestQoSContextMockRecorder) GetHTTPResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPResponse", reflect.TypeOf((*MockRequestQoSContext)(nil).GetHTTPResponse))
}

// GetObservations mocks base method.
func (m *MockRequestQoSContext) GetObservations() qos.Observations {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObservations")
	ret0, _ := ret[0].(qos.Observations)
	return ret0
}

// GetObservations indicates an expected call of GetObservations.
func (mr *MockRequestQoSContextMockRecorder) GetObservations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObservations", reflect.TypeOf((*MockRequestQoSContext)(nil).GetObservations))
}

// GetServicePayload mocks base method.
func (m *MockRequestQoSContext) GetServicePayload() protocol.Payload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicePayload")
	ret0, _ := ret[0].(protocol.Payload)
	return ret0
}

// GetServicePayload indicates an expected call of GetServicePayload.
func (mr *MockRequestQoSContextMockRecorder) GetServicePayload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicePayload", reflect.TypeOf((*MockRequestQoSContext)(nil).GetServicePayload))
}

// UpdateWithResponse mocks base method.
func (m *MockRequestQoSContext) UpdateWithResponse(endpointAddr protocol.EndpointAddr, endpointSerializedResponse []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateWithResponse", endpointAddr, endpointSerializedResponse)
}

// UpdateWithResponse indicates an expected call of UpdateWithResponse.
func (mr *MockRequestQoSContextMockRecorder) UpdateWithResponse(endpointAddr, endpointSerializedResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithResponse", reflect.TypeOf((*MockRequestQoSContext)(nil).UpdateWithResponse), endpointAddr, endpointSerializedResponse)
}

// MockQoSContextBuilder is a mock of QoSContextBuilder interface.
type MockQoSContextBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockQoSContextBuilderMockRecorder
	isgomock struct{}
}

// MockQoSContextBuilderMockRecorder is the mock recorder for MockQoSContextBuilder.
type MockQoSContextBuilderMockRecorder struct {
	mock *MockQoSContextBuilder
}

// NewMockQoSContextBuilder creates a new mock instance.
func NewMockQoSContextBuilder(ctrl *gomock.Controller) *MockQoSContextBuilder {
	mock := &MockQoSContextBuilder{ctrl: ctrl}
	mock.recorder = &MockQoSContextBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQoSContextBuilder) EXPECT() *MockQoSContextBuilderMockRecorder {
	return m.recorder
}

// ParseHTTPRequest mocks base method.
func (m *MockQoSContextBuilder) ParseHTTPRequest(arg0 context.Context, arg1 *http.Request) (RequestQoSContext, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseHTTPRequest", arg0, arg1)
	ret0, _ := ret[0].(RequestQoSContext)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ParseHTTPRequest indicates an expected call of ParseHTTPRequest.
func (mr *MockQoSContextBuilderMockRecorder) ParseHTTPRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseHTTPRequest", reflect.TypeOf((*MockQoSContextBuilder)(nil).ParseHTTPRequest), arg0, arg1)
}

// ParseWebsocketRequest mocks base method.
func (m *MockQoSContextBuilder) ParseWebsocketRequest(arg0 context.Context) (RequestQoSContext, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseWebsocketRequest", arg0)
	ret0, _ := ret[0].(RequestQoSContext)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ParseWebsocketRequest indicates an expected call of ParseWebsocketRequest.
func (mr *MockQoSContextBuilderMockRecorder) ParseWebsocketRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseWebsocketRequest", reflect.TypeOf((*MockQoSContextBuilder)(nil).ParseWebsocketRequest), arg0)
}

// MockQoSEndpointCheckGenerator is a mock of QoSEndpointCheckGenerator interface.
type MockQoSEndpointCheckGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockQoSEndpointCheckGeneratorMockRecorder
	isgomock struct{}
}

// MockQoSEndpointCheckGeneratorMockRecorder is the mock recorder for MockQoSEndpointCheckGenerator.
type MockQoSEndpointCheckGeneratorMockRecorder struct {
	mock *MockQoSEndpointCheckGenerator
}

// NewMockQoSEndpointCheckGenerator creates a new mock instance.
func NewMockQoSEndpointCheckGenerator(ctrl *gomock.Controller) *MockQoSEndpointCheckGenerator {
	mock := &MockQoSEndpointCheckGenerator{ctrl: ctrl}
	mock.recorder = &MockQoSEndpointCheckGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQoSEndpointCheckGenerator) EXPECT() *MockQoSEndpointCheckGeneratorMockRecorder {
	return m.recorder
}

// GetRequiredQualityChecks mocks base method.
func (m *MockQoSEndpointCheckGenerator) GetRequiredQualityChecks(arg0 protocol.EndpointAddr) []RequestQoSContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequiredQualityChecks", arg0)
	ret0, _ := ret[0].([]RequestQoSContext)
	return ret0
}

// GetRequiredQualityChecks indicates an expected call of GetRequiredQualityChecks.
func (mr *MockQoSEndpointCheckGeneratorMockRecorder) GetRequiredQualityChecks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequiredQualityChecks", reflect.TypeOf((*MockQoSEndpointCheckGenerator)(nil).GetRequiredQualityChecks), arg0)
}

// MockQoSService is a mock of QoSService interface.
type MockQoSService struct {
	ctrl     *gomock.Controller
	recorder *MockQoSServiceMockRecorder
	isgomock struct{}
}

// MockQoSServiceMockRecorder is the mock recorder for MockQoSService.
type MockQoSServiceMockRecorder struct {
	mock *MockQoSService
}

// NewMockQoSService creates a new mock instance.
func NewMockQoSService(ctrl *gomock.Controller) *MockQoSService {
	mock := &MockQoSService{ctrl: ctrl}
	mock.recorder = &MockQoSServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQoSService) EXPECT() *MockQoSServiceMockRecorder {
	return m.recorder
}

// ApplyObservations mocks base method.
func (m *MockQoSService) ApplyObservations(arg0 *qos.Observations) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyObservations", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyObservations indicates an expected call of ApplyObservations.
func (mr *MockQoSServiceMockRecorder) ApplyObservations(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyObservations", reflect.TypeOf((*MockQoSService)(nil).ApplyObservations), arg0)
}

// GetRequiredQualityChecks mocks base method.
func (m *MockQoSService) GetRequiredQualityChecks(arg0 protocol.EndpointAddr) []RequestQoSContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequiredQualityChecks", arg0)
	ret0, _ := ret[0].([]RequestQoSContext)
	return ret0
}

// GetRequiredQualityChecks indicates an expected call of GetRequiredQualityChecks.
func (mr *MockQoSServiceMockRecorder) GetRequiredQualityChecks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequiredQualityChecks", reflect.TypeOf((*MockQoSService)(nil).GetRequiredQualityChecks), arg0)
}

// HydrateDisqualifiedEndpointsResponse mocks base method.
func (m *MockQoSService) HydrateDisqualifiedEndpointsResponse(arg0 protocol.ServiceID, arg1 *devtools.DisqualifiedEndpointResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HydrateDisqualifiedEndpointsResponse", arg0, arg1)
}

// HydrateDisqualifiedEndpointsResponse indicates an expected call of HydrateDisqualifiedEndpointsResponse.
func (mr *MockQoSServiceMockRecorder) HydrateDisqualifiedEndpointsResponse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HydrateDisqualifiedEndpointsResponse", reflect.TypeOf((*MockQoSService)(nil).HydrateDisqualifiedEndpointsResponse), arg0, arg1)
}

// ParseHTTPRequest mocks base method.
func (m *MockQoSService) ParseHTTPRequest(arg0 context.Context, arg1 *http.Request) (RequestQoSContext, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseHTTPRequest", arg0, arg1)
	ret0, _ := ret[0].(RequestQoSContext)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ParseHTTPRequest indicates an expected call of ParseHTTPRequest.
func (mr *MockQoSServiceMockRecorder) ParseHTTPRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseHTTPRequest", reflect.TypeOf((*MockQoSService)(nil).ParseHTTPRequest), arg0, arg1)
}

// ParseWebsocketRequest mocks base method.
func (m *MockQoSService) ParseWebsocketRequest(arg0 context.Context) (RequestQoSContext, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseWebsocketRequest", arg0)
	ret0, _ := ret[0].(RequestQoSContext)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ParseWebsocketRequest indicates an expected call of ParseWebsocketRequest.
func (mr *MockQoSServiceMockRecorder) ParseWebsocketRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseWebsocketRequest", reflect.TypeOf((*MockQoSService)(nil).ParseWebsocketRequest), arg0)
}

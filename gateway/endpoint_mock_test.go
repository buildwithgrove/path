// Code generated by MockGen. DO NOT EDIT.
// Source: ./protocol/endpoint.go
//
// Generated by this command:
//
//	mockgen -source=./protocol/endpoint.go -destination=./gateway/endpoint_mock_test.go -package=gateway
//

// Package gateway is a generated GoMock package.
package gateway

import (
	reflect "reflect"

	protocol "github.com/buildwithgrove/path/protocol"
	gomock "go.uber.org/mock/gomock"
)

// MockEndpoint is a mock of Endpoint interface.
type MockEndpoint struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointMockRecorder
	isgomock struct{}
}

// MockEndpointMockRecorder is the mock recorder for MockEndpoint.
type MockEndpointMockRecorder struct {
	mock *MockEndpoint
}

// NewMockEndpoint creates a new mock instance.
func NewMockEndpoint(ctrl *gomock.Controller) *MockEndpoint {
	mock := &MockEndpoint{ctrl: ctrl}
	mock.recorder = &MockEndpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpoint) EXPECT() *MockEndpointMockRecorder {
	return m.recorder
}

// Addr mocks base method.
func (m *MockEndpoint) Addr() protocol.EndpointAddr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addr")
	ret0, _ := ret[0].(protocol.EndpointAddr)
	return ret0
}

// Addr indicates an expected call of Addr.
func (mr *MockEndpointMockRecorder) Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addr", reflect.TypeOf((*MockEndpoint)(nil).Addr))
}

// PublicURL mocks base method.
func (m *MockEndpoint) PublicURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// PublicURL indicates an expected call of PublicURL.
func (mr *MockEndpointMockRecorder) PublicURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicURL", reflect.TypeOf((*MockEndpoint)(nil).PublicURL))
}

// MockEndpointSelector is a mock of EndpointSelector interface.
type MockEndpointSelector struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointSelectorMockRecorder
	isgomock struct{}
}

// MockEndpointSelectorMockRecorder is the mock recorder for MockEndpointSelector.
type MockEndpointSelectorMockRecorder struct {
	mock *MockEndpointSelector
}

// NewMockEndpointSelector creates a new mock instance.
func NewMockEndpointSelector(ctrl *gomock.Controller) *MockEndpointSelector {
	mock := &MockEndpointSelector{ctrl: ctrl}
	mock.recorder = &MockEndpointSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointSelector) EXPECT() *MockEndpointSelectorMockRecorder {
	return m.recorder
}

// Select mocks base method.
func (m *MockEndpointSelector) Select(arg0 protocol.EndpointAddrList) (protocol.EndpointAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].(protocol.EndpointAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockEndpointSelectorMockRecorder) Select(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockEndpointSelector)(nil).Select), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./gateway/protocol.go
//
// Generated by this command:
//
//	mockgen -source=./gateway/protocol.go -destination=./gateway/protocol_mock_test.go -package=gateway
//

// Package gateway is a generated GoMock package.
package gateway

import (
	context "context"
	http "net/http"
	reflect "reflect"

	devtools "github.com/buildwithgrove/path/metrics/devtools"
	protocol "github.com/buildwithgrove/path/observation/protocol"
	protocol0 "github.com/buildwithgrove/path/protocol"
	polylog "github.com/pokt-network/poktroll/pkg/polylog"
	gomock "go.uber.org/mock/gomock"
)

// MockProtocol is a mock of Protocol interface.
type MockProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolMockRecorder
	isgomock struct{}
}

// MockProtocolMockRecorder is the mock recorder for MockProtocol.
type MockProtocolMockRecorder struct {
	mock *MockProtocol
}

// NewMockProtocol creates a new mock instance.
func NewMockProtocol(ctrl *gomock.Controller) *MockProtocol {
	mock := &MockProtocol{ctrl: ctrl}
	mock.recorder = &MockProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtocol) EXPECT() *MockProtocolMockRecorder {
	return m.recorder
}

// ApplyObservations mocks base method.
func (m *MockProtocol) ApplyObservations(arg0 *protocol.Observations) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyObservations", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyObservations indicates an expected call of ApplyObservations.
func (mr *MockProtocolMockRecorder) ApplyObservations(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyObservations", reflect.TypeOf((*MockProtocol)(nil).ApplyObservations), arg0)
}

// AvailableEndpoints mocks base method.
func (m *MockProtocol) AvailableEndpoints(arg0 context.Context, arg1 protocol0.ServiceID, arg2 *http.Request) (protocol0.EndpointAddrList, protocol.Observations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableEndpoints", arg0, arg1, arg2)
	ret0, _ := ret[0].(protocol0.EndpointAddrList)
	ret1, _ := ret[1].(protocol.Observations)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableEndpoints indicates an expected call of AvailableEndpoints.
func (mr *MockProtocolMockRecorder) AvailableEndpoints(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableEndpoints", reflect.TypeOf((*MockProtocol)(nil).AvailableEndpoints), arg0, arg1, arg2)
}

// BuildRequestContextForEndpoint mocks base method.
func (m *MockProtocol) BuildRequestContextForEndpoint(arg0 context.Context, arg1 protocol0.ServiceID, arg2 protocol0.EndpointAddr, arg3 *http.Request) (ProtocolRequestContext, protocol.Observations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildRequestContextForEndpoint", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(ProtocolRequestContext)
	ret1, _ := ret[1].(protocol.Observations)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildRequestContextForEndpoint indicates an expected call of BuildRequestContextForEndpoint.
func (mr *MockProtocolMockRecorder) BuildRequestContextForEndpoint(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRequestContextForEndpoint", reflect.TypeOf((*MockProtocol)(nil).BuildRequestContextForEndpoint), arg0, arg1, arg2, arg3)
}

// ConfiguredServiceIDs mocks base method.
func (m *MockProtocol) ConfiguredServiceIDs() map[protocol0.ServiceID]struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfiguredServiceIDs")
	ret0, _ := ret[0].(map[protocol0.ServiceID]struct{})
	return ret0
}

// ConfiguredServiceIDs indicates an expected call of ConfiguredServiceIDs.
func (mr *MockProtocolMockRecorder) ConfiguredServiceIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfiguredServiceIDs", reflect.TypeOf((*MockProtocol)(nil).ConfiguredServiceIDs))
}

// GetTotalServiceEndpointsCount mocks base method.
func (m *MockProtocol) GetTotalServiceEndpointsCount(arg0 protocol0.ServiceID, arg1 *http.Request) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalServiceEndpointsCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalServiceEndpointsCount indicates an expected call of GetTotalServiceEndpointsCount.
func (mr *MockProtocolMockRecorder) GetTotalServiceEndpointsCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalServiceEndpointsCount", reflect.TypeOf((*MockProtocol)(nil).GetTotalServiceEndpointsCount), arg0, arg1)
}

// HydrateDisqualifiedEndpointsResponse mocks base method.
func (m *MockProtocol) HydrateDisqualifiedEndpointsResponse(arg0 protocol0.ServiceID, arg1 *devtools.DisqualifiedEndpointResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HydrateDisqualifiedEndpointsResponse", arg0, arg1)
}

// HydrateDisqualifiedEndpointsResponse indicates an expected call of HydrateDisqualifiedEndpointsResponse.
func (mr *MockProtocolMockRecorder) HydrateDisqualifiedEndpointsResponse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HydrateDisqualifiedEndpointsResponse", reflect.TypeOf((*MockProtocol)(nil).HydrateDisqualifiedEndpointsResponse), arg0, arg1)
}

// IsAlive mocks base method.
func (m *MockProtocol) IsAlive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAlive indicates an expected call of IsAlive.
func (mr *MockProtocolMockRecorder) IsAlive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlive", reflect.TypeOf((*MockProtocol)(nil).IsAlive))
}

// Name mocks base method.
func (m *MockProtocol) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockProtocolMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProtocol)(nil).Name))
}

// SupportedGatewayModes mocks base method.
func (m *MockProtocol) SupportedGatewayModes() []protocol0.GatewayMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedGatewayModes")
	ret0, _ := ret[0].([]protocol0.GatewayMode)
	return ret0
}

// SupportedGatewayModes indicates an expected call of SupportedGatewayModes.
func (mr *MockProtocolMockRecorder) SupportedGatewayModes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedGatewayModes", reflect.TypeOf((*MockProtocol)(nil).SupportedGatewayModes))
}

// MockProtocolRequestContext is a mock of ProtocolRequestContext interface.
type MockProtocolRequestContext struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolRequestContextMockRecorder
	isgomock struct{}
}

// MockProtocolRequestContextMockRecorder is the mock recorder for MockProtocolRequestContext.
type MockProtocolRequestContextMockRecorder struct {
	mock *MockProtocolRequestContext
}

// NewMockProtocolRequestContext creates a new mock instance.
func NewMockProtocolRequestContext(ctrl *gomock.Controller) *MockProtocolRequestContext {
	mock := &MockProtocolRequestContext{ctrl: ctrl}
	mock.recorder = &MockProtocolRequestContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtocolRequestContext) EXPECT() *MockProtocolRequestContextMockRecorder {
	return m.recorder
}

// GetObservations mocks base method.
func (m *MockProtocolRequestContext) GetObservations() protocol.Observations {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObservations")
	ret0, _ := ret[0].(protocol.Observations)
	return ret0
}

// GetObservations indicates an expected call of GetObservations.
func (mr *MockProtocolRequestContextMockRecorder) GetObservations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObservations", reflect.TypeOf((*MockProtocolRequestContext)(nil).GetObservations))
}

// HandleServiceRequest mocks base method.
func (m *MockProtocolRequestContext) HandleServiceRequest(arg0 protocol0.Payload) (protocol0.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleServiceRequest", arg0)
	ret0, _ := ret[0].(protocol0.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleServiceRequest indicates an expected call of HandleServiceRequest.
func (mr *MockProtocolRequestContextMockRecorder) HandleServiceRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleServiceRequest", reflect.TypeOf((*MockProtocolRequestContext)(nil).HandleServiceRequest), arg0)
}

// HandleWebsocketRequest mocks base method.
func (m *MockProtocolRequestContext) HandleWebsocketRequest(arg0 polylog.Logger, arg1 *http.Request, arg2 http.ResponseWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleWebsocketRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleWebsocketRequest indicates an expected call of HandleWebsocketRequest.
func (mr *MockProtocolRequestContextMockRecorder) HandleWebsocketRequest(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleWebsocketRequest", reflect.TypeOf((*MockProtocolRequestContext)(nil).HandleWebsocketRequest), arg0, arg1, arg2)
}

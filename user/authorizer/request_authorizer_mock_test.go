// Code generated by MockGen. DO NOT EDIT.
// Source: request_authorizer.go
//
// Generated by this command:
//
//	mockgen -source=request_authorizer.go -destination=request_auth_mock_test.go -package=authorizer
//

// package authorizer is a generated GoMock package.
package authorizer

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	"github.com/buildwithgrove/path/user"
)

// Mockcache is a mock of cache interface.
type Mockcache struct {
	ctrl     *gomock.Controller
	recorder *MockcacheMockRecorder
}

// MockcacheMockRecorder is the mock recorder for Mockcache.
type MockcacheMockRecorder struct {
	mock *Mockcache
}

// NewMockcache creates a new mock instance.
func NewMockcache(ctrl *gomock.Controller) *Mockcache {
	mock := &Mockcache{ctrl: ctrl}
	mock.recorder = &MockcacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcache) EXPECT() *MockcacheMockRecorder {
	return m.recorder
}

// GetGatewayEndpoint mocks base method.
func (m *Mockcache) GetGatewayEndpoint(ctx context.Context, userAppID user.EndpointID) (user.GatewayEndpoint, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGatewayEndpoint", ctx, userAppID)
	ret0, _ := ret[0].(user.GatewayEndpoint)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGatewayEndpoint indicates an expected call of GetGatewayEndpoint.
func (mr *MockcacheMockRecorder) GetGatewayEndpoint(ctx, userAppID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayEndpoint", reflect.TypeOf((*Mockcache)(nil).GetGatewayEndpoint), ctx, userAppID)
}

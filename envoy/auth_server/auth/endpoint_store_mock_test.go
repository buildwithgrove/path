// Code generated by MockGen. DO NOT EDIT.
// Source: ./envoy/auth_server/auth/auth_handler.go
//
// Generated by this command:
//
//	mockgen -source=./envoy/auth_server/auth/auth_handler.go -destination=./envoy/auth_server/auth/endpoint_store_mock_test.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	proto "github.com/buildwithgrove/path/envoy/auth_server/proto"
	gomock "go.uber.org/mock/gomock"
)

// MockEndpointStore is a mock of EndpointStore interface.
type MockEndpointStore struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointStoreMockRecorder
	isgomock struct{}
}

// MockEndpointStoreMockRecorder is the mock recorder for MockEndpointStore.
type MockEndpointStoreMockRecorder struct {
	mock *MockEndpointStore
}

// NewMockEndpointStore creates a new mock instance.
func NewMockEndpointStore(ctrl *gomock.Controller) *MockEndpointStore {
	mock := &MockEndpointStore{ctrl: ctrl}
	mock.recorder = &MockEndpointStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointStore) EXPECT() *MockEndpointStoreMockRecorder {
	return m.recorder
}

// GetGatewayEndpoint mocks base method.
func (m *MockEndpointStore) GetGatewayEndpoint(endpointID string) (*proto.GatewayEndpoint, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGatewayEndpoint", endpointID)
	ret0, _ := ret[0].(*proto.GatewayEndpoint)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGatewayEndpoint indicates an expected call of GetGatewayEndpoint.
func (mr *MockEndpointStoreMockRecorder) GetGatewayEndpoint(endpointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayEndpoint", reflect.TypeOf((*MockEndpointStore)(nil).GetGatewayEndpoint), endpointID)
}

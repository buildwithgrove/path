// Code generated by MockGen. DO NOT EDIT.
// Source: auth_handler.go
//
// Generated by this command:
//
//	mockgen -source=auth_handler.go -destination=endpoint_data_store_mock_test.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	proto "github.com/buildwithgrove/auth-server/proto"
	gomock "go.uber.org/mock/gomock"
)

// MockendpointDataStore is a mock of endpointDataStore interface.
type MockendpointDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockendpointDataStoreMockRecorder
}

// MockendpointDataStoreMockRecorder is the mock recorder for MockendpointDataStore.
type MockendpointDataStoreMockRecorder struct {
	mock *MockendpointDataStore
}

// NewMockendpointDataStore creates a new mock instance.
func NewMockendpointDataStore(ctrl *gomock.Controller) *MockendpointDataStore {
	mock := &MockendpointDataStore{ctrl: ctrl}
	mock.recorder = &MockendpointDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockendpointDataStore) EXPECT() *MockendpointDataStoreMockRecorder {
	return m.recorder
}

// GetGatewayEndpoint mocks base method.
func (m *MockendpointDataStore) GetGatewayEndpoint(endpointID string) (*proto.GatewayEndpoint, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGatewayEndpoint", endpointID)
	ret0, _ := ret[0].(*proto.GatewayEndpoint)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGatewayEndpoint indicates an expected call of GetGatewayEndpoint.
func (mr *MockendpointDataStoreMockRecorder) GetGatewayEndpoint(endpointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayEndpoint", reflect.TypeOf((*MockendpointDataStore)(nil).GetGatewayEndpoint), endpointID)
}

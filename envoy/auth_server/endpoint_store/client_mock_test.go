// Code generated by MockGen. DO NOT EDIT.
// Source: ./envoy/auth_server/proto/gateway_endpoint_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=./envoy/auth_server/proto/gateway_endpoint_grpc.pb.go -destination=./envoy/auth_server/endpoint_store/client_mock_test.go -package=endpointstore -mock_names=GatewayEndpointsClient=MockGatewayEndpointsClient
//

// Package endpointstore is a generated GoMock package.
package endpointstore

import (
	context "context"
	reflect "reflect"

	proto "github.com/buildwithgrove/path/envoy/auth_server/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockGatewayEndpointsClient is a mock of GatewayEndpointsClient interface.
type MockGatewayEndpointsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayEndpointsClientMockRecorder
	isgomock struct{}
}

// MockGatewayEndpointsClientMockRecorder is the mock recorder for MockGatewayEndpointsClient.
type MockGatewayEndpointsClientMockRecorder struct {
	mock *MockGatewayEndpointsClient
}

// NewMockGatewayEndpointsClient creates a new mock instance.
func NewMockGatewayEndpointsClient(ctrl *gomock.Controller) *MockGatewayEndpointsClient {
	mock := &MockGatewayEndpointsClient{ctrl: ctrl}
	mock.recorder = &MockGatewayEndpointsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayEndpointsClient) EXPECT() *MockGatewayEndpointsClientMockRecorder {
	return m.recorder
}

// FetchAuthDataSync mocks base method.
func (m *MockGatewayEndpointsClient) FetchAuthDataSync(ctx context.Context, in *proto.AuthDataRequest, opts ...grpc.CallOption) (*proto.AuthDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAuthDataSync", varargs...)
	ret0, _ := ret[0].(*proto.AuthDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAuthDataSync indicates an expected call of FetchAuthDataSync.
func (mr *MockGatewayEndpointsClientMockRecorder) FetchAuthDataSync(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAuthDataSync", reflect.TypeOf((*MockGatewayEndpointsClient)(nil).FetchAuthDataSync), varargs...)
}

// StreamAuthDataUpdates mocks base method.
func (m *MockGatewayEndpointsClient) StreamAuthDataUpdates(ctx context.Context, in *proto.AuthDataUpdatesRequest, opts ...grpc.CallOption) (proto.GatewayEndpoints_StreamAuthDataUpdatesClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamAuthDataUpdates", varargs...)
	ret0, _ := ret[0].(proto.GatewayEndpoints_StreamAuthDataUpdatesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamAuthDataUpdates indicates an expected call of StreamAuthDataUpdates.
func (mr *MockGatewayEndpointsClientMockRecorder) StreamAuthDataUpdates(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamAuthDataUpdates", reflect.TypeOf((*MockGatewayEndpointsClient)(nil).StreamAuthDataUpdates), varargs...)
}

// MockGatewayEndpoints_StreamAuthDataUpdatesClient is a mock of GatewayEndpoints_StreamAuthDataUpdatesClient interface.
type MockGatewayEndpoints_StreamAuthDataUpdatesClient struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayEndpoints_StreamAuthDataUpdatesClientMockRecorder
	isgomock struct{}
}

// MockGatewayEndpoints_StreamAuthDataUpdatesClientMockRecorder is the mock recorder for MockGatewayEndpoints_StreamAuthDataUpdatesClient.
type MockGatewayEndpoints_StreamAuthDataUpdatesClientMockRecorder struct {
	mock *MockGatewayEndpoints_StreamAuthDataUpdatesClient
}

// NewMockGatewayEndpoints_StreamAuthDataUpdatesClient creates a new mock instance.
func NewMockGatewayEndpoints_StreamAuthDataUpdatesClient(ctrl *gomock.Controller) *MockGatewayEndpoints_StreamAuthDataUpdatesClient {
	mock := &MockGatewayEndpoints_StreamAuthDataUpdatesClient{ctrl: ctrl}
	mock.recorder = &MockGatewayEndpoints_StreamAuthDataUpdatesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayEndpoints_StreamAuthDataUpdatesClient) EXPECT() *MockGatewayEndpoints_StreamAuthDataUpdatesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockGatewayEndpoints_StreamAuthDataUpdatesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockGatewayEndpoints_StreamAuthDataUpdatesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockGatewayEndpoints_StreamAuthDataUpdatesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockGatewayEndpoints_StreamAuthDataUpdatesClient) Recv() (*proto.AuthDataUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.AuthDataUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockGatewayEndpoints_StreamAuthDataUpdatesClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockGatewayEndpoints_StreamAuthDataUpdatesClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockGatewayEndpoints_StreamAuthDataUpdatesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesClient)(nil).Trailer))
}

// MockGatewayEndpointsServer is a mock of GatewayEndpointsServer interface.
type MockGatewayEndpointsServer struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayEndpointsServerMockRecorder
	isgomock struct{}
}

// MockGatewayEndpointsServerMockRecorder is the mock recorder for MockGatewayEndpointsServer.
type MockGatewayEndpointsServerMockRecorder struct {
	mock *MockGatewayEndpointsServer
}

// NewMockGatewayEndpointsServer creates a new mock instance.
func NewMockGatewayEndpointsServer(ctrl *gomock.Controller) *MockGatewayEndpointsServer {
	mock := &MockGatewayEndpointsServer{ctrl: ctrl}
	mock.recorder = &MockGatewayEndpointsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayEndpointsServer) EXPECT() *MockGatewayEndpointsServerMockRecorder {
	return m.recorder
}

// FetchAuthDataSync mocks base method.
func (m *MockGatewayEndpointsServer) FetchAuthDataSync(arg0 context.Context, arg1 *proto.AuthDataRequest) (*proto.AuthDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAuthDataSync", arg0, arg1)
	ret0, _ := ret[0].(*proto.AuthDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAuthDataSync indicates an expected call of FetchAuthDataSync.
func (mr *MockGatewayEndpointsServerMockRecorder) FetchAuthDataSync(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAuthDataSync", reflect.TypeOf((*MockGatewayEndpointsServer)(nil).FetchAuthDataSync), arg0, arg1)
}

// StreamAuthDataUpdates mocks base method.
func (m *MockGatewayEndpointsServer) StreamAuthDataUpdates(arg0 *proto.AuthDataUpdatesRequest, arg1 proto.GatewayEndpoints_StreamAuthDataUpdatesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamAuthDataUpdates", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamAuthDataUpdates indicates an expected call of StreamAuthDataUpdates.
func (mr *MockGatewayEndpointsServerMockRecorder) StreamAuthDataUpdates(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamAuthDataUpdates", reflect.TypeOf((*MockGatewayEndpointsServer)(nil).StreamAuthDataUpdates), arg0, arg1)
}

// mustEmbedUnimplementedGatewayEndpointsServer mocks base method.
func (m *MockGatewayEndpointsServer) mustEmbedUnimplementedGatewayEndpointsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGatewayEndpointsServer")
}

// mustEmbedUnimplementedGatewayEndpointsServer indicates an expected call of mustEmbedUnimplementedGatewayEndpointsServer.
func (mr *MockGatewayEndpointsServerMockRecorder) mustEmbedUnimplementedGatewayEndpointsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGatewayEndpointsServer", reflect.TypeOf((*MockGatewayEndpointsServer)(nil).mustEmbedUnimplementedGatewayEndpointsServer))
}

// MockUnsafeGatewayEndpointsServer is a mock of UnsafeGatewayEndpointsServer interface.
type MockUnsafeGatewayEndpointsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGatewayEndpointsServerMockRecorder
	isgomock struct{}
}

// MockUnsafeGatewayEndpointsServerMockRecorder is the mock recorder for MockUnsafeGatewayEndpointsServer.
type MockUnsafeGatewayEndpointsServerMockRecorder struct {
	mock *MockUnsafeGatewayEndpointsServer
}

// NewMockUnsafeGatewayEndpointsServer creates a new mock instance.
func NewMockUnsafeGatewayEndpointsServer(ctrl *gomock.Controller) *MockUnsafeGatewayEndpointsServer {
	mock := &MockUnsafeGatewayEndpointsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeGatewayEndpointsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGatewayEndpointsServer) EXPECT() *MockUnsafeGatewayEndpointsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedGatewayEndpointsServer mocks base method.
func (m *MockUnsafeGatewayEndpointsServer) mustEmbedUnimplementedGatewayEndpointsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGatewayEndpointsServer")
}

// mustEmbedUnimplementedGatewayEndpointsServer indicates an expected call of mustEmbedUnimplementedGatewayEndpointsServer.
func (mr *MockUnsafeGatewayEndpointsServerMockRecorder) mustEmbedUnimplementedGatewayEndpointsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGatewayEndpointsServer", reflect.TypeOf((*MockUnsafeGatewayEndpointsServer)(nil).mustEmbedUnimplementedGatewayEndpointsServer))
}

// MockGatewayEndpoints_StreamAuthDataUpdatesServer is a mock of GatewayEndpoints_StreamAuthDataUpdatesServer interface.
type MockGatewayEndpoints_StreamAuthDataUpdatesServer struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayEndpoints_StreamAuthDataUpdatesServerMockRecorder
	isgomock struct{}
}

// MockGatewayEndpoints_StreamAuthDataUpdatesServerMockRecorder is the mock recorder for MockGatewayEndpoints_StreamAuthDataUpdatesServer.
type MockGatewayEndpoints_StreamAuthDataUpdatesServerMockRecorder struct {
	mock *MockGatewayEndpoints_StreamAuthDataUpdatesServer
}

// NewMockGatewayEndpoints_StreamAuthDataUpdatesServer creates a new mock instance.
func NewMockGatewayEndpoints_StreamAuthDataUpdatesServer(ctrl *gomock.Controller) *MockGatewayEndpoints_StreamAuthDataUpdatesServer {
	mock := &MockGatewayEndpoints_StreamAuthDataUpdatesServer{ctrl: ctrl}
	mock.recorder = &MockGatewayEndpoints_StreamAuthDataUpdatesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayEndpoints_StreamAuthDataUpdatesServer) EXPECT() *MockGatewayEndpoints_StreamAuthDataUpdatesServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockGatewayEndpoints_StreamAuthDataUpdatesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockGatewayEndpoints_StreamAuthDataUpdatesServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockGatewayEndpoints_StreamAuthDataUpdatesServer) Send(arg0 *proto.AuthDataUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockGatewayEndpoints_StreamAuthDataUpdatesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockGatewayEndpoints_StreamAuthDataUpdatesServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockGatewayEndpoints_StreamAuthDataUpdatesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockGatewayEndpoints_StreamAuthDataUpdatesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockGatewayEndpoints_StreamAuthDataUpdatesServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockGatewayEndpoints_StreamAuthDataUpdatesServer)(nil).SetTrailer), arg0)
}

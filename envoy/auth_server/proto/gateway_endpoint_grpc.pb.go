// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: envoy/auth_server/proto/gateway_endpoint.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GatewayEndpoints_GetInitialData_FullMethodName = "/proto.GatewayEndpoints/GetInitialData"
	GatewayEndpoints_StreamUpdates_FullMethodName  = "/proto.GatewayEndpoints/StreamUpdates"
)

// GatewayEndpointsClient is the client API for GatewayEndpoints service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayEndpointsClient interface {
	GetInitialData(ctx context.Context, in *InitialDataRequest, opts ...grpc.CallOption) (*InitialDataResponse, error)
	StreamUpdates(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Update], error)
}

type gatewayEndpointsClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayEndpointsClient(cc grpc.ClientConnInterface) GatewayEndpointsClient {
	return &gatewayEndpointsClient{cc}
}

func (c *gatewayEndpointsClient) GetInitialData(ctx context.Context, in *InitialDataRequest, opts ...grpc.CallOption) (*InitialDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitialDataResponse)
	err := c.cc.Invoke(ctx, GatewayEndpoints_GetInitialData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayEndpointsClient) StreamUpdates(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Update], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GatewayEndpoints_ServiceDesc.Streams[0], GatewayEndpoints_StreamUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdatesRequest, Update]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GatewayEndpoints_StreamUpdatesClient = grpc.ServerStreamingClient[Update]

// GatewayEndpointsServer is the server API for GatewayEndpoints service.
// All implementations must embed UnimplementedGatewayEndpointsServer
// for forward compatibility.
type GatewayEndpointsServer interface {
	GetInitialData(context.Context, *InitialDataRequest) (*InitialDataResponse, error)
	StreamUpdates(*UpdatesRequest, grpc.ServerStreamingServer[Update]) error
	mustEmbedUnimplementedGatewayEndpointsServer()
}

// UnimplementedGatewayEndpointsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayEndpointsServer struct{}

func (UnimplementedGatewayEndpointsServer) GetInitialData(context.Context, *InitialDataRequest) (*InitialDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInitialData not implemented")
}
func (UnimplementedGatewayEndpointsServer) StreamUpdates(*UpdatesRequest, grpc.ServerStreamingServer[Update]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUpdates not implemented")
}
func (UnimplementedGatewayEndpointsServer) mustEmbedUnimplementedGatewayEndpointsServer() {}
func (UnimplementedGatewayEndpointsServer) testEmbeddedByValue()                          {}

// UnsafeGatewayEndpointsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayEndpointsServer will
// result in compilation errors.
type UnsafeGatewayEndpointsServer interface {
	mustEmbedUnimplementedGatewayEndpointsServer()
}

func RegisterGatewayEndpointsServer(s grpc.ServiceRegistrar, srv GatewayEndpointsServer) {
	// If the following call pancis, it indicates UnimplementedGatewayEndpointsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatewayEndpoints_ServiceDesc, srv)
}

func _GatewayEndpoints_GetInitialData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitialDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayEndpointsServer).GetInitialData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayEndpoints_GetInitialData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayEndpointsServer).GetInitialData(ctx, req.(*InitialDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayEndpoints_StreamUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayEndpointsServer).StreamUpdates(m, &grpc.GenericServerStream[UpdatesRequest, Update]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GatewayEndpoints_StreamUpdatesServer = grpc.ServerStreamingServer[Update]

// GatewayEndpoints_ServiceDesc is the grpc.ServiceDesc for GatewayEndpoints service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayEndpoints_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GatewayEndpoints",
	HandlerType: (*GatewayEndpointsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInitialData",
			Handler:    _GatewayEndpoints_GetInitialData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUpdates",
			Handler:       _GatewayEndpoints_StreamUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "envoy/auth_server/proto/gateway_endpoint.proto",
}

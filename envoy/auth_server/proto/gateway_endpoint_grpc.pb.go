// To generate the Go code from this proto file, run:
//  `make proto_generate`
// which runs:
//  `protoc --go_out=./envoy/auth_server/proto --go-grpc_out=./envoy/auth_server/proto envoy/auth_server/proto/gateway_endpoint.proto`

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.3
// source: envoy/auth_server/proto/gateway_endpoint.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GatewayEndpoints_FetchAuthDataSync_FullMethodName     = "/proto.GatewayEndpoints/FetchAuthDataSync"
	GatewayEndpoints_StreamAuthDataUpdates_FullMethodName = "/proto.GatewayEndpoints/StreamAuthDataUpdates"
)

// GatewayEndpointsClient is the client API for GatewayEndpoints service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The GatewayEndpoints service provides a gRPC interface for the Auth Server to
// interact with the remote gRPC server.
type GatewayEndpointsClient interface {
	// FetchAuthDataSync requests the initial set of GatewayEndpoints from the remote gRPC server.
	FetchAuthDataSync(ctx context.Context, in *AuthDataRequest, opts ...grpc.CallOption) (*AuthDataResponse, error)
	// StreamAuthDataUpdates listens for updates from the remote gRPC server and streams them to the client.
	StreamAuthDataUpdates(ctx context.Context, in *AuthDataUpdatesRequest, opts ...grpc.CallOption) (GatewayEndpoints_StreamAuthDataUpdatesClient, error)
}

type gatewayEndpointsClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayEndpointsClient(cc grpc.ClientConnInterface) GatewayEndpointsClient {
	return &gatewayEndpointsClient{cc}
}

func (c *gatewayEndpointsClient) FetchAuthDataSync(ctx context.Context, in *AuthDataRequest, opts ...grpc.CallOption) (*AuthDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthDataResponse)
	err := c.cc.Invoke(ctx, GatewayEndpoints_FetchAuthDataSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayEndpointsClient) StreamAuthDataUpdates(ctx context.Context, in *AuthDataUpdatesRequest, opts ...grpc.CallOption) (GatewayEndpoints_StreamAuthDataUpdatesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GatewayEndpoints_ServiceDesc.Streams[0], GatewayEndpoints_StreamAuthDataUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayEndpointsStreamAuthDataUpdatesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayEndpoints_StreamAuthDataUpdatesClient interface {
	Recv() (*AuthDataUpdate, error)
	grpc.ClientStream
}

type gatewayEndpointsStreamAuthDataUpdatesClient struct {
	grpc.ClientStream
}

func (x *gatewayEndpointsStreamAuthDataUpdatesClient) Recv() (*AuthDataUpdate, error) {
	m := new(AuthDataUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayEndpointsServer is the server API for GatewayEndpoints service.
// All implementations must embed UnimplementedGatewayEndpointsServer
// for forward compatibility
//
// The GatewayEndpoints service provides a gRPC interface for the Auth Server to
// interact with the remote gRPC server.
type GatewayEndpointsServer interface {
	// FetchAuthDataSync requests the initial set of GatewayEndpoints from the remote gRPC server.
	FetchAuthDataSync(context.Context, *AuthDataRequest) (*AuthDataResponse, error)
	// StreamAuthDataUpdates listens for updates from the remote gRPC server and streams them to the client.
	StreamAuthDataUpdates(*AuthDataUpdatesRequest, GatewayEndpoints_StreamAuthDataUpdatesServer) error
	mustEmbedUnimplementedGatewayEndpointsServer()
}

// UnimplementedGatewayEndpointsServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayEndpointsServer struct {
}

func (UnimplementedGatewayEndpointsServer) FetchAuthDataSync(context.Context, *AuthDataRequest) (*AuthDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAuthDataSync not implemented")
}
func (UnimplementedGatewayEndpointsServer) StreamAuthDataUpdates(*AuthDataUpdatesRequest, GatewayEndpoints_StreamAuthDataUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAuthDataUpdates not implemented")
}
func (UnimplementedGatewayEndpointsServer) mustEmbedUnimplementedGatewayEndpointsServer() {}

// UnsafeGatewayEndpointsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayEndpointsServer will
// result in compilation errors.
type UnsafeGatewayEndpointsServer interface {
	mustEmbedUnimplementedGatewayEndpointsServer()
}

func RegisterGatewayEndpointsServer(s grpc.ServiceRegistrar, srv GatewayEndpointsServer) {
	s.RegisterService(&GatewayEndpoints_ServiceDesc, srv)
}

func _GatewayEndpoints_FetchAuthDataSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayEndpointsServer).FetchAuthDataSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayEndpoints_FetchAuthDataSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayEndpointsServer).FetchAuthDataSync(ctx, req.(*AuthDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayEndpoints_StreamAuthDataUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AuthDataUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayEndpointsServer).StreamAuthDataUpdates(m, &gatewayEndpointsStreamAuthDataUpdatesServer{ServerStream: stream})
}

type GatewayEndpoints_StreamAuthDataUpdatesServer interface {
	Send(*AuthDataUpdate) error
	grpc.ServerStream
}

type gatewayEndpointsStreamAuthDataUpdatesServer struct {
	grpc.ServerStream
}

func (x *gatewayEndpointsStreamAuthDataUpdatesServer) Send(m *AuthDataUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// GatewayEndpoints_ServiceDesc is the grpc.ServiceDesc for GatewayEndpoints service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayEndpoints_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GatewayEndpoints",
	HandlerType: (*GatewayEndpointsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchAuthDataSync",
			Handler:    _GatewayEndpoints_FetchAuthDataSync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAuthDataUpdates",
			Handler:       _GatewayEndpoints_StreamAuthDataUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "envoy/auth_server/proto/gateway_endpoint.proto",
}

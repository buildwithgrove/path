// To generate the Go code from this proto file, run:
//  `make proto_generate`
// which runs:
//  `protoc --go_out=./envoy/auth_server/proto --go-grpc_out=./envoy/auth_server/proto envoy/auth_server/proto/gateway_endpoint.proto`

syntax = "proto3";

package proto;

// Specify the Go package name for generated code.
//  . - output autogenerated code to the current directory.
//  ;proto - autogenerated code will be in the proto package.
// See more: https://protobuf.dev/reference/go/go-generated/#package
option go_package = ".;proto";

// The GatewayEndpoints service provides a gRPC interface for the Auth Server to
// interact with the remote gRPC server.
service GatewayEndpoints {
  // FetchAuthDataSync requests the initial set of GatewayEndpoints from the remote gRPC server.
  rpc FetchAuthDataSync(AuthDataRequest) returns (AuthDataResponse);

  // StreamAuthDataUpdates listens for updates from the remote gRPC server and streams them to the client.
  rpc StreamAuthDataUpdates(AuthDataUpdatesRequest) returns (stream AuthDataUpdate);
}

message AuthDataRequest {}

message AuthDataResponse {
  map<string, GatewayEndpoint> endpoints = 1;
}

message AuthDataUpdatesRequest {}

// An AuthDataUpdate message is sent from the remote gRPC server when a GatewayEndpoint is created, updated, or deleted.
message AuthDataUpdate {
  // A unique identifier for a user account's GatewayEndpoint.
  // This is used to identify the GatewayEndpoint when making a service request.
  // It must be passed as the last path segment of the service request URL.
  // For example: POST https://api.path.xyz/v1/{gateway_endpoint_id}
  string endpoint_id = 1;

  // The GatewayEndpoint to upsert to the database.
  // If delete is true, this field should be empty and the associated endpoint_id will be deleted.
  GatewayEndpoint gateway_endpoint = 2;

  // Indicates whether the GatewayEndpoint should be deleted.
  bool delete = 3;
}

// A GatewayEndpoint represents a user account's endpoint, which has two primary functions:
//  1. Identifying which endpoint is being used to make a service request.
//  2. Allowing configuration of endpoint-specific settings, such as API key authorization, etc.
//
// A GatewayEndpoint is associated to a single UserAccount.
// A single UserAccount can have multiple GatewayEndpoints.
// Settings related to service requests, such as enforcing API key authorization, are configured per GatewayEndpoint.
message GatewayEndpoint {
  // The unique identifier for a UserAccount's endpoint.
  // It must be passed as the last path segment of the service request URL; eg `/v1/{endpoint_id}`.
  // This is used to identify the GatewayEndpoint when making a service request.
  string endpoint_id = 1;

  // The authorization settings for the GatewayEndpoint.
  Auth auth = 2;

  // The rate limiting settings for the GatewayEndpoint.
  // This includes both throughput (TPS) limit and the capacity (longer period) limit.
  RateLimiting rate_limiting = 3;

  // Optional metadata for the GatewayEndpoint, which can be set to any additional information.
  map<string, string> metadata = 4;
}

// The authorization settings for a GatewayEndpoint.
message Auth {
  enum AuthType {
    NO_AUTH = 0;
    API_KEY_AUTH = 1;
    JWT_AUTH = 2;
  }

  // The type of authentication being used.
  AuthType auth_type = 1;

  oneof auth_type_details {
    //
    Empty no_auth = 2;

    // The API key authorization settings for the GatewayEndpoint.
    string api_key = 3;

    // The JWT authorization settings for the GatewayEndpoint.
    JWT jwt = 4;
  }
}

// JWT is the JSON Web Token authorization settings for a GatewayEndpoint.
message JWT {
  // A map of ProviderUserIDs authorized to access this UserAccount's GatewayEndpoints.
  map<string, Empty> authorized_users = 2;
}

// The rate limiting settings for a GatewayEndpoint.
message RateLimiting {
  // ThroughputLimit refers to rate limiting per-second (TPS).
  // This is used to prevent DoS or DDoS attacks, as well as enforce pricing plan limits.
  int32 throughput_limit = 1;

  // CapacityLimit refers to rate limiting over longer periods, such as a day, week or month.
  // This is to prevent abuse of the services provided, as well enforce pricing plan limits.
  int32 capacity_limit = 2;

  // The period over which the CapacityLimit is enforced. One of `daily`, `weekly` or `monthly`.
  CapacityLimitPeriod capacity_limit_period = 3;
}

// CapacityLimitPeriod is the period over which the capacity limit is enforced.
// For example: CapacityLimit=`100,000` and CapacityLimitPeriod=`daily`
// enforces a rate limit of 100,000 requests per day.
enum CapacityLimitPeriod {
    CAPACITY_LIMIT_PERIOD_UNSPECIFIED = 0;
    CAPACITY_LIMIT_PERIOD_DAILY = 1;
    CAPACITY_LIMIT_PERIOD_WEEKLY = 2;
    CAPACITY_LIMIT_PERIOD_MONTHLY = 3;
  }

// An Empty message is used to indicate that a field is not set.
message Empty {}

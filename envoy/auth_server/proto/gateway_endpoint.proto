// To generate the Go code from this proto file, run:
//  `make proto_generate`
// which runs:
//  `protoc --go_out=./envoy/auth_server/proto --go-grpc_out=./envoy/auth_server/proto envoy/auth_server/proto/gateway_endpoint.proto`

syntax = "proto3";

package proto;

// Specify the Go package name for generated code.
//  . - output autogenerated code to the current directory.
//  ;proto - autogenerated code will be in the proto package.
// See more: https://protobuf.dev/reference/go/go-generated/#package
option go_package = ".;proto";

// The GatewayEndpoints service provides a gRPC interface for the Auth Server to
// interact with the remote gRPC server.
service GatewayEndpoints {
  // FetchAuthDataSync requests the initial set of GatewayEndpoints from the remote gRPC server.
  rpc FetchAuthDataSync(AuthDataRequest) returns (AuthDataResponse);
  // StreamAuthDataUpdates listens for updates from the remote gRPC server and streams them to the client.
  rpc StreamAuthDataUpdates(AuthDataUpdatesRequest) returns (stream AuthDataUpdate);
}

message AuthDataRequest {}

// An AuthDataResponse message is sent from the remote gRPC server to the Auth Server
// containing the full current set of GatewayEndpoints from the remote gRPC server's data source.
message AuthDataResponse {
  map<string, GatewayEndpoint> endpoints = 1;
}

message AuthDataUpdatesRequest {}

// An AuthDataUpdate message is sent from the remote gRPC server when a GatewayEndpoint is created, updated, or deleted.
message AuthDataUpdate {
  // A unique identifier for a user account's GatewayEndpoint.
  // This is used to identify the GatewayEndpoint when making a service request.
  // It must be passed as the last path segment of the service request URL.
  // For example: POST https://api.path.xyz/v1/{gateway_endpoint_id}
  string endpoint_id = 1;

  // The GatewayEndpoint to upsert to the database.
  // If delete is true, this field should be empty and the associated endpoint_id will be deleted.
  GatewayEndpoint gateway_endpoint = 2;

  // Indicates whether the GatewayEndpoint should be deleted.
  bool delete = 3;
}

// A GatewayEndpoint represents a user account's endpoint, which has two primary functions:
//  1. Identifying which endpoint is being used to make a service request.
//  2. Allowing configuration of endpoint-specific settings, such as API key authorization, etc.
//
// A GatewayEndpoint is associated to a single UserAccount.
// A single UserAccount can have multiple GatewayEndpoints.
// Settings related to service requests, such as enforcing API key authorization, are configured per GatewayEndpoint.
message GatewayEndpoint {
  // The unique identifier for a UserAccount's endpoint.
  // It must be passed as the last path segment of the service request URL; eg `/v1/{endpoint_id}`.
  // This is used to identify the GatewayEndpoint when making a service request.
  string endpoint_id = 1;

  // The authorization settings for the GatewayEndpoint.
  Auth auth = 2;

  // The rate limiting settings for the GatewayEndpoint.
  // This includes both throughput (TPS) limit and the capacity (longer period) limit.
  RateLimiting rate_limiting = 3;

  // Optional metadata for the GatewayEndpoint, which can be set to any additional information.
  Metadata metadata = 4;
}

// The authorization settings for a GatewayEndpoint.
message Auth {
  oneof auth_type {
    // Indicates that the GatewayEndpoint does not require authorization.
    NoAuth no_auth = 1;
    // Indicates that the GatewayEndpoint uses a static API key for authorization.
    StaticAPIKey static_api_key = 2;
    // Indicates that the GatewayEndpoint uses an auth provider issued JWT for authorization.
    JWT jwt = 3;
  }
}

// NoAuth indicates that the GatewayEndpoint does not require authorization.
// It is simply an empty field, named explicitly to avoid confusion with the `Empty` message.
message NoAuth {}

message StaticAPIKey {
  // The API key to use for authorization.
  string api_key = 1;
}

// JWT is the JSON Web Token authorization settings for a GatewayEndpoint.
message JWT {
  // A map of user IDs authorized to access this UserAccount's GatewayEndpoints.
  // For example, if the auth provider is Auth0, the user ID will be in the format `auth0|1234567890`.
  map<string, Empty> authorized_users = 2;
}

// The rate limiting settings for a GatewayEndpoint.
message RateLimiting {
  // ThroughputLimit refers to rate limiting per-second (TPS).
  // This is used to prevent DoS or DDoS attacks, as well as enforce pricing plan limits.
  int32 throughput_limit = 1;

  // CapacityLimit refers to rate limiting over longer periods, such as a day, week or month.
  // This is to prevent abuse of the services provided, as well enforce pricing plan limits.
  int32 capacity_limit = 2;

  // The period over which the CapacityLimit is enforced. One of `daily`, `weekly` or `monthly`.
  CapacityLimitPeriod capacity_limit_period = 3;
}

// CapacityLimitPeriod is the period over which the capacity limit is enforced.
// For example: CapacityLimit=`100,000` and CapacityLimitPeriod=`daily`
// enforces a rate limit of 100,000 requests per day.
enum CapacityLimitPeriod {
  CAPACITY_LIMIT_PERIOD_UNSPECIFIED = 0;
  CAPACITY_LIMIT_PERIOD_DAILY = 1;
  CAPACITY_LIMIT_PERIOD_WEEKLY = 2;
  CAPACITY_LIMIT_PERIOD_MONTHLY = 3;
}

// Metadata is the metadata for a GatewayEndpoint, defined as fields that are not
// required for perform technical tasks related to the Envoy Auth implementation.
//
// These fields are intended to be used for billing, metrics, and other purposes.
// All fields are optional and may be left blank if not applicable.
message Metadata {
  string name = 1;             // The name of the GatewayEndpoint
  string account_id = 2;       // Unique identifier for the user's account
  string user_id = 3;          // Identifier for a specific user within the system
  string plan_type = 4;        // Subscription or account plan type (e.g., "Free", "Pro", "Enterprise")
  string email = 5;            // The email address associated with the GatewayEndpoint
  string environment = 6;      // The environment the GatewayEndpoint is in (e.g., "development", "staging", "production")
}

// An Empty message is used to indicate that a field is not set.
message Empty {}


// Code generated by MockGen. DO NOT EDIT.
// Source: driver.go
//
// Generated by this command:
//
//	mockgen -source=driver.go -destination=driver_mock_test.go -package=db
//

// Package db is a generated GoMock package.
//go:build auth_plugin

package db

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	
	types "github.com/buildwithgrove/authorizer-plugin/types"
)

// MockDBDriver is a mock of DBDriver interface.
type MockDBDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDBDriverMockRecorder
}

// MockDBDriverMockRecorder is the mock recorder for MockDBDriver.
type MockDBDriverMockRecorder struct {
	mock *MockDBDriver
}

// NewMockDBDriver creates a new mock instance.
func NewMockDBDriver(ctrl *gomock.Controller) *MockDBDriver {
	mock := &MockDBDriver{ctrl: ctrl}
	mock.recorder = &MockDBDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBDriver) EXPECT() *MockDBDriverMockRecorder {
	return m.recorder
}

// GetGatewayEndpoints mocks base method.
func (m *MockDBDriver) GetGatewayEndpoints(ctx context.Context) (map[types.EndpointID]types.GatewayEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGatewayEndpoints", ctx)
	ret0, _ := ret[0].(map[types.EndpointID]types.GatewayEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGatewayEndpoints indicates an expected call of GetGatewayEndpoints.
func (mr *MockDBDriverMockRecorder) GetGatewayEndpoints(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayEndpoints", reflect.TypeOf((*MockDBDriver)(nil).GetGatewayEndpoints), ctx)
}
